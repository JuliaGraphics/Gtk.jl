quote
$(Expr(:toplevel, quote
    function get_artists(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_artists", libgtk3), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret
    end
    function get_authors(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_authors", libgtk3), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret
    end
    function get_comments(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_comments", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_copyright(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_copyright", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_documenters(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_documenters", libgtk3), Ptr{Cstring}, (Ptr{GObject},), instance)
        ret
    end
    function get_license(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_license", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_license_type(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_license_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = License(ret)
        ret2
    end
    function get_logo(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_logo", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkPixbuf, ret, false)
        ret2
    end
    function get_logo_icon_name(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_logo_icon_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_program_name(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_program_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_translator_credits(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_translator_credits", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_version(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_version", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_website(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_website", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_website_label(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_website_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_wrap_license(instance::GtkAboutDialog)
        ret = ccall(("gtk_about_dialog_get_wrap_license", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_artists(instance::GtkAboutDialog, _artists)
        _artists = convert(Vector{Cstring}, _artists)
        ret = ccall(("gtk_about_dialog_set_artists", libgtk3), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _artists)
        nothing
    end
    function set_authors(instance::GtkAboutDialog, _authors)
        _authors = convert(Vector{Cstring}, _authors)
        ret = ccall(("gtk_about_dialog_set_authors", libgtk3), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _authors)
        nothing
    end
    function set_comments(instance::GtkAboutDialog, _comments::Maybe(Union{AbstractString, Symbol}))
        _comments = if _comments == nothing
                C_NULL
            else
                _comments
            end
        ret = ccall(("gtk_about_dialog_set_comments", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _comments)
        nothing
    end
    function set_copyright(instance::GtkAboutDialog, _copyright::Maybe(Union{AbstractString, Symbol}))
        _copyright = if _copyright == nothing
                C_NULL
            else
                _copyright
            end
        ret = ccall(("gtk_about_dialog_set_copyright", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _copyright)
        nothing
    end
    function set_documenters(instance::GtkAboutDialog, _documenters)
        _documenters = convert(Vector{Cstring}, _documenters)
        ret = ccall(("gtk_about_dialog_set_documenters", libgtk3), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _documenters)
        nothing
    end
    function set_license(instance::GtkAboutDialog, _license::Maybe(Union{AbstractString, Symbol}))
        _license = if _license == nothing
                C_NULL
            else
                _license
            end
        ret = ccall(("gtk_about_dialog_set_license", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _license)
        nothing
    end
    function set_license_type(instance::GtkAboutDialog, _license_type)
        ret = ccall(("gtk_about_dialog_set_license_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _license_type)
        nothing
    end
    function set_logo(instance::GtkAboutDialog, _logo::Maybe(GdkPixbuf))
        _logo = if _logo == nothing
                C_NULL
            else
                _logo
            end
        ret = ccall(("gtk_about_dialog_set_logo", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _logo)
        nothing
    end
    function set_logo_icon_name(instance::GtkAboutDialog, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_about_dialog_set_logo_icon_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name)
        nothing
    end
    function set_program_name(instance::GtkAboutDialog, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_about_dialog_set_program_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function set_translator_credits(instance::GtkAboutDialog, _translator_credits::Maybe(Union{AbstractString, Symbol}))
        _translator_credits = if _translator_credits == nothing
                C_NULL
            else
                _translator_credits
            end
        ret = ccall(("gtk_about_dialog_set_translator_credits", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _translator_credits)
        nothing
    end
    function set_version(instance::GtkAboutDialog, _version::Maybe(Union{AbstractString, Symbol}))
        _version = if _version == nothing
                C_NULL
            else
                _version
            end
        ret = ccall(("gtk_about_dialog_set_version", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _version)
        nothing
    end
    function set_website(instance::GtkAboutDialog, _website::Maybe(Union{AbstractString, Symbol}))
        _website = if _website == nothing
                C_NULL
            else
                _website
            end
        ret = ccall(("gtk_about_dialog_set_website", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _website)
        nothing
    end
    function set_website_label(instance::GtkAboutDialog, _website_label::Union{AbstractString, Symbol})
        ret = ccall(("gtk_about_dialog_set_website_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _website_label)
        nothing
    end
    function set_wrap_license(instance::GtkAboutDialog, _wrap_license::Bool)
        ret = ccall(("gtk_about_dialog_set_wrap_license", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _wrap_license)
        nothing
    end
    function get_is_locked(instance::GtkAccelGroup)
        ret = ccall(("gtk_accel_group_get_is_locked", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_modifier_mask(instance::GtkAccelGroup)
        ret = ccall(("gtk_accel_group_get_modifier_mask", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_accel_widget(instance::GtkAccelLabel)
        ret = ccall(("gtk_accel_label_get_accel_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_accel_width(instance::GtkAccelLabel)
        ret = ccall(("gtk_accel_label_get_accel_width", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_accel_widget(instance::GtkAccelLabel, _accel_widget::Maybe(GtkWidget))
        _accel_widget = if _accel_widget == nothing
                C_NULL
            else
                _accel_widget
            end
        ret = ccall(("gtk_accel_label_set_accel_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _accel_widget)
        nothing
    end
    function get_widget(instance::GtkAccessible)
        ret = ccall(("gtk_accessible_get_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_widget(instance::GtkAccessible, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_accessible_set_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_center_widget(instance::GtkActionBar)
        ret = ccall(("gtk_action_bar_get_center_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function set_center_widget(instance::GtkActionBar, _center_widget::Maybe(GtkWidget))
        _center_widget = if _center_widget == nothing
                C_NULL
            else
                _center_widget
            end
        ret = ccall(("gtk_action_bar_set_center_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _center_widget)
        nothing
    end
    function get_lower(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_lower", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_minimum_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_minimum_increment", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_page_increment", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_size(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_page_size", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_step_increment(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_step_increment", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_upper(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_upper", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value(instance::GtkAdjustment)
        ret = ccall(("gtk_adjustment_get_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_lower(instance::GtkAdjustment, _lower::Real)
        ret = ccall(("gtk_adjustment_set_lower", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _lower)
        nothing
    end
    function set_page_increment(instance::GtkAdjustment, _page_increment::Real)
        ret = ccall(("gtk_adjustment_set_page_increment", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _page_increment)
        nothing
    end
    function set_page_size(instance::GtkAdjustment, _page_size::Real)
        ret = ccall(("gtk_adjustment_set_page_size", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _page_size)
        nothing
    end
    function set_step_increment(instance::GtkAdjustment, _step_increment::Real)
        ret = ccall(("gtk_adjustment_set_step_increment", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _step_increment)
        nothing
    end
    function set_upper(instance::GtkAdjustment, _upper::Real)
        ret = ccall(("gtk_adjustment_set_upper", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _upper)
        nothing
    end
    function set_value(instance::GtkAdjustment, _value::Real)
        ret = ccall(("gtk_adjustment_set_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function get_heading(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_heading", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_show_default_item(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_show_default_item", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_dialog_item(instance::GtkAppChooserButton)
        ret = ccall(("gtk_app_chooser_button_get_show_dialog_item", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active_custom_item(instance::GtkAppChooserButton, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_app_chooser_button_set_active_custom_item", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function set_heading(instance::GtkAppChooserButton, _heading::Union{AbstractString, Symbol})
        ret = ccall(("gtk_app_chooser_button_set_heading", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _heading)
        nothing
    end
    function set_show_default_item(instance::GtkAppChooserButton, _setting::Bool)
        ret = ccall(("gtk_app_chooser_button_set_show_default_item", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_dialog_item(instance::GtkAppChooserButton, _setting::Bool)
        ret = ccall(("gtk_app_chooser_button_set_show_dialog_item", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_heading(instance::GtkAppChooserDialog)
        ret = ccall(("gtk_app_chooser_dialog_get_heading", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_widget(instance::GtkAppChooserDialog)
        ret = ccall(("gtk_app_chooser_dialog_get_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_heading(instance::GtkAppChooserDialog, _heading::Union{AbstractString, Symbol})
        ret = ccall(("gtk_app_chooser_dialog_set_heading", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _heading)
        nothing
    end
    function get_default_text(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_default_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_show_all(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_all", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_default(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_default", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_fallback(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_fallback", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_other(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_other", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_recommended(instance::GtkAppChooserWidget)
        ret = ccall(("gtk_app_chooser_widget_get_show_recommended", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_text(instance::GtkAppChooserWidget, _text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_app_chooser_widget_set_default_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_show_all(instance::GtkAppChooserWidget, _setting::Bool)
        ret = ccall(("gtk_app_chooser_widget_set_show_all", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_default(instance::GtkAppChooserWidget, _setting::Bool)
        ret = ccall(("gtk_app_chooser_widget_set_show_default", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_fallback(instance::GtkAppChooserWidget, _setting::Bool)
        ret = ccall(("gtk_app_chooser_widget_set_show_fallback", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_other(instance::GtkAppChooserWidget, _setting::Bool)
        ret = ccall(("gtk_app_chooser_widget_set_show_other", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_recommended(instance::GtkAppChooserWidget, _setting::Bool)
        ret = ccall(("gtk_app_chooser_widget_set_show_recommended", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_active_window(instance::GtkApplication)
        ret = ccall(("gtk_application_get_active_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_app_menu(instance::GtkApplication)
        ret = ccall(("gtk_application_get_app_menu", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_menubar(instance::GtkApplication)
        ret = ccall(("gtk_application_get_menubar", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GMenuModel, ret, false)
        ret2
    end
    function get_windows(instance::GtkApplication)
        ret = ccall(("gtk_application_get_windows", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function set_app_menu(instance::GtkApplication, _app_menu::Maybe(GMenuModel))
        _app_menu = if _app_menu == nothing
                C_NULL
            else
                _app_menu
            end
        ret = ccall(("gtk_application_set_app_menu", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _app_menu)
        nothing
    end
    function set_menubar(instance::GtkApplication, _menubar::Maybe(GMenuModel))
        _menubar = if _menubar == nothing
                C_NULL
            else
                _menubar
            end
        ret = ccall(("gtk_application_set_menubar", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menubar)
        nothing
    end
    function get_help_overlay(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_help_overlay", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkShortcutsWindow, ret, false)
            end
        ret2
    end
    function get_id(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_id", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_menubar(instance::GtkApplicationWindow)
        ret = ccall(("gtk_application_window_get_show_menubar", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_help_overlay(instance::GtkApplicationWindow, _help_overlay::Maybe(GtkShortcutsWindow))
        _help_overlay = if _help_overlay == nothing
                C_NULL
            else
                _help_overlay
            end
        ret = ccall(("gtk_application_window_set_help_overlay", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _help_overlay)
        nothing
    end
    function set_show_menubar(instance::GtkApplicationWindow, _show_menubar::Bool)
        ret = ccall(("gtk_application_window_set_show_menubar", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_menubar)
        nothing
    end
    function get_current_page(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_get_current_page", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_pages(instance::GtkAssistant)
        ret = ccall(("gtk_assistant_get_n_pages", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_current_page(instance::GtkAssistant, _page_num::Integer)
        ret = ccall(("gtk_assistant_set_current_page", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function get_child(instance::GtkBin)
        ret = ccall(("gtk_bin_get_child", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_baseline_position(instance::GtkBox)
        ret = ccall(("gtk_box_get_baseline_position", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = BaselinePosition(ret)
        ret2
    end
    function get_center_widget(instance::GtkBox)
        ret = ccall(("gtk_box_get_center_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_homogeneous(instance::GtkBox)
        ret = ccall(("gtk_box_get_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_spacing(instance::GtkBox)
        ret = ccall(("gtk_box_get_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_baseline_position(instance::GtkBox, _position)
        ret = ccall(("gtk_box_set_baseline_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_center_widget(instance::GtkBox, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_box_set_center_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_homogeneous(instance::GtkBox, _homogeneous::Bool)
        ret = ccall(("gtk_box_set_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_spacing(instance::GtkBox, _spacing::Integer)
        ret = ccall(("gtk_box_set_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function get_application(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_application", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkApplication, ret, false)
            end
        ret2
    end
    function get_objects(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_objects", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_translation_domain(instance::GtkBuilder)
        ret = ccall(("gtk_builder_get_translation_domain", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_application(instance::GtkBuilder, _application::GtkApplication)
        ret = ccall(("gtk_builder_set_application", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _application)
        nothing
    end
    function set_translation_domain(instance::GtkBuilder, _domain::Maybe(Union{AbstractString, Symbol}))
        _domain = if _domain == nothing
                C_NULL
            else
                _domain
            end
        ret = ccall(("gtk_builder_set_translation_domain", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _domain)
        nothing
    end
    function get_always_show_image(instance::GtkButton)
        ret = ccall(("gtk_button_get_always_show_image", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_event_window(instance::GtkButton)
        ret = ccall(("gtk_button_get_event_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkWindow, ret, false)
        ret2
    end
    function get_image(instance::GtkButton)
        ret = ccall(("gtk_button_get_image", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_image_position(instance::GtkButton)
        ret = ccall(("gtk_button_get_image_position", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function get_label(instance::GtkButton)
        ret = ccall(("gtk_button_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_relief(instance::GtkButton)
        ret = ccall(("gtk_button_get_relief", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ReliefStyle(ret)
        ret2
    end
    function get_use_underline(instance::GtkButton)
        ret = ccall(("gtk_button_get_use_underline", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_always_show_image(instance::GtkButton, _always_show::Bool)
        ret = ccall(("gtk_button_set_always_show_image", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _always_show)
        nothing
    end
    function set_image(instance::GtkButton, _image::Maybe(GtkWidget))
        _image = if _image == nothing
                C_NULL
            else
                _image
            end
        ret = ccall(("gtk_button_set_image", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _image)
        nothing
    end
    function set_image_position(instance::GtkButton, _position)
        ret = ccall(("gtk_button_set_image_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_label(instance::GtkButton, _label::Union{AbstractString, Symbol})
        ret = ccall(("gtk_button_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_relief(instance::GtkButton, _relief)
        ret = ccall(("gtk_button_set_relief", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _relief)
        nothing
    end
    function set_use_underline(instance::GtkButton, _use_underline::Bool)
        ret = ccall(("gtk_button_set_use_underline", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_layout(instance::GtkButtonBox)
        ret = ccall(("gtk_button_box_get_layout", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ButtonBoxStyle(ret)
        ret2
    end
    function set_layout(instance::GtkButtonBox, _layout_style)
        ret = ccall(("gtk_button_box_set_layout", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _layout_style)
        nothing
    end
    function get_detail_height_rows(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_detail_height_rows", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_detail_width_chars(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_detail_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_display_options(instance::GtkCalendar)
        ret = ccall(("gtk_calendar_get_display_options", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_detail_height_rows(instance::GtkCalendar, _rows::Integer)
        ret = ccall(("gtk_calendar_set_detail_height_rows", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _rows)
        nothing
    end
    function set_detail_width_chars(instance::GtkCalendar, _chars::Integer)
        ret = ccall(("gtk_calendar_set_detail_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _chars)
        nothing
    end
    function set_display_options(instance::GtkCalendar, _flags::Integer)
        ret = ccall(("gtk_calendar_set_display_options", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function get_current_path_string(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_current_path_string", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_edit_widget(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_edit_widget", libgtk3), Ptr{GtkWidget}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function get_edited_cell(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_edited_cell", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function get_focus_cell(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_focus_cell", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellRenderer, ret, false)
        ret2
    end
    function get_request_mode(instance::GtkCellArea)
        ret = ccall(("gtk_cell_area_get_request_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function set_focus_cell(instance::GtkCellArea, _renderer::GtkCellRenderer)
        ret = ccall(("gtk_cell_area_set_focus_cell", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _renderer)
        nothing
    end
    function get_spacing(instance::GtkCellAreaBox)
        ret = ccall(("gtk_cell_area_box_get_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_spacing(instance::GtkCellAreaBox, _spacing::Integer)
        ret = ccall(("gtk_cell_area_box_set_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function get_area(instance::GtkCellAreaContext)
        ret = ccall(("gtk_cell_area_context_get_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkCellArea, ret, false)
        ret2
    end
    function get_request_mode(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_request_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function get_sensitive(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_sensitive", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible(instance::GtkCellRenderer)
        ret = ccall(("gtk_cell_renderer_get_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_sensitive(instance::GtkCellRenderer, _sensitive::Bool)
        ret = ccall(("gtk_cell_renderer_set_sensitive", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _sensitive)
        nothing
    end
    function set_visible(instance::GtkCellRenderer, _visible::Bool)
        ret = ccall(("gtk_cell_renderer_set_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function set_fixed_height_from_font(instance::GtkCellRendererText, _number_of_rows::Integer)
        ret = ccall(("gtk_cell_renderer_text_set_fixed_height_from_font", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _number_of_rows)
        nothing
    end
    function get_activatable(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_activatable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_active(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_radio(instance::GtkCellRendererToggle)
        ret = ccall(("gtk_cell_renderer_toggle_get_radio", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activatable(instance::GtkCellRendererToggle, _setting::Bool)
        ret = ccall(("gtk_cell_renderer_toggle_set_activatable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_active(instance::GtkCellRendererToggle, _setting::Bool)
        ret = ccall(("gtk_cell_renderer_toggle_set_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_radio(instance::GtkCellRendererToggle, _radio::Bool)
        ret = ccall(("gtk_cell_renderer_toggle_set_radio", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _radio)
        nothing
    end
    function get_displayed_row(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_displayed_row", libgtk3), Ref{GtkTreePath}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, true)
            end
        ret2
    end
    function get_draw_sensitive(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_draw_sensitive", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_fit_model(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_fit_model", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_model(instance::GtkCellView)
        ret = ccall(("gtk_cell_view_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, false)
                end
            end
        ret2
    end
    function set_displayed_row(instance::GtkCellView, _path)
        _path = if _path == nothing
                C_NULL
            else
                _path
            end
        ret = ccall(("gtk_cell_view_set_displayed_row", libgtk3), Nothing, (Ptr{GObject}, Ref{GtkTreePath}), instance, _path)
        nothing
    end
    function set_draw_sensitive(instance::GtkCellView, _draw_sensitive::Bool)
        ret = ccall(("gtk_cell_view_set_draw_sensitive", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _draw_sensitive)
        nothing
    end
    function set_fit_model(instance::GtkCellView, _fit_model::Bool)
        ret = ccall(("gtk_cell_view_set_fit_model", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _fit_model)
        nothing
    end
    function set_model(instance::GtkCellView, _model::Maybe(GtkTreeModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_cell_view_set_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function get_active(instance::GtkCheckMenuItem)
        ret = ccall(("gtk_check_menu_item_get_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_draw_as_radio(instance::GtkCheckMenuItem)
        ret = ccall(("gtk_check_menu_item_get_draw_as_radio", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inconsistent(instance::GtkCheckMenuItem)
        ret = ccall(("gtk_check_menu_item_get_inconsistent", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkCheckMenuItem, _is_active::Bool)
        ret = ccall(("gtk_check_menu_item_set_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function set_draw_as_radio(instance::GtkCheckMenuItem, _draw_as_radio::Bool)
        ret = ccall(("gtk_check_menu_item_set_draw_as_radio", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _draw_as_radio)
        nothing
    end
    function set_inconsistent(instance::GtkCheckMenuItem, _setting::Bool)
        ret = ccall(("gtk_check_menu_item_set_inconsistent", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_display(instance::GtkClipboard)
        ret = ccall(("gtk_clipboard_get_display", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_owner(instance::GtkClipboard)
        ret = ccall(("gtk_clipboard_get_owner", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GObject, ret, false)
            end
        ret2
    end
    function set_image(instance::GtkClipboard, _pixbuf::GdkPixbuf)
        ret = ccall(("gtk_clipboard_set_image", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _pixbuf)
        nothing
    end
    function get_title(instance::GtkColorButton)
        ret = ccall(("gtk_color_button_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_title(instance::GtkColorButton, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_color_button_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_current_alpha(instance::GtkColorSelection)
        ret = ccall(("gtk_color_selection_get_current_alpha", libgtk3), UInt16, (Ptr{GObject},), instance)
        ret
    end
    function get_has_opacity_control(instance::GtkColorSelection)
        ret = ccall(("gtk_color_selection_get_has_opacity_control", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_palette(instance::GtkColorSelection)
        ret = ccall(("gtk_color_selection_get_has_palette", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_previous_alpha(instance::GtkColorSelection)
        ret = ccall(("gtk_color_selection_get_previous_alpha", libgtk3), UInt16, (Ptr{GObject},), instance)
        ret
    end
    function set_current_alpha(instance::GtkColorSelection, _alpha::Integer)
        ret = ccall(("gtk_color_selection_set_current_alpha", libgtk3), Nothing, (Ptr{GObject}, UInt16), instance, _alpha)
        nothing
    end
    function set_has_opacity_control(instance::GtkColorSelection, _has_opacity::Bool)
        ret = ccall(("gtk_color_selection_set_has_opacity_control", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_opacity)
        nothing
    end
    function set_has_palette(instance::GtkColorSelection, _has_palette::Bool)
        ret = ccall(("gtk_color_selection_set_has_palette", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_palette)
        nothing
    end
    function set_previous_alpha(instance::GtkColorSelection, _alpha::Integer)
        ret = ccall(("gtk_color_selection_set_previous_alpha", libgtk3), Nothing, (Ptr{GObject}, UInt16), instance, _alpha)
        nothing
    end
    function get_color_selection(instance::GtkColorSelectionDialog)
        ret = ccall(("gtk_color_selection_dialog_get_color_selection", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_active(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_active", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_active_id(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_active_id", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_button_sensitivity(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_button_sensitivity", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SensitivityType(ret)
        ret2
    end
    function get_column_span_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_column_span_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_entry_text_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_entry_text_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_has_entry(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_has_entry", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_id_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_id_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function get_popup_accessible(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_popup_accessible", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(AtkObject, ret, false)
        ret2
    end
    function get_popup_fixed_width(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_popup_fixed_width", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_span_column(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_row_span_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap_width(instance::GtkComboBox)
        ret = ccall(("gtk_combo_box_get_wrap_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_active(instance::GtkComboBox, _index_::Integer)
        ret = ccall(("gtk_combo_box_set_active", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _index_)
        nothing
    end
    function set_active_id(instance::GtkComboBox, _active_id::Maybe(Union{AbstractString, Symbol}))
        _active_id = if _active_id == nothing
                C_NULL
            else
                _active_id
            end
        ret = ccall(("gtk_combo_box_set_active_id", libgtk3), Cint, (Ptr{GObject}, Cstring), instance, _active_id)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_button_sensitivity(instance::GtkComboBox, _sensitivity)
        ret = ccall(("gtk_combo_box_set_button_sensitivity", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sensitivity)
        nothing
    end
    function set_column_span_column(instance::GtkComboBox, _column_span::Integer)
        ret = ccall(("gtk_combo_box_set_column_span_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column_span)
        nothing
    end
    function set_entry_text_column(instance::GtkComboBox, _text_column::Integer)
        ret = ccall(("gtk_combo_box_set_entry_text_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _text_column)
        nothing
    end
    function set_id_column(instance::GtkComboBox, _id_column::Integer)
        ret = ccall(("gtk_combo_box_set_id_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _id_column)
        nothing
    end
    function set_model(instance::GtkComboBox, _model::Maybe(GtkTreeModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_combo_box_set_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_popup_fixed_width(instance::GtkComboBox, _fixed::Bool)
        ret = ccall(("gtk_combo_box_set_popup_fixed_width", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _fixed)
        nothing
    end
    function set_row_span_column(instance::GtkComboBox, _row_span::Integer)
        ret = ccall(("gtk_combo_box_set_row_span_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _row_span)
        nothing
    end
    function set_wrap_width(instance::GtkComboBox, _width::Integer)
        ret = ccall(("gtk_combo_box_set_wrap_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function get_active_text(instance::GtkComboBoxText)
        ret = ccall(("gtk_combo_box_text_get_active_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_border_width(instance::GtkContainer)
        ret = ccall(("gtk_container_get_border_width", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_children(instance::GtkContainer)
        ret = ccall(("gtk_container_get_children", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_focus_child(instance::GtkContainer)
        ret = ccall(("gtk_container_get_focus_child", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_focus_hadjustment(instance::GtkContainer)
        ret = ccall(("gtk_container_get_focus_hadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkAdjustment, ret, false)
            end
        ret2
    end
    function get_focus_vadjustment(instance::GtkContainer)
        ret = ccall(("gtk_container_get_focus_vadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkAdjustment, ret, false)
            end
        ret2
    end
    function set_border_width(instance::GtkContainer, _border_width::Integer)
        ret = ccall(("gtk_container_set_border_width", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _border_width)
        nothing
    end
    function set_focus_child(instance::GtkContainer, _child::Maybe(GtkWidget))
        _child = if _child == nothing
                C_NULL
            else
                _child
            end
        ret = ccall(("gtk_container_set_focus_child", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_focus_hadjustment(instance::GtkContainer, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_container_set_focus_hadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_focus_vadjustment(instance::GtkContainer, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_container_set_focus_vadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function get_children(instance::GtkContainerCellAccessible)
        ret = ccall(("gtk_container_cell_accessible_get_children", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function get_content_area(instance::GtkDialog)
        ret = ccall(("gtk_dialog_get_content_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBox, ret, false)
        ret2
    end
    function get_header_bar(instance::GtkDialog)
        ret = ccall(("gtk_dialog_get_header_bar", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkHeaderBar, ret, false)
        ret2
    end
    function set_default_response(instance::GtkDialog, _response_id::Integer)
        ret = ccall(("gtk_dialog_set_default_response", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function get_activates_default(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_activates_default", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_alignment(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_alignment", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_attributes(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_attributes", libgtk3), Ref{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, false)
            end
        ret2
    end
    function get_buffer(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_buffer", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkEntryBuffer, ret, false)
        ret2
    end
    function get_completion(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_completion", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkEntryCompletion, ret, false)
        ret2
    end
    function get_current_icon_drag_source(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_current_icon_drag_source", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_cursor_hadjustment(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_cursor_hadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkAdjustment, ret, false)
            end
        ret2
    end
    function get_has_frame(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_has_frame", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_input_hints(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_input_hints", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_purpose(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_input_purpose", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_invisible_char(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_invisible_char", libgtk3), Nothing, (Ptr{GObject},), instance)
        nothing
    end
    function get_layout(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_layout", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoLayout, ret, false)
        ret2
    end
    function get_max_length(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_max_length", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_width_chars(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_max_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_overwrite_mode(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_overwrite_mode", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_placeholder_text(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_placeholder_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_progress_fraction(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_progress_fraction", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_progress_pulse_step(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_progress_pulse_step", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_tabs(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_tabs", libgtk3), Ref{PangoTabArray}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, false)
            end
        ret2
    end
    function get_text(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_text_length(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_text_length", libgtk3), UInt16, (Ptr{GObject},), instance)
        ret
    end
    function get_visibility(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_visibility", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_width_chars(instance::GtkEntry)
        ret = ccall(("gtk_entry_get_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_activates_default(instance::GtkEntry, _setting::Bool)
        ret = ccall(("gtk_entry_set_activates_default", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_alignment(instance::GtkEntry, _xalign::Real)
        ret = ccall(("gtk_entry_set_alignment", libgtk3), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_attributes(instance::GtkEntry, _attrs)
        ret = ccall(("gtk_entry_set_attributes", libgtk3), Nothing, (Ptr{GObject}, Ref{PangoAttrList}), instance, _attrs)
        nothing
    end
    function set_buffer(instance::GtkEntry, _buffer::GtkEntryBuffer)
        ret = ccall(("gtk_entry_set_buffer", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _buffer)
        nothing
    end
    function set_completion(instance::GtkEntry, _completion::Maybe(GtkEntryCompletion))
        _completion = if _completion == nothing
                C_NULL
            else
                _completion
            end
        ret = ccall(("gtk_entry_set_completion", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _completion)
        nothing
    end
    function set_cursor_hadjustment(instance::GtkEntry, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_entry_set_cursor_hadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_has_frame(instance::GtkEntry, _setting::Bool)
        ret = ccall(("gtk_entry_set_has_frame", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_input_hints(instance::GtkEntry, _hints::Integer)
        ret = ccall(("gtk_entry_set_input_hints", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::GtkEntry, _purpose)
        ret = ccall(("gtk_entry_set_input_purpose", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _purpose)
        nothing
    end
    function set_invisible_char(instance::GtkEntry, _ch)
        ret = ccall(("gtk_entry_set_invisible_char", libgtk3), Nothing, (Ptr{GObject}, Nothing), instance, _ch)
        nothing
    end
    function set_max_length(instance::GtkEntry, _max::Integer)
        ret = ccall(("gtk_entry_set_max_length", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _max)
        nothing
    end
    function set_max_width_chars(instance::GtkEntry, _n_chars::Integer)
        ret = ccall(("gtk_entry_set_max_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_overwrite_mode(instance::GtkEntry, _overwrite::Bool)
        ret = ccall(("gtk_entry_set_overwrite_mode", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _overwrite)
        nothing
    end
    function set_placeholder_text(instance::GtkEntry, _text::Maybe(Union{AbstractString, Symbol}))
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_entry_set_placeholder_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_progress_fraction(instance::GtkEntry, _fraction::Real)
        ret = ccall(("gtk_entry_set_progress_fraction", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_progress_pulse_step(instance::GtkEntry, _fraction::Real)
        ret = ccall(("gtk_entry_set_progress_pulse_step", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_tabs(instance::GtkEntry, _tabs)
        ret = ccall(("gtk_entry_set_tabs", libgtk3), Nothing, (Ptr{GObject}, Ref{PangoTabArray}), instance, _tabs)
        nothing
    end
    function set_text(instance::GtkEntry, _text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_entry_set_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_visibility(instance::GtkEntry, _visible::Bool)
        ret = ccall(("gtk_entry_set_visibility", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function set_width_chars(instance::GtkEntry, _n_chars::Integer)
        ret = ccall(("gtk_entry_set_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function get_bytes(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_bytes", libgtk3), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_length(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_length", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_length(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_max_length", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_text(instance::GtkEntryBuffer)
        ret = ccall(("gtk_entry_buffer_get_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_max_length(instance::GtkEntryBuffer, _max_length::Integer)
        ret = ccall(("gtk_entry_buffer_set_max_length", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _max_length)
        nothing
    end
    function get_completion_prefix(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_completion_prefix", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_entry(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_entry", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_inline_completion(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_inline_completion", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inline_selection(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_inline_selection", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_minimum_key_length(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_minimum_key_length", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, false)
                end
            end
        ret2
    end
    function get_popup_completion(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_completion", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_popup_set_width(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_set_width", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_popup_single_match(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_popup_single_match", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text_column(instance::GtkEntryCompletion)
        ret = ccall(("gtk_entry_completion_get_text_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_inline_completion(instance::GtkEntryCompletion, _inline_completion::Bool)
        ret = ccall(("gtk_entry_completion_set_inline_completion", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _inline_completion)
        nothing
    end
    function set_inline_selection(instance::GtkEntryCompletion, _inline_selection::Bool)
        ret = ccall(("gtk_entry_completion_set_inline_selection", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _inline_selection)
        nothing
    end
    function set_minimum_key_length(instance::GtkEntryCompletion, _length::Integer)
        ret = ccall(("gtk_entry_completion_set_minimum_key_length", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _length)
        nothing
    end
    function set_model(instance::GtkEntryCompletion, _model::Maybe(GtkTreeModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_entry_completion_set_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_popup_completion(instance::GtkEntryCompletion, _popup_completion::Bool)
        ret = ccall(("gtk_entry_completion_set_popup_completion", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _popup_completion)
        nothing
    end
    function set_popup_set_width(instance::GtkEntryCompletion, _popup_set_width::Bool)
        ret = ccall(("gtk_entry_completion_set_popup_set_width", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _popup_set_width)
        nothing
    end
    function set_popup_single_match(instance::GtkEntryCompletion, _popup_single_match::Bool)
        ret = ccall(("gtk_entry_completion_set_popup_single_match", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _popup_single_match)
        nothing
    end
    function set_text_column(instance::GtkEntryCompletion, _column::Integer)
        ret = ccall(("gtk_entry_completion_set_text_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function get_above_child(instance::GtkEventBox)
        ret = ccall(("gtk_event_box_get_above_child", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_window(instance::GtkEventBox)
        ret = ccall(("gtk_event_box_get_visible_window", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_above_child(instance::GtkEventBox, _above_child::Bool)
        ret = ccall(("gtk_event_box_set_above_child", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _above_child)
        nothing
    end
    function set_visible_window(instance::GtkEventBox, _visible_window::Bool)
        ret = ccall(("gtk_event_box_set_visible_window", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible_window)
        nothing
    end
    function get_propagation_phase(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_propagation_phase", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PropagationPhase(ret)
        ret2
    end
    function get_widget(instance::GtkEventController)
        ret = ccall(("gtk_event_controller_get_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_propagation_phase(instance::GtkEventController, _phase)
        ret = ccall(("gtk_event_controller_set_propagation_phase", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _phase)
        nothing
    end
    function get_group(instance::GtkEventControllerKey)
        ret = ccall(("gtk_event_controller_key_get_group", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_im_context(instance::GtkEventControllerKey)
        ret = ccall(("gtk_event_controller_key_get_im_context", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkIMContext, ret, false)
        ret2
    end
    function set_im_context(instance::GtkEventControllerKey, _im_context::GtkIMContext)
        ret = ccall(("gtk_event_controller_key_set_im_context", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _im_context)
        nothing
    end
    function get_flags(instance::GtkEventControllerScroll)
        ret = ccall(("gtk_event_controller_scroll_get_flags", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_flags(instance::GtkEventControllerScroll, _flags::Integer)
        ret = ccall(("gtk_event_controller_scroll_set_flags", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function get_expanded(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_expanded", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_label(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_fill(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_label_fill", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_label_widget(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_label_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_resize_toplevel(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_resize_toplevel", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_markup(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_use_markup", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::GtkExpander)
        ret = ccall(("gtk_expander_get_use_underline", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_expanded(instance::GtkExpander, _expanded::Bool)
        ret = ccall(("gtk_expander_set_expanded", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expanded)
        nothing
    end
    function set_label(instance::GtkExpander, _label::Maybe(Union{AbstractString, Symbol}))
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_expander_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_label_fill(instance::GtkExpander, _label_fill::Bool)
        ret = ccall(("gtk_expander_set_label_fill", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _label_fill)
        nothing
    end
    function set_label_widget(instance::GtkExpander, _label_widget::Maybe(GtkWidget))
        _label_widget = if _label_widget == nothing
                C_NULL
            else
                _label_widget
            end
        ret = ccall(("gtk_expander_set_label_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function set_resize_toplevel(instance::GtkExpander, _resize_toplevel::Bool)
        ret = ccall(("gtk_expander_set_resize_toplevel", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _resize_toplevel)
        nothing
    end
    function set_use_markup(instance::GtkExpander, _use_markup::Bool)
        ret = ccall(("gtk_expander_set_use_markup", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_markup)
        nothing
    end
    function set_use_underline(instance::GtkExpander, _use_underline::Bool)
        ret = ccall(("gtk_expander_set_use_underline", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_title(instance::GtkFileChooserButton)
        ret = ccall(("gtk_file_chooser_button_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_width_chars(instance::GtkFileChooserButton)
        ret = ccall(("gtk_file_chooser_button_get_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_title(instance::GtkFileChooserButton, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_button_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_width_chars(instance::GtkFileChooserButton, _n_chars::Integer)
        ret = ccall(("gtk_file_chooser_button_set_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function get_accept_label(instance::GtkFileChooserNative)
        ret = ccall(("gtk_file_chooser_native_get_accept_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_cancel_label(instance::GtkFileChooserNative)
        ret = ccall(("gtk_file_chooser_native_get_cancel_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_accept_label(instance::GtkFileChooserNative, _accept_label::Maybe(Union{AbstractString, Symbol}))
        _accept_label = if _accept_label == nothing
                C_NULL
            else
                _accept_label
            end
        ret = ccall(("gtk_file_chooser_native_set_accept_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _accept_label)
        nothing
    end
    function set_cancel_label(instance::GtkFileChooserNative, _cancel_label::Maybe(Union{AbstractString, Symbol}))
        _cancel_label = if _cancel_label == nothing
                C_NULL
            else
                _cancel_label
            end
        ret = ccall(("gtk_file_chooser_native_set_cancel_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _cancel_label)
        nothing
    end
    function get_name(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_get_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_needed(instance::GtkFileFilter)
        ret = ccall(("gtk_file_filter_get_needed", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_name(instance::GtkFileFilter, _name::Maybe(Union{AbstractString, Symbol}))
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_file_filter_set_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_activate_on_single_click(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_activate_on_single_click", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_column_spacing(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_column_spacing", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_homogeneous(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_children_per_line(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_max_children_per_line", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_children_per_line(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_min_children_per_line", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_spacing(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_row_spacing", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_children(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_selected_children", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_selection_mode(instance::GtkFlowBox)
        ret = ccall(("gtk_flow_box_get_selection_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function set_activate_on_single_click(instance::GtkFlowBox, _single::Bool)
        ret = ccall(("gtk_flow_box_set_activate_on_single_click", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_column_spacing(instance::GtkFlowBox, _spacing::Integer)
        ret = ccall(("gtk_flow_box_set_column_spacing", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_hadjustment(instance::GtkFlowBox, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_flow_box_set_hadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_homogeneous(instance::GtkFlowBox, _homogeneous::Bool)
        ret = ccall(("gtk_flow_box_set_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_max_children_per_line(instance::GtkFlowBox, _n_children::Integer)
        ret = ccall(("gtk_flow_box_set_max_children_per_line", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _n_children)
        nothing
    end
    function set_min_children_per_line(instance::GtkFlowBox, _n_children::Integer)
        ret = ccall(("gtk_flow_box_set_min_children_per_line", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _n_children)
        nothing
    end
    function set_row_spacing(instance::GtkFlowBox, _spacing::Integer)
        ret = ccall(("gtk_flow_box_set_row_spacing", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_selection_mode(instance::GtkFlowBox, _mode)
        ret = ccall(("gtk_flow_box_set_selection_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_vadjustment(instance::GtkFlowBox, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_flow_box_set_vadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function get_index(instance::GtkFlowBoxChild)
        ret = ccall(("gtk_flow_box_child_get_index", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_size(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_show_size", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_style(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_show_style", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_use_font(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_use_font", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_size(instance::GtkFontButton)
        ret = ccall(("gtk_font_button_get_use_size", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_show_size(instance::GtkFontButton, _show_size::Bool)
        ret = ccall(("gtk_font_button_set_show_size", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_size)
        nothing
    end
    function set_show_style(instance::GtkFontButton, _show_style::Bool)
        ret = ccall(("gtk_font_button_set_show_style", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_style)
        nothing
    end
    function set_title(instance::GtkFontButton, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_font_button_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_use_font(instance::GtkFontButton, _use_font::Bool)
        ret = ccall(("gtk_font_button_set_use_font", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_font)
        nothing
    end
    function set_use_size(instance::GtkFontButton, _use_size::Bool)
        ret = ccall(("gtk_font_button_set_use_size", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_size)
        nothing
    end
    function get_label(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_widget(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_label_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_shadow_type(instance::GtkFrame)
        ret = ccall(("gtk_frame_get_shadow_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ShadowType(ret)
        ret2
    end
    function set_label(instance::GtkFrame, _label::Maybe(Union{AbstractString, Symbol}))
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_frame_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_label_widget(instance::GtkFrame, _label_widget::Maybe(GtkWidget))
        _label_widget = if _label_widget == nothing
                C_NULL
            else
                _label_widget
            end
        ret = ccall(("gtk_frame_set_label_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function set_shadow_type(instance::GtkFrame, _type)
        ret = ccall(("gtk_frame_set_shadow_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function get_auto_render(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_auto_render", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_context(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_context", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkGLContext, ret, false)
        ret2
    end
    function get_error(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_error", libgtk3), Ptr{GError}, (Ptr{GObject},), instance)
        ret
    end
    function get_has_alpha(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_has_alpha", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_depth_buffer(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_has_depth_buffer", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_stencil_buffer(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_has_stencil_buffer", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_es(instance::GtkGLArea)
        ret = ccall(("gtk_gl_area_get_use_es", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_auto_render(instance::GtkGLArea, _auto_render::Bool)
        ret = ccall(("gtk_gl_area_set_auto_render", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _auto_render)
        nothing
    end
    function set_error(instance::GtkGLArea, _error)
        _error = if _error == nothing
                C_NULL
            else
                _error
            end
        ret = ccall(("gtk_gl_area_set_error", libgtk3), Nothing, (Ptr{GObject}, Ptr{GError}), instance, _error)
        nothing
    end
    function set_has_alpha(instance::GtkGLArea, _has_alpha::Bool)
        ret = ccall(("gtk_gl_area_set_has_alpha", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_alpha)
        nothing
    end
    function set_has_depth_buffer(instance::GtkGLArea, _has_depth_buffer::Bool)
        ret = ccall(("gtk_gl_area_set_has_depth_buffer", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_depth_buffer)
        nothing
    end
    function set_has_stencil_buffer(instance::GtkGLArea, _has_stencil_buffer::Bool)
        ret = ccall(("gtk_gl_area_set_has_stencil_buffer", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_stencil_buffer)
        nothing
    end
    function set_use_es(instance::GtkGLArea, _use_es::Bool)
        ret = ccall(("gtk_gl_area_set_use_es", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_es)
        nothing
    end
    function get_orientation(instance::GtkGesturePan)
        ret = ccall(("gtk_gesture_pan_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function set_orientation(instance::GtkGesturePan, _orientation)
        ret = ccall(("gtk_gesture_pan_set_orientation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function get_angle_delta(instance::GtkGestureRotate)
        ret = ccall(("gtk_gesture_rotate_get_angle_delta", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_device_tool(instance::GtkGestureStylus)
        ret = ccall(("gtk_gesture_stylus_get_device_tool", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkDeviceTool, ret, false)
            end
        ret2
    end
    function get_scale_delta(instance::GtkGestureZoom)
        ret = ccall(("gtk_gesture_zoom_get_scale_delta", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_baseline_row(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_baseline_row", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_column_homogeneous(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_column_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_column_spacing(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_column_spacing", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_row_homogeneous(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_row_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_spacing(instance::GtkGrid)
        ret = ccall(("gtk_grid_get_row_spacing", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_baseline_row(instance::GtkGrid, _row::Integer)
        ret = ccall(("gtk_grid_set_baseline_row", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _row)
        nothing
    end
    function set_column_homogeneous(instance::GtkGrid, _homogeneous::Bool)
        ret = ccall(("gtk_grid_set_column_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_column_spacing(instance::GtkGrid, _spacing::Integer)
        ret = ccall(("gtk_grid_set_column_spacing", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function set_row_homogeneous(instance::GtkGrid, _homogeneous::Bool)
        ret = ccall(("gtk_grid_set_row_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_row_spacing(instance::GtkGrid, _spacing::Integer)
        ret = ccall(("gtk_grid_set_row_spacing", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _spacing)
        nothing
    end
    function get_custom_title(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_custom_title", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_decoration_layout(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_decoration_layout", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_has_subtitle(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_has_subtitle", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_close_button(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_show_close_button", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_subtitle(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_subtitle", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_title(instance::GtkHeaderBar)
        ret = ccall(("gtk_header_bar_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_custom_title(instance::GtkHeaderBar, _title_widget::Maybe(GtkWidget))
        _title_widget = if _title_widget == nothing
                C_NULL
            else
                _title_widget
            end
        ret = ccall(("gtk_header_bar_set_custom_title", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _title_widget)
        nothing
    end
    function set_decoration_layout(instance::GtkHeaderBar, _layout::Maybe(Union{AbstractString, Symbol}))
        _layout = if _layout == nothing
                C_NULL
            else
                _layout
            end
        ret = ccall(("gtk_header_bar_set_decoration_layout", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _layout)
        nothing
    end
    function set_has_subtitle(instance::GtkHeaderBar, _setting::Bool)
        ret = ccall(("gtk_header_bar_set_has_subtitle", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_show_close_button(instance::GtkHeaderBar, _setting::Bool)
        ret = ccall(("gtk_header_bar_set_show_close_button", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_subtitle(instance::GtkHeaderBar, _subtitle::Maybe(Union{AbstractString, Symbol}))
        _subtitle = if _subtitle == nothing
                C_NULL
            else
                _subtitle
            end
        ret = ccall(("gtk_header_bar_set_subtitle", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _subtitle)
        nothing
    end
    function set_title(instance::GtkHeaderBar, _title::Maybe(Union{AbstractString, Symbol}))
        _title = if _title == nothing
                C_NULL
            else
                _title
            end
        ret = ccall(("gtk_header_bar_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function get_context_id(instance::GtkIMMulticontext)
        ret = ccall(("gtk_im_multicontext_get_context_id", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_context_id(instance::GtkIMMulticontext, _context_id::Union{AbstractString, Symbol})
        ret = ccall(("gtk_im_multicontext_set_context_id", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _context_id)
        nothing
    end
    function get_base_scale(instance::GtkIconInfo)
        ret = ccall(("gtk_icon_info_get_base_scale", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_base_size(instance::GtkIconInfo)
        ret = ccall(("gtk_icon_info_get_base_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_filename(instance::GtkIconInfo)
        ret = ccall(("gtk_icon_info_get_filename", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_example_icon_name(instance::GtkIconTheme)
        ret = ccall(("gtk_icon_theme_get_example_icon_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function set_custom_theme(instance::GtkIconTheme, _theme_name::Maybe(Union{AbstractString, Symbol}))
        _theme_name = if _theme_name == nothing
                C_NULL
            else
                _theme_name
            end
        ret = ccall(("gtk_icon_theme_set_custom_theme", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _theme_name)
        nothing
    end
    function set_screen(instance::GtkIconTheme, _screen::GdkScreen)
        ret = ccall(("gtk_icon_theme_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function get_activate_on_single_click(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_activate_on_single_click", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_column_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_column_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_columns(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_columns", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_item_orientation(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_item_padding(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_padding", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_item_width(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_item_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_margin", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_markup_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_markup_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, false)
                end
            end
        ret2
    end
    function get_pixbuf_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_pixbuf_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reorderable(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_reorderable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_row_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_row_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_selected_items(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_selected_items", libgtk3), Ptr{GLib._GList{GtkTreePath}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_selection_mode(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_selection_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function get_spacing(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_text_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_text_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tooltip_column(instance::GtkIconView)
        ret = ccall(("gtk_icon_view_get_tooltip_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_activate_on_single_click(instance::GtkIconView, _single::Bool)
        ret = ccall(("gtk_icon_view_set_activate_on_single_click", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_column_spacing(instance::GtkIconView, _column_spacing::Integer)
        ret = ccall(("gtk_icon_view_set_column_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column_spacing)
        nothing
    end
    function set_columns(instance::GtkIconView, _columns::Integer)
        ret = ccall(("gtk_icon_view_set_columns", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _columns)
        nothing
    end
    function set_item_orientation(instance::GtkIconView, _orientation)
        ret = ccall(("gtk_icon_view_set_item_orientation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_item_padding(instance::GtkIconView, _item_padding::Integer)
        ret = ccall(("gtk_icon_view_set_item_padding", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _item_padding)
        nothing
    end
    function set_item_width(instance::GtkIconView, _item_width::Integer)
        ret = ccall(("gtk_icon_view_set_item_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _item_width)
        nothing
    end
    function set_margin(instance::GtkIconView, _margin::Integer)
        ret = ccall(("gtk_icon_view_set_margin", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_markup_column(instance::GtkIconView, _column::Integer)
        ret = ccall(("gtk_icon_view_set_markup_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_model(instance::GtkIconView, _model::Maybe(GtkTreeModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_icon_view_set_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_pixbuf_column(instance::GtkIconView, _column::Integer)
        ret = ccall(("gtk_icon_view_set_pixbuf_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_reorderable(instance::GtkIconView, _reorderable::Bool)
        ret = ccall(("gtk_icon_view_set_reorderable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_row_spacing(instance::GtkIconView, _row_spacing::Integer)
        ret = ccall(("gtk_icon_view_set_row_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _row_spacing)
        nothing
    end
    function set_selection_mode(instance::GtkIconView, _mode)
        ret = ccall(("gtk_icon_view_set_selection_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_spacing(instance::GtkIconView, _spacing::Integer)
        ret = ccall(("gtk_icon_view_set_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function set_text_column(instance::GtkIconView, _column::Integer)
        ret = ccall(("gtk_icon_view_set_text_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_tooltip_column(instance::GtkIconView, _column::Integer)
        ret = ccall(("gtk_icon_view_set_tooltip_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function get_animation(instance::GtkImage)
        ret = ccall(("gtk_image_get_animation", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkPixbufAnimation, ret, false)
            end
        ret2
    end
    function get_pixbuf(instance::GtkImage)
        ret = ccall(("gtk_image_get_pixbuf", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkPixbuf, ret, false)
            end
        ret2
    end
    function get_pixel_size(instance::GtkImage)
        ret = ccall(("gtk_image_get_pixel_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_storage_type(instance::GtkImage)
        ret = ccall(("gtk_image_get_storage_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ImageType(ret)
        ret2
    end
    function set_pixel_size(instance::GtkImage, _pixel_size::Integer)
        ret = ccall(("gtk_image_set_pixel_size", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pixel_size)
        nothing
    end
    function get_action_area(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_action_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBox, ret, false)
        ret2
    end
    function get_content_area(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_content_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBox, ret, false)
        ret2
    end
    function get_message_type(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_message_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = MessageType(ret)
        ret2
    end
    function get_revealed(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_revealed", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_close_button(instance::GtkInfoBar)
        ret = ccall(("gtk_info_bar_get_show_close_button", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_response(instance::GtkInfoBar, _response_id::Integer)
        ret = ccall(("gtk_info_bar_set_default_response", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _response_id)
        nothing
    end
    function set_message_type(instance::GtkInfoBar, _message_type)
        ret = ccall(("gtk_info_bar_set_message_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _message_type)
        nothing
    end
    function set_revealed(instance::GtkInfoBar, _revealed::Bool)
        ret = ccall(("gtk_info_bar_set_revealed", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _revealed)
        nothing
    end
    function set_show_close_button(instance::GtkInfoBar, _setting::Bool)
        ret = ccall(("gtk_info_bar_set_show_close_button", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_screen(instance::GtkInvisible)
        ret = ccall(("gtk_invisible_get_screen", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkScreen, ret, false)
        ret2
    end
    function set_screen(instance::GtkInvisible, _screen::GdkScreen)
        ret = ccall(("gtk_invisible_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function get_angle(instance::GtkLabel)
        ret = ccall(("gtk_label_get_angle", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_attributes(instance::GtkLabel)
        ret = ccall(("gtk_label_get_attributes", libgtk3), Ref{PangoAttrList}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, false)
            end
        ret2
    end
    function get_current_uri(instance::GtkLabel)
        ret = ccall(("gtk_label_get_current_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_ellipsize(instance::GtkLabel)
        ret = ccall(("gtk_label_get_ellipsize", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_justify(instance::GtkLabel)
        ret = ccall(("gtk_label_get_justify", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Justification(ret)
        ret2
    end
    function get_label(instance::GtkLabel)
        ret = ccall(("gtk_label_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_layout(instance::GtkLabel)
        ret = ccall(("gtk_label_get_layout", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoLayout, ret, false)
        ret2
    end
    function get_line_wrap(instance::GtkLabel)
        ret = ccall(("gtk_label_get_line_wrap", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_line_wrap_mode(instance::GtkLabel)
        ret = ccall(("gtk_label_get_line_wrap_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = WrapMode(ret)
        ret2
    end
    function get_lines(instance::GtkLabel)
        ret = ccall(("gtk_label_get_lines", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_width_chars(instance::GtkLabel)
        ret = ccall(("gtk_label_get_max_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_mnemonic_keyval(instance::GtkLabel)
        ret = ccall(("gtk_label_get_mnemonic_keyval", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_mnemonic_widget(instance::GtkLabel)
        ret = ccall(("gtk_label_get_mnemonic_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_selectable(instance::GtkLabel)
        ret = ccall(("gtk_label_get_selectable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_single_line_mode(instance::GtkLabel)
        ret = ccall(("gtk_label_get_single_line_mode", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text(instance::GtkLabel)
        ret = ccall(("gtk_label_get_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_track_visited_links(instance::GtkLabel)
        ret = ccall(("gtk_label_get_track_visited_links", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_markup(instance::GtkLabel)
        ret = ccall(("gtk_label_get_use_markup", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_use_underline(instance::GtkLabel)
        ret = ccall(("gtk_label_get_use_underline", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_width_chars(instance::GtkLabel)
        ret = ccall(("gtk_label_get_width_chars", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_xalign(instance::GtkLabel)
        ret = ccall(("gtk_label_get_xalign", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_yalign(instance::GtkLabel)
        ret = ccall(("gtk_label_get_yalign", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function set_angle(instance::GtkLabel, _angle::Real)
        ret = ccall(("gtk_label_set_angle", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _angle)
        nothing
    end
    function set_attributes(instance::GtkLabel, _attrs)
        _attrs = if _attrs == nothing
                C_NULL
            else
                _attrs
            end
        ret = ccall(("gtk_label_set_attributes", libgtk3), Nothing, (Ptr{GObject}, Ref{PangoAttrList}), instance, _attrs)
        nothing
    end
    function set_ellipsize(instance::GtkLabel, _mode)
        ret = ccall(("gtk_label_set_ellipsize", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_justify(instance::GtkLabel, _jtype)
        ret = ccall(("gtk_label_set_justify", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _jtype)
        nothing
    end
    function set_label(instance::GtkLabel, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function set_line_wrap(instance::GtkLabel, _wrap::Bool)
        ret = ccall(("gtk_label_set_line_wrap", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _wrap)
        nothing
    end
    function set_line_wrap_mode(instance::GtkLabel, _wrap_mode)
        ret = ccall(("gtk_label_set_line_wrap_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _wrap_mode)
        nothing
    end
    function set_lines(instance::GtkLabel, _lines::Integer)
        ret = ccall(("gtk_label_set_lines", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _lines)
        nothing
    end
    function set_markup(instance::GtkLabel, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function set_markup_with_mnemonic(instance::GtkLabel, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_markup_with_mnemonic", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function set_max_width_chars(instance::GtkLabel, _n_chars::Integer)
        ret = ccall(("gtk_label_set_max_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_mnemonic_widget(instance::GtkLabel, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_label_set_mnemonic_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_pattern(instance::GtkLabel, _pattern::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_pattern", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _pattern)
        nothing
    end
    function set_selectable(instance::GtkLabel, _setting::Bool)
        ret = ccall(("gtk_label_set_selectable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_single_line_mode(instance::GtkLabel, _single_line_mode::Bool)
        ret = ccall(("gtk_label_set_single_line_mode", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _single_line_mode)
        nothing
    end
    function set_text(instance::GtkLabel, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function set_text_with_mnemonic(instance::GtkLabel, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_label_set_text_with_mnemonic", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function set_track_visited_links(instance::GtkLabel, _track_links::Bool)
        ret = ccall(("gtk_label_set_track_visited_links", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _track_links)
        nothing
    end
    function set_use_markup(instance::GtkLabel, _setting::Bool)
        ret = ccall(("gtk_label_set_use_markup", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_use_underline(instance::GtkLabel, _setting::Bool)
        ret = ccall(("gtk_label_set_use_underline", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_width_chars(instance::GtkLabel, _n_chars::Integer)
        ret = ccall(("gtk_label_set_width_chars", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_chars)
        nothing
    end
    function set_xalign(instance::GtkLabel, _xalign::Real)
        ret = ccall(("gtk_label_set_xalign", libgtk3), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_yalign(instance::GtkLabel, _yalign::Real)
        ret = ccall(("gtk_label_set_yalign", libgtk3), Nothing, (Ptr{GObject}, Float32), instance, _yalign)
        nothing
    end
    function get_bin_window(instance::GtkLayout)
        ret = ccall(("gtk_layout_get_bin_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkWindow, ret, false)
        ret2
    end
    function get_inverted(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_inverted", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_max_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_min_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_min_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_mode(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = LevelBarMode(ret)
        ret2
    end
    function get_value(instance::GtkLevelBar)
        ret = ccall(("gtk_level_bar_get_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_inverted(instance::GtkLevelBar, _inverted::Bool)
        ret = ccall(("gtk_level_bar_set_inverted", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_max_value(instance::GtkLevelBar, _value::Real)
        ret = ccall(("gtk_level_bar_set_max_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_min_value(instance::GtkLevelBar, _value::Real)
        ret = ccall(("gtk_level_bar_set_min_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_mode(instance::GtkLevelBar, _mode)
        ret = ccall(("gtk_level_bar_set_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_value(instance::GtkLevelBar, _value::Real)
        ret = ccall(("gtk_level_bar_set_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function get_uri(instance::GtkLinkButton)
        ret = ccall(("gtk_link_button_get_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_visited(instance::GtkLinkButton)
        ret = ccall(("gtk_link_button_get_visited", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_uri(instance::GtkLinkButton, _uri::Union{AbstractString, Symbol})
        ret = ccall(("gtk_link_button_set_uri", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _uri)
        nothing
    end
    function set_visited(instance::GtkLinkButton, _visited::Bool)
        ret = ccall(("gtk_link_button_set_visited", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visited)
        nothing
    end
    function get_activate_on_single_click(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_activate_on_single_click", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_adjustment(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_adjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_selected_row(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selected_row", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkListBoxRow, ret, false)
        ret2
    end
    function get_selected_rows(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selected_rows", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_selection_mode(instance::GtkListBox)
        ret = ccall(("gtk_list_box_get_selection_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function set_activate_on_single_click(instance::GtkListBox, _single::Bool)
        ret = ccall(("gtk_list_box_set_activate_on_single_click", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_adjustment(instance::GtkListBox, _adjustment::Maybe(GtkAdjustment))
        _adjustment = if _adjustment == nothing
                C_NULL
            else
                _adjustment
            end
        ret = ccall(("gtk_list_box_set_adjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_placeholder(instance::GtkListBox, _placeholder::Maybe(GtkWidget))
        _placeholder = if _placeholder == nothing
                C_NULL
            else
                _placeholder
            end
        ret = ccall(("gtk_list_box_set_placeholder", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _placeholder)
        nothing
    end
    function set_selection_mode(instance::GtkListBox, _mode)
        ret = ccall(("gtk_list_box_set_selection_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function get_activatable(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_activatable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_header(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_header", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_index(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_index", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_selectable(instance::GtkListBoxRow)
        ret = ccall(("gtk_list_box_row_get_selectable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_activatable(instance::GtkListBoxRow, _activatable::Bool)
        ret = ccall(("gtk_list_box_row_set_activatable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _activatable)
        nothing
    end
    function set_header(instance::GtkListBoxRow, _header::Maybe(GtkWidget))
        _header = if _header == nothing
                C_NULL
            else
                _header
            end
        ret = ccall(("gtk_list_box_row_set_header", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _header)
        nothing
    end
    function set_selectable(instance::GtkListBoxRow, _selectable::Bool)
        ret = ccall(("gtk_list_box_row_set_selectable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _selectable)
        nothing
    end
    function get_permission(instance::GtkLockButton)
        ret = ccall(("gtk_lock_button_get_permission", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GPermission, ret, false)
        ret2
    end
    function set_permission(instance::GtkLockButton, _permission::Maybe(GPermission))
        _permission = if _permission == nothing
                C_NULL
            else
                _permission
            end
        ret = ccall(("gtk_lock_button_set_permission", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _permission)
        nothing
    end
    function get_accel_group(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_accel_group", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAccelGroup, ret, false)
        ret2
    end
    function get_accel_path(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_accel_path", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_active(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_active", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_attach_widget(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_attach_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_monitor(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_monitor", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reserve_toggle_size(instance::GtkMenu)
        ret = ccall(("gtk_menu_get_reserve_toggle_size", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_accel_group(instance::GtkMenu, _accel_group::Maybe(GtkAccelGroup))
        _accel_group = if _accel_group == nothing
                C_NULL
            else
                _accel_group
            end
        ret = ccall(("gtk_menu_set_accel_group", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _accel_group)
        nothing
    end
    function set_accel_path(instance::GtkMenu, _accel_path::Maybe(Union{AbstractString, Symbol}))
        _accel_path = if _accel_path == nothing
                C_NULL
            else
                _accel_path
            end
        ret = ccall(("gtk_menu_set_accel_path", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _accel_path)
        nothing
    end
    function set_active(instance::GtkMenu, _index::Integer)
        ret = ccall(("gtk_menu_set_active", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _index)
        nothing
    end
    function set_monitor(instance::GtkMenu, _monitor_num::Integer)
        ret = ccall(("gtk_menu_set_monitor", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _monitor_num)
        nothing
    end
    function set_reserve_toggle_size(instance::GtkMenu, _reserve_toggle_size::Bool)
        ret = ccall(("gtk_menu_set_reserve_toggle_size", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reserve_toggle_size)
        nothing
    end
    function set_screen(instance::GtkMenu, _screen::Maybe(GdkScreen))
        _screen = if _screen == nothing
                C_NULL
            else
                _screen
            end
        ret = ccall(("gtk_menu_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function get_child_pack_direction(instance::GtkMenuBar)
        ret = ccall(("gtk_menu_bar_get_child_pack_direction", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PackDirection(ret)
        ret2
    end
    function get_pack_direction(instance::GtkMenuBar)
        ret = ccall(("gtk_menu_bar_get_pack_direction", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PackDirection(ret)
        ret2
    end
    function set_child_pack_direction(instance::GtkMenuBar, _child_pack_dir)
        ret = ccall(("gtk_menu_bar_set_child_pack_direction", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _child_pack_dir)
        nothing
    end
    function set_pack_direction(instance::GtkMenuBar, _pack_dir)
        ret = ccall(("gtk_menu_bar_set_pack_direction", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pack_dir)
        nothing
    end
    function get_align_widget(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_align_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_direction(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_direction", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ArrowType(ret)
        ret2
    end
    function get_menu_model(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_menu_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GMenuModel, ret, false)
            end
        ret2
    end
    function get_popover(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_popover", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkPopover, ret, false)
            end
        ret2
    end
    function get_popup(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_popup", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkMenu, ret, false)
            end
        ret2
    end
    function get_use_popover(instance::GtkMenuButton)
        ret = ccall(("gtk_menu_button_get_use_popover", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_align_widget(instance::GtkMenuButton, _align_widget::Maybe(GtkWidget))
        _align_widget = if _align_widget == nothing
                C_NULL
            else
                _align_widget
            end
        ret = ccall(("gtk_menu_button_set_align_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _align_widget)
        nothing
    end
    function set_direction(instance::GtkMenuButton, _direction)
        ret = ccall(("gtk_menu_button_set_direction", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _direction)
        nothing
    end
    function set_menu_model(instance::GtkMenuButton, _menu_model::Maybe(GMenuModel))
        _menu_model = if _menu_model == nothing
                C_NULL
            else
                _menu_model
            end
        ret = ccall(("gtk_menu_button_set_menu_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu_model)
        nothing
    end
    function set_popover(instance::GtkMenuButton, _popover::Maybe(GtkWidget))
        _popover = if _popover == nothing
                C_NULL
            else
                _popover
            end
        ret = ccall(("gtk_menu_button_set_popover", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _popover)
        nothing
    end
    function set_popup(instance::GtkMenuButton, _menu::Maybe(GtkWidget))
        _menu = if _menu == nothing
                C_NULL
            else
                _menu
            end
        ret = ccall(("gtk_menu_button_set_popup", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu)
        nothing
    end
    function set_use_popover(instance::GtkMenuButton, _use_popover::Bool)
        ret = ccall(("gtk_menu_button_set_use_popover", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_popover)
        nothing
    end
    function get_accel_path(instance::GtkMenuItem)
        ret = ccall(("gtk_menu_item_get_accel_path", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label(instance::GtkMenuItem)
        ret = ccall(("gtk_menu_item_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_reserve_indicator(instance::GtkMenuItem)
        ret = ccall(("gtk_menu_item_get_reserve_indicator", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_submenu(instance::GtkMenuItem)
        ret = ccall(("gtk_menu_item_get_submenu", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_use_underline(instance::GtkMenuItem)
        ret = ccall(("gtk_menu_item_get_use_underline", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_accel_path(instance::GtkMenuItem, _accel_path::Maybe(Union{AbstractString, Symbol}))
        _accel_path = if _accel_path == nothing
                C_NULL
            else
                _accel_path
            end
        ret = ccall(("gtk_menu_item_set_accel_path", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _accel_path)
        nothing
    end
    function set_label(instance::GtkMenuItem, _label::Union{AbstractString, Symbol})
        ret = ccall(("gtk_menu_item_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_reserve_indicator(instance::GtkMenuItem, _reserve::Bool)
        ret = ccall(("gtk_menu_item_set_reserve_indicator", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reserve)
        nothing
    end
    function set_submenu(instance::GtkMenuItem, _submenu::Maybe(GtkMenu))
        _submenu = if _submenu == nothing
                C_NULL
            else
                _submenu
            end
        ret = ccall(("gtk_menu_item_set_submenu", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _submenu)
        nothing
    end
    function set_use_underline(instance::GtkMenuItem, _setting::Bool)
        ret = ccall(("gtk_menu_item_set_use_underline", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_parent_shell(instance::GtkMenuShell)
        ret = ccall(("gtk_menu_shell_get_parent_shell", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_selected_item(instance::GtkMenuShell)
        ret = ccall(("gtk_menu_shell_get_selected_item", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_take_focus(instance::GtkMenuShell)
        ret = ccall(("gtk_menu_shell_get_take_focus", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_take_focus(instance::GtkMenuShell, _take_focus::Bool)
        ret = ccall(("gtk_menu_shell_set_take_focus", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _take_focus)
        nothing
    end
    function get_menu(instance::GtkMenuToolButton)
        ret = ccall(("gtk_menu_tool_button_get_menu", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_arrow_tooltip_markup(instance::GtkMenuToolButton, _markup::Union{AbstractString, Symbol})
        ret = ccall(("gtk_menu_tool_button_set_arrow_tooltip_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _markup)
        nothing
    end
    function set_arrow_tooltip_text(instance::GtkMenuToolButton, _text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_menu_tool_button_set_arrow_tooltip_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_menu(instance::GtkMenuToolButton, _menu::GtkWidget)
        ret = ccall(("gtk_menu_tool_button_set_menu", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _menu)
        nothing
    end
    function get_message_area(instance::GtkMessageDialog)
        ret = ccall(("gtk_message_dialog_get_message_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_markup(instance::GtkMessageDialog, _str::Union{AbstractString, Symbol})
        ret = ccall(("gtk_message_dialog_set_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _str)
        nothing
    end
    function get_parent(instance::GtkMountOperation)
        ret = ccall(("gtk_mount_operation_get_parent", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWindow, ret, false)
        ret2
    end
    function get_screen(instance::GtkMountOperation)
        ret = ccall(("gtk_mount_operation_get_screen", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkScreen, ret, false)
        ret2
    end
    function set_parent(instance::GtkMountOperation, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_mount_operation_set_parent", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function set_screen(instance::GtkMountOperation, _screen::GdkScreen)
        ret = ccall(("gtk_mount_operation_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function get_modal(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_modal", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_transient_for(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_transient_for", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkNativeDialog)
        ret = ccall(("gtk_native_dialog_get_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_modal(instance::GtkNativeDialog, _modal::Bool)
        ret = ccall(("gtk_native_dialog_set_modal", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_title(instance::GtkNativeDialog, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_native_dialog_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_transient_for(instance::GtkNativeDialog, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_native_dialog_set_transient_for", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function get_current_page(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_current_page", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_group_name(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_group_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_n_pages(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_n_pages", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_scrollable(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_scrollable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_border(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_show_border", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_tabs(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_show_tabs", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tab_pos(instance::GtkNotebook)
        ret = ccall(("gtk_notebook_get_tab_pos", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function set_current_page(instance::GtkNotebook, _page_num::Integer)
        ret = ccall(("gtk_notebook_set_current_page", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _page_num)
        nothing
    end
    function set_group_name(instance::GtkNotebook, _group_name::Maybe(Union{AbstractString, Symbol}))
        _group_name = if _group_name == nothing
                C_NULL
            else
                _group_name
            end
        ret = ccall(("gtk_notebook_set_group_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _group_name)
        nothing
    end
    function set_scrollable(instance::GtkNotebook, _scrollable::Bool)
        ret = ccall(("gtk_notebook_set_scrollable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _scrollable)
        nothing
    end
    function set_show_border(instance::GtkNotebook, _show_border::Bool)
        ret = ccall(("gtk_notebook_set_show_border", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_border)
        nothing
    end
    function set_show_tabs(instance::GtkNotebook, _show_tabs::Bool)
        ret = ccall(("gtk_notebook_set_show_tabs", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_tabs)
        nothing
    end
    function set_tab_pos(instance::GtkNotebook, _pos)
        ret = ccall(("gtk_notebook_set_tab_pos", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pos)
        nothing
    end
    function get_pixbuf(instance::GtkOffscreenWindow)
        ret = ccall(("gtk_offscreen_window_get_pixbuf", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkPixbuf, ret, true)
            end
        ret2
    end
    function get_orientation(instance::GtkPageSetup)
        ret = ccall(("gtk_page_setup_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PageOrientation(ret)
        ret2
    end
    function set_orientation(instance::GtkPageSetup, _orientation)
        ret = ccall(("gtk_page_setup_set_orientation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_paper_size(instance::GtkPageSetup, _size)
        ret = ccall(("gtk_page_setup_set_paper_size", libgtk3), Nothing, (Ptr{GObject}, Ref{GtkPaperSize}), instance, _size)
        nothing
    end
    function set_paper_size_and_default_margins(instance::GtkPageSetup, _size)
        ret = ccall(("gtk_page_setup_set_paper_size_and_default_margins", libgtk3), Nothing, (Ptr{GObject}, Ref{GtkPaperSize}), instance, _size)
        nothing
    end
    function get_child1(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_child1", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_child2(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_child2", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_handle_window(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_handle_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkWindow, ret, false)
        ret2
    end
    function get_position(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_position", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wide_handle(instance::GtkPaned)
        ret = ccall(("gtk_paned_get_wide_handle", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_position(instance::GtkPaned, _position::Integer)
        ret = ccall(("gtk_paned_set_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_wide_handle(instance::GtkPaned, _wide::Bool)
        ret = ccall(("gtk_paned_set_wide_handle", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _wide)
        nothing
    end
    function get_local_only(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_local_only", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_location(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_location", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, true)
                end
            end
        ret2
    end
    function get_open_flags(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_open_flags", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_desktop(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_desktop", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_enter_location(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_enter_location", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_other_locations(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_other_locations", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_recent(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_recent", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_starred_location(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_starred_location", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_trash(instance::GtkPlacesSidebar)
        ret = ccall(("gtk_places_sidebar_get_show_trash", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_local_only(instance::GtkPlacesSidebar, _local_only::Bool)
        ret = ccall(("gtk_places_sidebar_set_local_only", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _local_only)
        nothing
    end
    function set_location(instance::GtkPlacesSidebar, _location::Maybe(GFile))
        _location = if _location == nothing
                C_NULL
            else
                _location
            end
        ret = ccall(("gtk_places_sidebar_set_location", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _location)
        nothing
    end
    function set_open_flags(instance::GtkPlacesSidebar, _flags::Integer)
        ret = ccall(("gtk_places_sidebar_set_open_flags", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function set_show_desktop(instance::GtkPlacesSidebar, _show_desktop::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_desktop", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_desktop)
        nothing
    end
    function set_show_enter_location(instance::GtkPlacesSidebar, _show_enter_location::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_enter_location", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_enter_location)
        nothing
    end
    function set_show_other_locations(instance::GtkPlacesSidebar, _show_other_locations::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_other_locations", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_other_locations)
        nothing
    end
    function set_show_recent(instance::GtkPlacesSidebar, _show_recent::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_recent", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_recent)
        nothing
    end
    function set_show_starred_location(instance::GtkPlacesSidebar, _show_starred_location::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_starred_location", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_starred_location)
        nothing
    end
    function set_show_trash(instance::GtkPlacesSidebar, _show_trash::Bool)
        ret = ccall(("gtk_places_sidebar_set_show_trash", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_trash)
        nothing
    end
    function get_embedded(instance::GtkPlug)
        ret = ccall(("gtk_plug_get_embedded", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_id(instance::GtkPlug)
        ret = ccall(("gtk_plug_get_id", libgtk3), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_socket_window(instance::GtkPlug)
        ret = ccall(("gtk_plug_get_socket_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkWindow, ret, false)
            end
        ret2
    end
    function get_id(instance::GtkPlugAccessible)
        ret = ccall(("gtk_plug_accessible_get_id", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_constrain_to(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_constrain_to", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PopoverConstraint(ret)
        ret2
    end
    function get_default_widget(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_default_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_modal(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_modal", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_position(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_position", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function get_relative_to(instance::GtkPopover)
        ret = ccall(("gtk_popover_get_relative_to", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_constrain_to(instance::GtkPopover, _constraint)
        ret = ccall(("gtk_popover_set_constrain_to", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _constraint)
        nothing
    end
    function set_default_widget(instance::GtkPopover, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_popover_set_default_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function set_modal(instance::GtkPopover, _modal::Bool)
        ret = ccall(("gtk_popover_set_modal", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_position(instance::GtkPopover, _position)
        ret = ccall(("gtk_popover_set_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_relative_to(instance::GtkPopover, _relative_to::Maybe(GtkWidget))
        _relative_to = if _relative_to == nothing
                C_NULL
            else
                _relative_to
            end
        ret = ccall(("gtk_popover_set_relative_to", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _relative_to)
        nothing
    end
    function get_dpi_x(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_dpi_x", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_dpi_y(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_dpi_y", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_height(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_height", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_page_setup(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_page_setup", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_pango_fontmap(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_pango_fontmap", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoFontMap, ret, false)
        ret2
    end
    function get_width(instance::GtkPrintContext)
        ret = ccall(("gtk_print_context_get_width", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_default_page_setup(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_default_page_setup", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPageSetup, ret, false)
        ret2
    end
    function get_embed_page_setup(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_embed_page_setup", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_error(instance::GtkPrintOperation)
        err = err_buf()
        ret = ccall(("gtk_print_operation_get_error", libgtk3), Nothing, (Ptr{GObject}, Ptr{Ptr{GError}}), instance, err)
        check_err(err)
        nothing
    end
    function get_has_selection(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_has_selection", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_n_pages_to_print(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_n_pages_to_print", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_print_settings(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_print_settings", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkPrintSettings, ret, false)
        ret2
    end
    function get_status(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_status", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PrintStatus(ret)
        ret2
    end
    function get_status_string(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_status_string", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_support_selection(instance::GtkPrintOperation)
        ret = ccall(("gtk_print_operation_get_support_selection", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_allow_async(instance::GtkPrintOperation, _allow_async::Bool)
        ret = ccall(("gtk_print_operation_set_allow_async", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _allow_async)
        nothing
    end
    function set_current_page(instance::GtkPrintOperation, _current_page::Integer)
        ret = ccall(("gtk_print_operation_set_current_page", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _current_page)
        nothing
    end
    function set_custom_tab_label(instance::GtkPrintOperation, _label::Maybe(Union{AbstractString, Symbol}))
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_print_operation_set_custom_tab_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_default_page_setup(instance::GtkPrintOperation, _default_page_setup::Maybe(GtkPageSetup))
        _default_page_setup = if _default_page_setup == nothing
                C_NULL
            else
                _default_page_setup
            end
        ret = ccall(("gtk_print_operation_set_default_page_setup", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _default_page_setup)
        nothing
    end
    function set_embed_page_setup(instance::GtkPrintOperation, _embed::Bool)
        ret = ccall(("gtk_print_operation_set_embed_page_setup", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _embed)
        nothing
    end
    function set_export_filename(instance::GtkPrintOperation, _filename::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_operation_set_export_filename", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _filename)
        nothing
    end
    function set_has_selection(instance::GtkPrintOperation, _has_selection::Bool)
        ret = ccall(("gtk_print_operation_set_has_selection", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_selection)
        nothing
    end
    function set_job_name(instance::GtkPrintOperation, _job_name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_operation_set_job_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _job_name)
        nothing
    end
    function set_n_pages(instance::GtkPrintOperation, _n_pages::Integer)
        ret = ccall(("gtk_print_operation_set_n_pages", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _n_pages)
        nothing
    end
    function set_print_settings(instance::GtkPrintOperation, _print_settings::Maybe(GtkPrintSettings))
        _print_settings = if _print_settings == nothing
                C_NULL
            else
                _print_settings
            end
        ret = ccall(("gtk_print_operation_set_print_settings", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _print_settings)
        nothing
    end
    function set_show_progress(instance::GtkPrintOperation, _show_progress::Bool)
        ret = ccall(("gtk_print_operation_set_show_progress", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_progress)
        nothing
    end
    function set_support_selection(instance::GtkPrintOperation, _support_selection::Bool)
        ret = ccall(("gtk_print_operation_set_support_selection", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _support_selection)
        nothing
    end
    function set_track_print_status(instance::GtkPrintOperation, _track_status::Bool)
        ret = ccall(("gtk_print_operation_set_track_print_status", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _track_status)
        nothing
    end
    function set_unit(instance::GtkPrintOperation, _unit)
        ret = ccall(("gtk_print_operation_set_unit", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _unit)
        nothing
    end
    function set_use_full_page(instance::GtkPrintOperation, _full_page::Bool)
        ret = ccall(("gtk_print_operation_set_use_full_page", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _full_page)
        nothing
    end
    function get_collate(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_collate", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_default_source(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_default_source", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_dither(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_dither", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_duplex(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_duplex", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PrintDuplex(ret)
        ret2
    end
    function get_finishings(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_finishings", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_media_type(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_media_type", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_n_copies(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_n_copies", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_number_up(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_number_up", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_number_up_layout(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_number_up_layout", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = NumberUpLayout(ret)
        ret2
    end
    function get_orientation(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PageOrientation(ret)
        ret2
    end
    function get_output_bin(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_output_bin", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_page_set(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_page_set", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PageSet(ret)
        ret2
    end
    function get_print_pages(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_print_pages", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PrintPages(ret)
        ret2
    end
    function get_printer(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_printer", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_printer_lpi(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_printer_lpi", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_quality(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_quality", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PrintQuality(ret)
        ret2
    end
    function get_resolution(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_resolution", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_resolution_x(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_resolution_x", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_resolution_y(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_resolution_y", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reverse(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_reverse", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_scale(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_scale", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_use_color(instance::GtkPrintSettings)
        ret = ccall(("gtk_print_settings_get_use_color", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_collate(instance::GtkPrintSettings, _collate::Bool)
        ret = ccall(("gtk_print_settings_set_collate", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _collate)
        nothing
    end
    function set_default_source(instance::GtkPrintSettings, _default_source::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_default_source", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _default_source)
        nothing
    end
    function set_dither(instance::GtkPrintSettings, _dither::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_dither", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _dither)
        nothing
    end
    function set_duplex(instance::GtkPrintSettings, _duplex)
        ret = ccall(("gtk_print_settings_set_duplex", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _duplex)
        nothing
    end
    function set_finishings(instance::GtkPrintSettings, _finishings::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_finishings", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _finishings)
        nothing
    end
    function set_media_type(instance::GtkPrintSettings, _media_type::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_media_type", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _media_type)
        nothing
    end
    function set_n_copies(instance::GtkPrintSettings, _num_copies::Integer)
        ret = ccall(("gtk_print_settings_set_n_copies", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _num_copies)
        nothing
    end
    function set_number_up(instance::GtkPrintSettings, _number_up::Integer)
        ret = ccall(("gtk_print_settings_set_number_up", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _number_up)
        nothing
    end
    function set_number_up_layout(instance::GtkPrintSettings, _number_up_layout)
        ret = ccall(("gtk_print_settings_set_number_up_layout", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _number_up_layout)
        nothing
    end
    function set_orientation(instance::GtkPrintSettings, _orientation)
        ret = ccall(("gtk_print_settings_set_orientation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function set_output_bin(instance::GtkPrintSettings, _output_bin::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_output_bin", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _output_bin)
        nothing
    end
    function set_page_set(instance::GtkPrintSettings, _page_set)
        ret = ccall(("gtk_print_settings_set_page_set", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _page_set)
        nothing
    end
    function set_paper_size(instance::GtkPrintSettings, _paper_size)
        ret = ccall(("gtk_print_settings_set_paper_size", libgtk3), Nothing, (Ptr{GObject}, Ref{GtkPaperSize}), instance, _paper_size)
        nothing
    end
    function set_print_pages(instance::GtkPrintSettings, _pages)
        ret = ccall(("gtk_print_settings_set_print_pages", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pages)
        nothing
    end
    function set_printer(instance::GtkPrintSettings, _printer::Union{AbstractString, Symbol})
        ret = ccall(("gtk_print_settings_set_printer", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _printer)
        nothing
    end
    function set_printer_lpi(instance::GtkPrintSettings, _lpi::Real)
        ret = ccall(("gtk_print_settings_set_printer_lpi", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _lpi)
        nothing
    end
    function set_quality(instance::GtkPrintSettings, _quality)
        ret = ccall(("gtk_print_settings_set_quality", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _quality)
        nothing
    end
    function set_resolution(instance::GtkPrintSettings, _resolution::Integer)
        ret = ccall(("gtk_print_settings_set_resolution", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _resolution)
        nothing
    end
    function set_reverse(instance::GtkPrintSettings, _reverse::Bool)
        ret = ccall(("gtk_print_settings_set_reverse", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reverse)
        nothing
    end
    function set_scale(instance::GtkPrintSettings, _scale::Real)
        ret = ccall(("gtk_print_settings_set_scale", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _scale)
        nothing
    end
    function set_use_color(instance::GtkPrintSettings, _use_color::Bool)
        ret = ccall(("gtk_print_settings_set_use_color", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_color)
        nothing
    end
    function get_ellipsize(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_ellipsize", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_fraction(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_fraction", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_inverted(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_inverted", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_pulse_step(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_pulse_step", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_show_text(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_show_text", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_text(instance::GtkProgressBar)
        ret = ccall(("gtk_progress_bar_get_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_ellipsize(instance::GtkProgressBar, _mode)
        ret = ccall(("gtk_progress_bar_set_ellipsize", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function set_fraction(instance::GtkProgressBar, _fraction::Real)
        ret = ccall(("gtk_progress_bar_set_fraction", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_inverted(instance::GtkProgressBar, _inverted::Bool)
        ret = ccall(("gtk_progress_bar_set_inverted", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _inverted)
        nothing
    end
    function set_pulse_step(instance::GtkProgressBar, _fraction::Real)
        ret = ccall(("gtk_progress_bar_set_pulse_step", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _fraction)
        nothing
    end
    function set_show_text(instance::GtkProgressBar, _show_text::Bool)
        ret = ccall(("gtk_progress_bar_set_show_text", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_text)
        nothing
    end
    function set_text(instance::GtkProgressBar, _text::Maybe(Union{AbstractString, Symbol}))
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_progress_bar_set_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function get_group(instance::GtkRadioButton)
        ret = ccall(("gtk_radio_button_get_group", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function set_group(instance::GtkRadioButton, _group::Maybe(GLib.LList{GLib._GSList{Ptr{GObject}}}))
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_radio_button_set_group", libgtk3), Nothing, (Ptr{GObject}, Ptr{GLib._GSList{Ptr{GObject}}}), instance, _group)
        nothing
    end
    function get_group(instance::GtkRadioMenuItem)
        ret = ccall(("gtk_radio_menu_item_get_group", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function set_group(instance::GtkRadioMenuItem, _group::Maybe(GLib.LList{GLib._GSList{Ptr{GObject}}}))
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_radio_menu_item_set_group", libgtk3), Nothing, (Ptr{GObject}, Ptr{GLib._GSList{Ptr{GObject}}}), instance, _group)
        nothing
    end
    function get_group(instance::GtkRadioToolButton)
        ret = ccall(("gtk_radio_tool_button_get_group", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function set_group(instance::GtkRadioToolButton, _group::Maybe(GLib.LList{GLib._GSList{Ptr{GObject}}}))
        _group = if _group == nothing
                C_NULL
            else
                _group
            end
        ret = ccall(("gtk_radio_tool_button_set_group", libgtk3), Nothing, (Ptr{GObject}, Ptr{GLib._GSList{Ptr{GObject}}}), instance, _group)
        nothing
    end
    function get_adjustment(instance::GtkRange)
        ret = ccall(("gtk_range_get_adjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_fill_level", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_flippable(instance::GtkRange)
        ret = ccall(("gtk_range_get_flippable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inverted(instance::GtkRange)
        ret = ccall(("gtk_range_get_inverted", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_lower_stepper_sensitivity(instance::GtkRange)
        ret = ccall(("gtk_range_get_lower_stepper_sensitivity", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SensitivityType(ret)
        ret2
    end
    function get_restrict_to_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_restrict_to_fill_level", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_round_digits(instance::GtkRange)
        ret = ccall(("gtk_range_get_round_digits", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_show_fill_level(instance::GtkRange)
        ret = ccall(("gtk_range_get_show_fill_level", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_slider_size_fixed(instance::GtkRange)
        ret = ccall(("gtk_range_get_slider_size_fixed", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_upper_stepper_sensitivity(instance::GtkRange)
        ret = ccall(("gtk_range_get_upper_stepper_sensitivity", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SensitivityType(ret)
        ret2
    end
    function get_value(instance::GtkRange)
        ret = ccall(("gtk_range_get_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_adjustment(instance::GtkRange, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_range_set_adjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_fill_level(instance::GtkRange, _fill_level::Real)
        ret = ccall(("gtk_range_set_fill_level", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _fill_level)
        nothing
    end
    function set_flippable(instance::GtkRange, _flippable::Bool)
        ret = ccall(("gtk_range_set_flippable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _flippable)
        nothing
    end
    function set_inverted(instance::GtkRange, _setting::Bool)
        ret = ccall(("gtk_range_set_inverted", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_lower_stepper_sensitivity(instance::GtkRange, _sensitivity)
        ret = ccall(("gtk_range_set_lower_stepper_sensitivity", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sensitivity)
        nothing
    end
    function set_restrict_to_fill_level(instance::GtkRange, _restrict_to_fill_level::Bool)
        ret = ccall(("gtk_range_set_restrict_to_fill_level", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _restrict_to_fill_level)
        nothing
    end
    function set_round_digits(instance::GtkRange, _round_digits::Integer)
        ret = ccall(("gtk_range_set_round_digits", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _round_digits)
        nothing
    end
    function set_show_fill_level(instance::GtkRange, _show_fill_level::Bool)
        ret = ccall(("gtk_range_set_show_fill_level", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_fill_level)
        nothing
    end
    function set_slider_size_fixed(instance::GtkRange, _size_fixed::Bool)
        ret = ccall(("gtk_range_set_slider_size_fixed", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _size_fixed)
        nothing
    end
    function set_upper_stepper_sensitivity(instance::GtkRange, _sensitivity)
        ret = ccall(("gtk_range_set_upper_stepper_sensitivity", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sensitivity)
        nothing
    end
    function set_value(instance::GtkRange, _value::Real)
        ret = ccall(("gtk_range_set_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function get_show_numbers(instance::GtkRecentChooserMenu)
        ret = ccall(("gtk_recent_chooser_menu_get_show_numbers", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_show_numbers(instance::GtkRecentChooserMenu, _show_numbers::Bool)
        ret = ccall(("gtk_recent_chooser_menu_set_show_numbers", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_numbers)
        nothing
    end
    function get_name(instance::GtkRecentFilter)
        ret = ccall(("gtk_recent_filter_get_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_needed(instance::GtkRecentFilter)
        ret = ccall(("gtk_recent_filter_get_needed", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_name(instance::GtkRecentFilter, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_recent_filter_set_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_items(instance::GtkRecentManager)
        ret = ccall(("gtk_recent_manager_get_items", libgtk3), Ptr{GLib._GList{GtkRecentInfo}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_child_revealed(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_child_revealed", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_reveal_child(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_reveal_child", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_duration(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_transition_duration", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_transition_type(instance::GtkRevealer)
        ret = ccall(("gtk_revealer_get_transition_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = RevealerTransitionType(ret)
        ret2
    end
    function set_reveal_child(instance::GtkRevealer, _reveal_child::Bool)
        ret = ccall(("gtk_revealer_set_reveal_child", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reveal_child)
        nothing
    end
    function set_transition_duration(instance::GtkRevealer, _duration::Integer)
        ret = ccall(("gtk_revealer_set_transition_duration", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::GtkRevealer, _transition)
        ret = ccall(("gtk_revealer_set_transition_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _transition)
        nothing
    end
    function get_digits(instance::GtkScale)
        ret = ccall(("gtk_scale_get_digits", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_draw_value(instance::GtkScale)
        ret = ccall(("gtk_scale_get_draw_value", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_origin(instance::GtkScale)
        ret = ccall(("gtk_scale_get_has_origin", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_layout(instance::GtkScale)
        ret = ccall(("gtk_scale_get_layout", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoLayout, ret, false)
            end
        ret2
    end
    function get_value_pos(instance::GtkScale)
        ret = ccall(("gtk_scale_get_value_pos", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = PositionType(ret)
        ret2
    end
    function set_digits(instance::GtkScale, _digits::Integer)
        ret = ccall(("gtk_scale_set_digits", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _digits)
        nothing
    end
    function set_draw_value(instance::GtkScale, _draw_value::Bool)
        ret = ccall(("gtk_scale_set_draw_value", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _draw_value)
        nothing
    end
    function set_has_origin(instance::GtkScale, _has_origin::Bool)
        ret = ccall(("gtk_scale_set_has_origin", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_origin)
        nothing
    end
    function set_value_pos(instance::GtkScale, _pos)
        ret = ccall(("gtk_scale_set_value_pos", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pos)
        nothing
    end
    function get_adjustment(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_adjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_minus_button(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_minus_button", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkButton, ret, false)
        ret2
    end
    function get_plus_button(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_plus_button", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkButton, ret, false)
        ret2
    end
    function get_popup(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_popup", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_value(instance::GtkScaleButton)
        ret = ccall(("gtk_scale_button_get_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function set_adjustment(instance::GtkScaleButton, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_scale_button_set_adjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_icons(instance::GtkScaleButton, _icons)
        _icons = convert(Vector{Cstring}, _icons)
        ret = ccall(("gtk_scale_button_set_icons", libgtk3), Nothing, (Ptr{GObject}, Ptr{Cstring}), instance, _icons)
        nothing
    end
    function set_value(instance::GtkScaleButton, _value::Real)
        ret = ccall(("gtk_scale_button_set_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function get_capture_button_press(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_capture_button_press", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hadjustment(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_hadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_hscrollbar(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_hscrollbar", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_kinetic_scrolling(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_kinetic_scrolling", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_max_content_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_max_content_height", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_content_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_max_content_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_content_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_min_content_height", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_content_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_min_content_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_overlay_scrolling(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_overlay_scrolling", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_placement(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_placement", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = CornerType(ret)
        ret2
    end
    function get_propagate_natural_height(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_propagate_natural_height", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_propagate_natural_width(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_propagate_natural_width", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_shadow_type(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_shadow_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ShadowType(ret)
        ret2
    end
    function get_vadjustment(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_vadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_vscrollbar(instance::GtkScrolledWindow)
        ret = ccall(("gtk_scrolled_window_get_vscrollbar", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function set_capture_button_press(instance::GtkScrolledWindow, _capture_button_press::Bool)
        ret = ccall(("gtk_scrolled_window_set_capture_button_press", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _capture_button_press)
        nothing
    end
    function set_hadjustment(instance::GtkScrolledWindow, _hadjustment::Maybe(GtkAdjustment))
        _hadjustment = if _hadjustment == nothing
                C_NULL
            else
                _hadjustment
            end
        ret = ccall(("gtk_scrolled_window_set_hadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _hadjustment)
        nothing
    end
    function set_kinetic_scrolling(instance::GtkScrolledWindow, _kinetic_scrolling::Bool)
        ret = ccall(("gtk_scrolled_window_set_kinetic_scrolling", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _kinetic_scrolling)
        nothing
    end
    function set_max_content_height(instance::GtkScrolledWindow, _height::Integer)
        ret = ccall(("gtk_scrolled_window_set_max_content_height", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _height)
        nothing
    end
    function set_max_content_width(instance::GtkScrolledWindow, _width::Integer)
        ret = ccall(("gtk_scrolled_window_set_max_content_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function set_min_content_height(instance::GtkScrolledWindow, _height::Integer)
        ret = ccall(("gtk_scrolled_window_set_min_content_height", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _height)
        nothing
    end
    function set_min_content_width(instance::GtkScrolledWindow, _width::Integer)
        ret = ccall(("gtk_scrolled_window_set_min_content_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _width)
        nothing
    end
    function set_overlay_scrolling(instance::GtkScrolledWindow, _overlay_scrolling::Bool)
        ret = ccall(("gtk_scrolled_window_set_overlay_scrolling", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _overlay_scrolling)
        nothing
    end
    function set_placement(instance::GtkScrolledWindow, _window_placement)
        ret = ccall(("gtk_scrolled_window_set_placement", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _window_placement)
        nothing
    end
    function set_propagate_natural_height(instance::GtkScrolledWindow, _propagate::Bool)
        ret = ccall(("gtk_scrolled_window_set_propagate_natural_height", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _propagate)
        nothing
    end
    function set_propagate_natural_width(instance::GtkScrolledWindow, _propagate::Bool)
        ret = ccall(("gtk_scrolled_window_set_propagate_natural_width", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _propagate)
        nothing
    end
    function set_shadow_type(instance::GtkScrolledWindow, _type)
        ret = ccall(("gtk_scrolled_window_set_shadow_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function set_vadjustment(instance::GtkScrolledWindow, _vadjustment::Maybe(GtkAdjustment))
        _vadjustment = if _vadjustment == nothing
                C_NULL
            else
                _vadjustment
            end
        ret = ccall(("gtk_scrolled_window_set_vadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _vadjustment)
        nothing
    end
    function get_search_mode(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_search_mode", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_close_button(instance::GtkSearchBar)
        ret = ccall(("gtk_search_bar_get_show_close_button", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_search_mode(instance::GtkSearchBar, _search_mode::Bool)
        ret = ccall(("gtk_search_bar_set_search_mode", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _search_mode)
        nothing
    end
    function set_show_close_button(instance::GtkSearchBar, _visible::Bool)
        ret = ccall(("gtk_search_bar_set_show_close_button", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function get_draw(instance::GtkSeparatorToolItem)
        ret = ccall(("gtk_separator_tool_item_get_draw", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_draw(instance::GtkSeparatorToolItem, _draw::Bool)
        ret = ccall(("gtk_separator_tool_item_set_draw", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _draw)
        nothing
    end
    function get_accelerator(instance::GtkShortcutLabel)
        ret = ccall(("gtk_shortcut_label_get_accelerator", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_disabled_text(instance::GtkShortcutLabel)
        ret = ccall(("gtk_shortcut_label_get_disabled_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_accelerator(instance::GtkShortcutLabel, _accelerator::Union{AbstractString, Symbol})
        ret = ccall(("gtk_shortcut_label_set_accelerator", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _accelerator)
        nothing
    end
    function set_disabled_text(instance::GtkShortcutLabel, _disabled_text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_shortcut_label_set_disabled_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _disabled_text)
        nothing
    end
    function get_mode(instance::GtkSizeGroup)
        ret = ccall(("gtk_size_group_get_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SizeGroupMode(ret)
        ret2
    end
    function get_widgets(instance::GtkSizeGroup)
        ret = ccall(("gtk_size_group_get_widgets", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function set_mode(instance::GtkSizeGroup, _mode)
        ret = ccall(("gtk_size_group_set_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _mode)
        nothing
    end
    function get_id(instance::GtkSocket)
        ret = ccall(("gtk_socket_get_id", libgtk3), UInt64, (Ptr{GObject},), instance)
        ret
    end
    function get_plug_window(instance::GtkSocket)
        ret = ccall(("gtk_socket_get_plug_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkWindow, ret, false)
            end
        ret2
    end
    function get_adjustment(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_adjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_digits(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_digits", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_numeric(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_numeric", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_snap_to_ticks(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_snap_to_ticks", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_update_policy(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_update_policy", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SpinButtonUpdatePolicy(ret)
        ret2
    end
    function get_value(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_value", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_value_as_int(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_value_as_int", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap(instance::GtkSpinButton)
        ret = ccall(("gtk_spin_button_get_wrap", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_adjustment(instance::GtkSpinButton, _adjustment::GtkAdjustment)
        ret = ccall(("gtk_spin_button_set_adjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _adjustment)
        nothing
    end
    function set_digits(instance::GtkSpinButton, _digits::Integer)
        ret = ccall(("gtk_spin_button_set_digits", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _digits)
        nothing
    end
    function set_numeric(instance::GtkSpinButton, _numeric::Bool)
        ret = ccall(("gtk_spin_button_set_numeric", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _numeric)
        nothing
    end
    function set_snap_to_ticks(instance::GtkSpinButton, _snap_to_ticks::Bool)
        ret = ccall(("gtk_spin_button_set_snap_to_ticks", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _snap_to_ticks)
        nothing
    end
    function set_update_policy(instance::GtkSpinButton, _policy)
        ret = ccall(("gtk_spin_button_set_update_policy", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function set_value(instance::GtkSpinButton, _value::Real)
        ret = ccall(("gtk_spin_button_set_value", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _value)
        nothing
    end
    function set_wrap(instance::GtkSpinButton, _wrap::Bool)
        ret = ccall(("gtk_spin_button_set_wrap", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _wrap)
        nothing
    end
    function get_hhomogeneous(instance::GtkStack)
        ret = ccall(("gtk_stack_get_hhomogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_homogeneous(instance::GtkStack)
        ret = ccall(("gtk_stack_get_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_interpolate_size(instance::GtkStack)
        ret = ccall(("gtk_stack_get_interpolate_size", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_duration(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_duration", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_transition_running(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_running", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_transition_type(instance::GtkStack)
        ret = ccall(("gtk_stack_get_transition_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = StackTransitionType(ret)
        ret2
    end
    function get_vhomogeneous(instance::GtkStack)
        ret = ccall(("gtk_stack_get_vhomogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_child(instance::GtkStack)
        ret = ccall(("gtk_stack_get_visible_child", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_visible_child_name(instance::GtkStack)
        ret = ccall(("gtk_stack_get_visible_child_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_hhomogeneous(instance::GtkStack, _hhomogeneous::Bool)
        ret = ccall(("gtk_stack_set_hhomogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _hhomogeneous)
        nothing
    end
    function set_homogeneous(instance::GtkStack, _homogeneous::Bool)
        ret = ccall(("gtk_stack_set_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_interpolate_size(instance::GtkStack, _interpolate_size::Bool)
        ret = ccall(("gtk_stack_set_interpolate_size", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _interpolate_size)
        nothing
    end
    function set_transition_duration(instance::GtkStack, _duration::Integer)
        ret = ccall(("gtk_stack_set_transition_duration", libgtk3), Nothing, (Ptr{GObject}, UInt32), instance, _duration)
        nothing
    end
    function set_transition_type(instance::GtkStack, _transition)
        ret = ccall(("gtk_stack_set_transition_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _transition)
        nothing
    end
    function set_vhomogeneous(instance::GtkStack, _vhomogeneous::Bool)
        ret = ccall(("gtk_stack_set_vhomogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _vhomogeneous)
        nothing
    end
    function set_visible_child(instance::GtkStack, _child::GtkWidget)
        ret = ccall(("gtk_stack_set_visible_child", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _child)
        nothing
    end
    function set_visible_child_name(instance::GtkStack, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_stack_set_visible_child_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_stack(instance::GtkStackSidebar)
        ret = ccall(("gtk_stack_sidebar_get_stack", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkStack, ret, false)
            end
        ret2
    end
    function set_stack(instance::GtkStackSidebar, _stack::GtkStack)
        ret = ccall(("gtk_stack_sidebar_set_stack", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack)
        nothing
    end
    function get_stack(instance::GtkStackSwitcher)
        ret = ccall(("gtk_stack_switcher_get_stack", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkStack, ret, false)
            end
        ret2
    end
    function set_stack(instance::GtkStackSwitcher, _stack::Maybe(GtkStack))
        _stack = if _stack == nothing
                C_NULL
            else
                _stack
            end
        ret = ccall(("gtk_stack_switcher_set_stack", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _stack)
        nothing
    end
    function get_message_area(instance::GtkStatusbar)
        ret = ccall(("gtk_statusbar_get_message_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkBox, ret, false)
        ret2
    end
    function get_frame_clock(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_frame_clock", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkFrameClock, ret, false)
            end
        ret2
    end
    function get_junction_sides(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_junction_sides", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_parent(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_parent", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkStyleContext, ret, false)
            end
        ret2
    end
    function get_scale(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_scale", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_screen(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_screen", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkScreen, ret, false)
        ret2
    end
    function get_state(instance::GtkStyleContext)
        ret = ccall(("gtk_style_context_get_state", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_frame_clock(instance::GtkStyleContext, _frame_clock::GdkFrameClock)
        ret = ccall(("gtk_style_context_set_frame_clock", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _frame_clock)
        nothing
    end
    function set_junction_sides(instance::GtkStyleContext, _sides::Integer)
        ret = ccall(("gtk_style_context_set_junction_sides", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sides)
        nothing
    end
    function set_parent(instance::GtkStyleContext, _parent::Maybe(GtkStyleContext))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_style_context_set_parent", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function set_path(instance::GtkStyleContext, _path)
        ret = ccall(("gtk_style_context_set_path", libgtk3), Nothing, (Ptr{GObject}, Ref{GtkWidgetPath}), instance, _path)
        nothing
    end
    function set_scale(instance::GtkStyleContext, _scale::Integer)
        ret = ccall(("gtk_style_context_set_scale", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _scale)
        nothing
    end
    function set_screen(instance::GtkStyleContext, _screen::GdkScreen)
        ret = ccall(("gtk_style_context_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function set_state(instance::GtkStyleContext, _flags::Integer)
        ret = ccall(("gtk_style_context_set_state", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _flags)
        nothing
    end
    function get_active(instance::GtkSwitch)
        ret = ccall(("gtk_switch_get_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_state(instance::GtkSwitch)
        ret = ccall(("gtk_switch_get_state", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkSwitch, _is_active::Bool)
        ret = ccall(("gtk_switch_set_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function set_state(instance::GtkSwitch, _state::Bool)
        ret = ccall(("gtk_switch_set_state", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _state)
        nothing
    end
    function get_char_count(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_char_count", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_has_selection(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_has_selection", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_insert(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_insert", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextMark, ret, false)
        ret2
    end
    function get_line_count(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_line_count", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_modified(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_modified", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_selection_bound(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_selection_bound", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextMark, ret, false)
        ret2
    end
    function get_tag_table(instance::GtkTextBuffer)
        ret = ccall(("gtk_text_buffer_get_tag_table", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextTagTable, ret, false)
        ret2
    end
    function set_modified(instance::GtkTextBuffer, _setting::Bool)
        ret = ccall(("gtk_text_buffer_set_modified", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_deleted(instance::GtkTextChildAnchor)
        ret = ccall(("gtk_text_child_anchor_get_deleted", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_widgets(instance::GtkTextChildAnchor)
        ret = ccall(("gtk_text_child_anchor_get_widgets", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_buffer(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_buffer", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextBuffer, ret, false)
        ret2
    end
    function get_deleted(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_deleted", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_left_gravity(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_left_gravity", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_name(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkTextMark)
        ret = ccall(("gtk_text_mark_get_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_visible(instance::GtkTextMark, _setting::Bool)
        ret = ccall(("gtk_text_mark_set_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_priority(instance::GtkTextTag)
        ret = ccall(("gtk_text_tag_get_priority", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_priority(instance::GtkTextTag, _priority::Integer)
        ret = ccall(("gtk_text_tag_set_priority", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _priority)
        nothing
    end
    function get_size(instance::GtkTextTagTable)
        ret = ccall(("gtk_text_tag_table_get_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_accepts_tab(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_accepts_tab", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_bottom_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_bottom_margin", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_buffer(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_buffer", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTextBuffer, ret, false)
        ret2
    end
    function get_cursor_visible(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_cursor_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_editable(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_editable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_indent(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_indent", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_hints(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_input_hints", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_input_purpose(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_input_purpose", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = InputPurpose(ret)
        ret2
    end
    function get_justification(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_justification", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Justification(ret)
        ret2
    end
    function get_left_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_left_margin", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_monospace(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_monospace", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_overwrite(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_overwrite", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_pixels_above_lines(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_above_lines", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_pixels_below_lines(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_below_lines", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_pixels_inside_wrap(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_pixels_inside_wrap", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_right_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_right_margin", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_tabs(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_tabs", libgtk3), Ref{PangoTabArray}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, true)
            end
        ret2
    end
    function get_top_margin(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_top_margin", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_wrap_mode(instance::GtkTextView)
        ret = ccall(("gtk_text_view_get_wrap_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = WrapMode(ret)
        ret2
    end
    function set_accepts_tab(instance::GtkTextView, _accepts_tab::Bool)
        ret = ccall(("gtk_text_view_set_accepts_tab", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _accepts_tab)
        nothing
    end
    function set_bottom_margin(instance::GtkTextView, _bottom_margin::Integer)
        ret = ccall(("gtk_text_view_set_bottom_margin", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _bottom_margin)
        nothing
    end
    function set_buffer(instance::GtkTextView, _buffer::Maybe(GtkTextBuffer))
        _buffer = if _buffer == nothing
                C_NULL
            else
                _buffer
            end
        ret = ccall(("gtk_text_view_set_buffer", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _buffer)
        nothing
    end
    function set_cursor_visible(instance::GtkTextView, _setting::Bool)
        ret = ccall(("gtk_text_view_set_cursor_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_editable(instance::GtkTextView, _setting::Bool)
        ret = ccall(("gtk_text_view_set_editable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_indent(instance::GtkTextView, _indent::Integer)
        ret = ccall(("gtk_text_view_set_indent", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _indent)
        nothing
    end
    function set_input_hints(instance::GtkTextView, _hints::Integer)
        ret = ccall(("gtk_text_view_set_input_hints", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _hints)
        nothing
    end
    function set_input_purpose(instance::GtkTextView, _purpose)
        ret = ccall(("gtk_text_view_set_input_purpose", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _purpose)
        nothing
    end
    function set_justification(instance::GtkTextView, _justification)
        ret = ccall(("gtk_text_view_set_justification", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _justification)
        nothing
    end
    function set_left_margin(instance::GtkTextView, _left_margin::Integer)
        ret = ccall(("gtk_text_view_set_left_margin", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _left_margin)
        nothing
    end
    function set_monospace(instance::GtkTextView, _monospace::Bool)
        ret = ccall(("gtk_text_view_set_monospace", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _monospace)
        nothing
    end
    function set_overwrite(instance::GtkTextView, _overwrite::Bool)
        ret = ccall(("gtk_text_view_set_overwrite", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _overwrite)
        nothing
    end
    function set_pixels_above_lines(instance::GtkTextView, _pixels_above_lines::Integer)
        ret = ccall(("gtk_text_view_set_pixels_above_lines", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pixels_above_lines)
        nothing
    end
    function set_pixels_below_lines(instance::GtkTextView, _pixels_below_lines::Integer)
        ret = ccall(("gtk_text_view_set_pixels_below_lines", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pixels_below_lines)
        nothing
    end
    function set_pixels_inside_wrap(instance::GtkTextView, _pixels_inside_wrap::Integer)
        ret = ccall(("gtk_text_view_set_pixels_inside_wrap", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _pixels_inside_wrap)
        nothing
    end
    function set_right_margin(instance::GtkTextView, _right_margin::Integer)
        ret = ccall(("gtk_text_view_set_right_margin", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _right_margin)
        nothing
    end
    function set_tabs(instance::GtkTextView, _tabs)
        ret = ccall(("gtk_text_view_set_tabs", libgtk3), Nothing, (Ptr{GObject}, Ref{PangoTabArray}), instance, _tabs)
        nothing
    end
    function set_top_margin(instance::GtkTextView, _top_margin::Integer)
        ret = ccall(("gtk_text_view_set_top_margin", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _top_margin)
        nothing
    end
    function set_wrap_mode(instance::GtkTextView, _wrap_mode)
        ret = ccall(("gtk_text_view_set_wrap_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _wrap_mode)
        nothing
    end
    function get_active(instance::GtkToggleButton)
        ret = ccall(("gtk_toggle_button_get_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_inconsistent(instance::GtkToggleButton)
        ret = ccall(("gtk_toggle_button_get_inconsistent", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_mode(instance::GtkToggleButton)
        ret = ccall(("gtk_toggle_button_get_mode", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkToggleButton, _is_active::Bool)
        ret = ccall(("gtk_toggle_button_set_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function set_inconsistent(instance::GtkToggleButton, _setting::Bool)
        ret = ccall(("gtk_toggle_button_set_inconsistent", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_mode(instance::GtkToggleButton, _draw_indicator::Bool)
        ret = ccall(("gtk_toggle_button_set_mode", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _draw_indicator)
        nothing
    end
    function get_active(instance::GtkToggleToolButton)
        ret = ccall(("gtk_toggle_tool_button_get_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_active(instance::GtkToggleToolButton, _is_active::Bool)
        ret = ccall(("gtk_toggle_tool_button_set_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_active)
        nothing
    end
    function get_icon_name(instance::GtkToolButton)
        ret = ccall(("gtk_tool_button_get_icon_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_icon_widget(instance::GtkToolButton)
        ret = ccall(("gtk_tool_button_get_icon_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_label(instance::GtkToolButton)
        ret = ccall(("gtk_tool_button_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_widget(instance::GtkToolButton)
        ret = ccall(("gtk_tool_button_get_label_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_use_underline(instance::GtkToolButton)
        ret = ccall(("gtk_tool_button_get_use_underline", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_icon_name(instance::GtkToolButton, _icon_name::Maybe(Union{AbstractString, Symbol}))
        _icon_name = if _icon_name == nothing
                C_NULL
            else
                _icon_name
            end
        ret = ccall(("gtk_tool_button_set_icon_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _icon_name)
        nothing
    end
    function set_icon_widget(instance::GtkToolButton, _icon_widget::Maybe(GtkWidget))
        _icon_widget = if _icon_widget == nothing
                C_NULL
            else
                _icon_widget
            end
        ret = ccall(("gtk_tool_button_set_icon_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _icon_widget)
        nothing
    end
    function set_label(instance::GtkToolButton, _label::Maybe(Union{AbstractString, Symbol}))
        _label = if _label == nothing
                C_NULL
            else
                _label
            end
        ret = ccall(("gtk_tool_button_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_label_widget(instance::GtkToolButton, _label_widget::Maybe(GtkWidget))
        _label_widget = if _label_widget == nothing
                C_NULL
            else
                _label_widget
            end
        ret = ccall(("gtk_tool_button_set_label_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function set_use_underline(instance::GtkToolButton, _use_underline::Bool)
        ret = ccall(("gtk_tool_button_set_use_underline", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_underline)
        nothing
    end
    function get_ellipsize_mode(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_ellipsize_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_expand(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_expand", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_homogeneous(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_homogeneous", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon_size(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_icon_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_is_important(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_is_important", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_orientation(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_relief_style(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_relief_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ReliefStyle(ret)
        ret2
    end
    function get_text_alignment(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_text_alignment", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_text_orientation(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_text_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_text_size_group(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_text_size_group", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkSizeGroup, ret, false)
        ret2
    end
    function get_toolbar_style(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_toolbar_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function get_use_drag_window(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_use_drag_window", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_horizontal(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_visible_horizontal", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible_vertical(instance::GtkToolItem)
        ret = ccall(("gtk_tool_item_get_visible_vertical", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_expand(instance::GtkToolItem, _expand::Bool)
        ret = ccall(("gtk_tool_item_set_expand", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_homogeneous(instance::GtkToolItem, _homogeneous::Bool)
        ret = ccall(("gtk_tool_item_set_homogeneous", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _homogeneous)
        nothing
    end
    function set_is_important(instance::GtkToolItem, _is_important::Bool)
        ret = ccall(("gtk_tool_item_set_is_important", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_important)
        nothing
    end
    function set_tooltip_markup(instance::GtkToolItem, _markup::Union{AbstractString, Symbol})
        ret = ccall(("gtk_tool_item_set_tooltip_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _markup)
        nothing
    end
    function set_tooltip_text(instance::GtkToolItem, _text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_tool_item_set_tooltip_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_use_drag_window(instance::GtkToolItem, _use_drag_window::Bool)
        ret = ccall(("gtk_tool_item_set_use_drag_window", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_drag_window)
        nothing
    end
    function set_visible_horizontal(instance::GtkToolItem, _visible_horizontal::Bool)
        ret = ccall(("gtk_tool_item_set_visible_horizontal", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible_horizontal)
        nothing
    end
    function set_visible_vertical(instance::GtkToolItem, _visible_vertical::Bool)
        ret = ccall(("gtk_tool_item_set_visible_vertical", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible_vertical)
        nothing
    end
    function get_collapsed(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_collapsed", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_ellipsize(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_ellipsize", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_header_relief(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_header_relief", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ReliefStyle(ret)
        ret2
    end
    function get_label(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_label", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_label_widget(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_label_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_n_items(instance::GtkToolItemGroup)
        ret = ccall(("gtk_tool_item_group_get_n_items", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function set_collapsed(instance::GtkToolItemGroup, _collapsed::Bool)
        ret = ccall(("gtk_tool_item_group_set_collapsed", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _collapsed)
        nothing
    end
    function set_ellipsize(instance::GtkToolItemGroup, _ellipsize)
        ret = ccall(("gtk_tool_item_group_set_ellipsize", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _ellipsize)
        nothing
    end
    function set_header_relief(instance::GtkToolItemGroup, _style)
        ret = ccall(("gtk_tool_item_group_set_header_relief", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _style)
        nothing
    end
    function set_label(instance::GtkToolItemGroup, _label::Union{AbstractString, Symbol})
        ret = ccall(("gtk_tool_item_group_set_label", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _label)
        nothing
    end
    function set_label_widget(instance::GtkToolItemGroup, _label_widget::GtkWidget)
        ret = ccall(("gtk_tool_item_group_set_label_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _label_widget)
        nothing
    end
    function get_icon_size(instance::GtkToolPalette)
        ret = ccall(("gtk_tool_palette_get_icon_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_style(instance::GtkToolPalette)
        ret = ccall(("gtk_tool_palette_get_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function set_drag_source(instance::GtkToolPalette, _targets::Integer)
        ret = ccall(("gtk_tool_palette_set_drag_source", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _targets)
        nothing
    end
    function set_icon_size(instance::GtkToolPalette, _icon_size::Integer)
        ret = ccall(("gtk_tool_palette_set_icon_size", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _icon_size)
        nothing
    end
    function set_style(instance::GtkToolPalette, _style)
        ret = ccall(("gtk_tool_palette_set_style", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _style)
        nothing
    end
    function get_icon_size(instance::GtkToolbar)
        ret = ccall(("gtk_toolbar_get_icon_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = IconSize(ret)
        ret2
    end
    function get_n_items(instance::GtkToolbar)
        ret = ccall(("gtk_toolbar_get_n_items", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_relief_style(instance::GtkToolbar)
        ret = ccall(("gtk_toolbar_get_relief_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ReliefStyle(ret)
        ret2
    end
    function get_show_arrow(instance::GtkToolbar)
        ret = ccall(("gtk_toolbar_get_show_arrow", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_style(instance::GtkToolbar)
        ret = ccall(("gtk_toolbar_get_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function set_icon_size(instance::GtkToolbar, _icon_size)
        ret = ccall(("gtk_toolbar_set_icon_size", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _icon_size)
        nothing
    end
    function set_show_arrow(instance::GtkToolbar, _show_arrow::Bool)
        ret = ccall(("gtk_toolbar_set_show_arrow", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_arrow)
        nothing
    end
    function set_style(instance::GtkToolbar, _style)
        ret = ccall(("gtk_toolbar_set_style", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _style)
        nothing
    end
    function set_custom(instance::GtkTooltip, _custom_widget::Maybe(GtkWidget))
        _custom_widget = if _custom_widget == nothing
                C_NULL
            else
                _custom_widget
            end
        ret = ccall(("gtk_tooltip_set_custom", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _custom_widget)
        nothing
    end
    function set_icon(instance::GtkTooltip, _pixbuf::Maybe(GdkPixbuf))
        _pixbuf = if _pixbuf == nothing
                C_NULL
            else
                _pixbuf
            end
        ret = ccall(("gtk_tooltip_set_icon", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _pixbuf)
        nothing
    end
    function set_markup(instance::GtkTooltip, _markup::Maybe(Union{AbstractString, Symbol}))
        _markup = if _markup == nothing
                C_NULL
            else
                _markup
            end
        ret = ccall(("gtk_tooltip_set_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _markup)
        nothing
    end
    function set_text(instance::GtkTooltip, _text::Maybe(Union{AbstractString, Symbol}))
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_tooltip_set_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function get_children(instance::GtkToplevelAccessible)
        ret = ccall(("gtk_toplevel_accessible_get_children", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkTreeModelFilter)
        ret = ccall(("gtk_tree_model_filter_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function set_visible_column(instance::GtkTreeModelFilter, _column::Integer)
        ret = ccall(("gtk_tree_model_filter_set_visible_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function get_model(instance::GtkTreeModelSort)
        ret = ccall(("gtk_tree_model_sort_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, false)
            end
        ret2
    end
    function get_mode(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_get_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SelectionMode(ret)
        ret2
    end
    function get_tree_view(instance::GtkTreeSelection)
        ret = ccall(("gtk_tree_selection_get_tree_view", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTreeView, ret, false)
        ret2
    end
    function set_mode(instance::GtkTreeSelection, _type)
        ret = ccall(("gtk_tree_selection_set_mode", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function get_activate_on_single_click(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_activate_on_single_click", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_bin_window(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_bin_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkWindow, ret, false)
            end
        ret2
    end
    function get_columns(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_columns", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_enable_search(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_enable_search", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_enable_tree_lines(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_enable_tree_lines", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_expander_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_expander_column", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTreeViewColumn, ret, false)
        ret2
    end
    function get_fixed_height_mode(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_fixed_height_mode", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_grid_lines(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_grid_lines", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = TreeViewGridLines(ret)
        ret2
    end
    function get_headers_clickable(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_headers_clickable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_headers_visible(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_headers_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hover_expand(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_hover_expand", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hover_selection(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_hover_selection", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_level_indentation(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_level_indentation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_model(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_model", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, false)
                end
            end
        ret2
    end
    function get_n_columns(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_n_columns", libgtk3), UInt32, (Ptr{GObject},), instance)
        ret
    end
    function get_reorderable(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_reorderable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_rubber_banding(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_rubber_banding", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_search_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_search_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_search_entry(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_search_entry", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkEntry, ret, false)
        ret2
    end
    function get_selection(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_selection", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkTreeSelection, ret, false)
        ret2
    end
    function get_show_expanders(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_show_expanders", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tooltip_column(instance::GtkTreeView)
        ret = ccall(("gtk_tree_view_get_tooltip_column", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_activate_on_single_click(instance::GtkTreeView, _single::Bool)
        ret = ccall(("gtk_tree_view_set_activate_on_single_click", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _single)
        nothing
    end
    function set_enable_search(instance::GtkTreeView, _enable_search::Bool)
        ret = ccall(("gtk_tree_view_set_enable_search", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _enable_search)
        nothing
    end
    function set_enable_tree_lines(instance::GtkTreeView, _enabled::Bool)
        ret = ccall(("gtk_tree_view_set_enable_tree_lines", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function set_expander_column(instance::GtkTreeView, _column::Maybe(GtkTreeViewColumn))
        _column = if _column == nothing
                C_NULL
            else
                _column
            end
        ret = ccall(("gtk_tree_view_set_expander_column", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _column)
        nothing
    end
    function set_fixed_height_mode(instance::GtkTreeView, _enable::Bool)
        ret = ccall(("gtk_tree_view_set_fixed_height_mode", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _enable)
        nothing
    end
    function set_grid_lines(instance::GtkTreeView, _grid_lines)
        ret = ccall(("gtk_tree_view_set_grid_lines", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _grid_lines)
        nothing
    end
    function set_headers_clickable(instance::GtkTreeView, _setting::Bool)
        ret = ccall(("gtk_tree_view_set_headers_clickable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_headers_visible(instance::GtkTreeView, _headers_visible::Bool)
        ret = ccall(("gtk_tree_view_set_headers_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _headers_visible)
        nothing
    end
    function set_hover_expand(instance::GtkTreeView, _expand::Bool)
        ret = ccall(("gtk_tree_view_set_hover_expand", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_hover_selection(instance::GtkTreeView, _hover::Bool)
        ret = ccall(("gtk_tree_view_set_hover_selection", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _hover)
        nothing
    end
    function set_level_indentation(instance::GtkTreeView, _indentation::Integer)
        ret = ccall(("gtk_tree_view_set_level_indentation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _indentation)
        nothing
    end
    function set_model(instance::GtkTreeView, _model::Maybe(GtkTreeModel))
        _model = if _model == nothing
                C_NULL
            else
                _model
            end
        ret = ccall(("gtk_tree_view_set_model", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _model)
        nothing
    end
    function set_reorderable(instance::GtkTreeView, _reorderable::Bool)
        ret = ccall(("gtk_tree_view_set_reorderable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_rubber_banding(instance::GtkTreeView, _enable::Bool)
        ret = ccall(("gtk_tree_view_set_rubber_banding", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _enable)
        nothing
    end
    function set_search_column(instance::GtkTreeView, _column::Integer)
        ret = ccall(("gtk_tree_view_set_search_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function set_search_entry(instance::GtkTreeView, _entry::Maybe(GtkEntry))
        _entry = if _entry == nothing
                C_NULL
            else
                _entry
            end
        ret = ccall(("gtk_tree_view_set_search_entry", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _entry)
        nothing
    end
    function set_show_expanders(instance::GtkTreeView, _enabled::Bool)
        ret = ccall(("gtk_tree_view_set_show_expanders", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _enabled)
        nothing
    end
    function set_tooltip_column(instance::GtkTreeView, _column::Integer)
        ret = ccall(("gtk_tree_view_set_tooltip_column", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _column)
        nothing
    end
    function get_alignment(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_alignment", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_button(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_button", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_clickable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_clickable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_expand(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_expand", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_fixed_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_fixed_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_max_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_max_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_min_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_min_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_reorderable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_reorderable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_resizable(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_resizable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sizing(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sizing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = TreeViewColumnSizing(ret)
        ret2
    end
    function get_sort_column_id(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_column_id", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_sort_indicator(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_indicator", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sort_order(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_sort_order", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SortType(ret)
        ret2
    end
    function get_spacing(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_spacing", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_title(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_tree_view(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_tree_view", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_visible(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_widget(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_width(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_x_offset(instance::GtkTreeViewColumn)
        ret = ccall(("gtk_tree_view_column_get_x_offset", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_alignment(instance::GtkTreeViewColumn, _xalign::Real)
        ret = ccall(("gtk_tree_view_column_set_alignment", libgtk3), Nothing, (Ptr{GObject}, Float32), instance, _xalign)
        nothing
    end
    function set_clickable(instance::GtkTreeViewColumn, _clickable::Bool)
        ret = ccall(("gtk_tree_view_column_set_clickable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _clickable)
        nothing
    end
    function set_expand(instance::GtkTreeViewColumn, _expand::Bool)
        ret = ccall(("gtk_tree_view_column_set_expand", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_fixed_width(instance::GtkTreeViewColumn, _fixed_width::Integer)
        ret = ccall(("gtk_tree_view_column_set_fixed_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _fixed_width)
        nothing
    end
    function set_max_width(instance::GtkTreeViewColumn, _max_width::Integer)
        ret = ccall(("gtk_tree_view_column_set_max_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _max_width)
        nothing
    end
    function set_min_width(instance::GtkTreeViewColumn, _min_width::Integer)
        ret = ccall(("gtk_tree_view_column_set_min_width", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _min_width)
        nothing
    end
    function set_reorderable(instance::GtkTreeViewColumn, _reorderable::Bool)
        ret = ccall(("gtk_tree_view_column_set_reorderable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _reorderable)
        nothing
    end
    function set_resizable(instance::GtkTreeViewColumn, _resizable::Bool)
        ret = ccall(("gtk_tree_view_column_set_resizable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _resizable)
        nothing
    end
    function set_sizing(instance::GtkTreeViewColumn, _type)
        ret = ccall(("gtk_tree_view_column_set_sizing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function set_sort_column_id(instance::GtkTreeViewColumn, _sort_column_id::Integer)
        ret = ccall(("gtk_tree_view_column_set_sort_column_id", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sort_column_id)
        nothing
    end
    function set_sort_indicator(instance::GtkTreeViewColumn, _setting::Bool)
        ret = ccall(("gtk_tree_view_column_set_sort_indicator", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_sort_order(instance::GtkTreeViewColumn, _order)
        ret = ccall(("gtk_tree_view_column_set_sort_order", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _order)
        nothing
    end
    function set_spacing(instance::GtkTreeViewColumn, _spacing::Integer)
        ret = ccall(("gtk_tree_view_column_set_spacing", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _spacing)
        nothing
    end
    function set_title(instance::GtkTreeViewColumn, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_tree_view_column_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_visible(instance::GtkTreeViewColumn, _visible::Bool)
        ret = ccall(("gtk_tree_view_column_set_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function set_widget(instance::GtkTreeViewColumn, _widget::Maybe(GtkWidget))
        _widget = if _widget == nothing
                C_NULL
            else
                _widget
            end
        ret = ccall(("gtk_tree_view_column_set_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _widget)
        nothing
    end
    function get_bin_window(instance::GtkViewport)
        ret = ccall(("gtk_viewport_get_bin_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkWindow, ret, false)
        ret2
    end
    function get_shadow_type(instance::GtkViewport)
        ret = ccall(("gtk_viewport_get_shadow_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ShadowType(ret)
        ret2
    end
    function get_view_window(instance::GtkViewport)
        ret = ccall(("gtk_viewport_get_view_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkWindow, ret, false)
        ret2
    end
    function set_shadow_type(instance::GtkViewport, _type)
        ret = ccall(("gtk_viewport_set_shadow_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _type)
        nothing
    end
    function get_default_direction()
        ret = ccall(("gtk_widget_get_default_direction", libgtk3), Int32, ())
        ret2 = TextDirection(ret)
        ret2
    end
    function set_default_direction(_dir)
        ret = ccall(("gtk_widget_set_default_direction", libgtk3), Nothing, (Int32,), _dir)
        nothing
    end
    function get_accessible(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_accessible", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(AtkObject, ret, false)
        ret2
    end
    function get_allocated_baseline(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_baseline", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_allocated_height(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_height", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_allocated_width(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_allocated_width", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_app_paintable(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_app_paintable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_default(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_can_default", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_can_focus(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_can_focus", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_child_visible(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_child_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_direction(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_direction", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = TextDirection(ret)
        ret2
    end
    function get_display(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_display", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkDisplay, ret, false)
        ret2
    end
    function get_double_buffered(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_double_buffered", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_events(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_events", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_focus_on_click(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_focus_on_click", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_font_map(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_font_map", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontMap, ret, false)
            end
        ret2
    end
    function get_frame_clock(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_frame_clock", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkFrameClock, ret, false)
            end
        ret2
    end
    function get_halign(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_halign", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Align(ret)
        ret2
    end
    function get_has_tooltip(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_has_tooltip", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_has_window(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_has_window", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hexpand(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_hexpand", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_hexpand_set(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_hexpand_set", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_mapped(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_mapped", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_margin_bottom(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_bottom", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_end(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_end", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_start(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_start", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_margin_top(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_margin_top", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_name(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_no_show_all(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_no_show_all", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_opacity(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_opacity", libgtk3), Float64, (Ptr{GObject},), instance)
        ret
    end
    function get_pango_context(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_pango_context", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(PangoContext, ret, false)
        ret2
    end
    function get_parent(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_parent", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_parent_window(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_parent_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkWindow, ret, false)
            end
        ret2
    end
    function get_realized(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_realized", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_receives_default(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_receives_default", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_request_mode(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_request_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = SizeRequestMode(ret)
        ret2
    end
    function get_scale_factor(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_scale_factor", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_screen(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_screen", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkScreen, ret, false)
        ret2
    end
    function get_sensitive(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_sensitive", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_settings(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_settings", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkSettings, ret, false)
        ret2
    end
    function get_state_flags(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_state_flags", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_style_context(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_style_context", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkStyleContext, ret, false)
        ret2
    end
    function get_support_multidevice(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_support_multidevice", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_tooltip_markup(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_tooltip_markup", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_tooltip_text(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_tooltip_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_tooltip_window(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_tooltip_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWindow, ret, false)
        ret2
    end
    function get_toplevel(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_toplevel", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_valign(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_valign", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Align(ret)
        ret2
    end
    function get_valign_with_baseline(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_valign_with_baseline", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Align(ret)
        ret2
    end
    function get_vexpand(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_vexpand", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_vexpand_set(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_vexpand_set", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visible(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_visual(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_visual", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkVisual, ret, false)
        ret2
    end
    function get_window(instance::GtkWidget)
        ret = ccall(("gtk_widget_get_window", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkWindow, ret, false)
            end
        ret2
    end
    function set_app_paintable(instance::GtkWidget, _app_paintable::Bool)
        ret = ccall(("gtk_widget_set_app_paintable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _app_paintable)
        nothing
    end
    function set_can_default(instance::GtkWidget, _can_default::Bool)
        ret = ccall(("gtk_widget_set_can_default", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _can_default)
        nothing
    end
    function set_can_focus(instance::GtkWidget, _can_focus::Bool)
        ret = ccall(("gtk_widget_set_can_focus", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _can_focus)
        nothing
    end
    function set_child_visible(instance::GtkWidget, _is_visible::Bool)
        ret = ccall(("gtk_widget_set_child_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_visible)
        nothing
    end
    function set_direction(instance::GtkWidget, _dir)
        ret = ccall(("gtk_widget_set_direction", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _dir)
        nothing
    end
    function set_events(instance::GtkWidget, _events::Integer)
        ret = ccall(("gtk_widget_set_events", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _events)
        nothing
    end
    function set_focus_on_click(instance::GtkWidget, _focus_on_click::Bool)
        ret = ccall(("gtk_widget_set_focus_on_click", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _focus_on_click)
        nothing
    end
    function set_font_map(instance::GtkWidget, _font_map::Maybe(PangoFontMap))
        _font_map = if _font_map == nothing
                C_NULL
            else
                _font_map
            end
        ret = ccall(("gtk_widget_set_font_map", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _font_map)
        nothing
    end
    function set_halign(instance::GtkWidget, _align)
        ret = ccall(("gtk_widget_set_halign", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _align)
        nothing
    end
    function set_has_tooltip(instance::GtkWidget, _has_tooltip::Bool)
        ret = ccall(("gtk_widget_set_has_tooltip", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_tooltip)
        nothing
    end
    function set_has_window(instance::GtkWidget, _has_window::Bool)
        ret = ccall(("gtk_widget_set_has_window", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _has_window)
        nothing
    end
    function set_hexpand(instance::GtkWidget, _expand::Bool)
        ret = ccall(("gtk_widget_set_hexpand", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_hexpand_set(instance::GtkWidget, _set::Bool)
        ret = ccall(("gtk_widget_set_hexpand_set", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _set)
        nothing
    end
    function set_mapped(instance::GtkWidget, _mapped::Bool)
        ret = ccall(("gtk_widget_set_mapped", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _mapped)
        nothing
    end
    function set_margin_bottom(instance::GtkWidget, _margin::Integer)
        ret = ccall(("gtk_widget_set_margin_bottom", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_end(instance::GtkWidget, _margin::Integer)
        ret = ccall(("gtk_widget_set_margin_end", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_start(instance::GtkWidget, _margin::Integer)
        ret = ccall(("gtk_widget_set_margin_start", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_margin_top(instance::GtkWidget, _margin::Integer)
        ret = ccall(("gtk_widget_set_margin_top", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _margin)
        nothing
    end
    function set_name(instance::GtkWidget, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_widget_set_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function set_no_show_all(instance::GtkWidget, _no_show_all::Bool)
        ret = ccall(("gtk_widget_set_no_show_all", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _no_show_all)
        nothing
    end
    function set_opacity(instance::GtkWidget, _opacity::Real)
        ret = ccall(("gtk_widget_set_opacity", libgtk3), Nothing, (Ptr{GObject}, Float64), instance, _opacity)
        nothing
    end
    function set_parent(instance::GtkWidget, _parent::GtkWidget)
        ret = ccall(("gtk_widget_set_parent", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function set_parent_window(instance::GtkWidget, _parent_window::GdkWindow)
        ret = ccall(("gtk_widget_set_parent_window", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent_window)
        nothing
    end
    function set_realized(instance::GtkWidget, _realized::Bool)
        ret = ccall(("gtk_widget_set_realized", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _realized)
        nothing
    end
    function set_receives_default(instance::GtkWidget, _receives_default::Bool)
        ret = ccall(("gtk_widget_set_receives_default", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _receives_default)
        nothing
    end
    function set_redraw_on_allocate(instance::GtkWidget, _redraw_on_allocate::Bool)
        ret = ccall(("gtk_widget_set_redraw_on_allocate", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _redraw_on_allocate)
        nothing
    end
    function set_sensitive(instance::GtkWidget, _sensitive::Bool)
        ret = ccall(("gtk_widget_set_sensitive", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _sensitive)
        nothing
    end
    function set_support_multidevice(instance::GtkWidget, _support_multidevice::Bool)
        ret = ccall(("gtk_widget_set_support_multidevice", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _support_multidevice)
        nothing
    end
    function set_tooltip_markup(instance::GtkWidget, _markup::Maybe(Union{AbstractString, Symbol}))
        _markup = if _markup == nothing
                C_NULL
            else
                _markup
            end
        ret = ccall(("gtk_widget_set_tooltip_markup", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _markup)
        nothing
    end
    function set_tooltip_text(instance::GtkWidget, _text::Maybe(Union{AbstractString, Symbol}))
        _text = if _text == nothing
                C_NULL
            else
                _text
            end
        ret = ccall(("gtk_widget_set_tooltip_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_tooltip_window(instance::GtkWidget, _custom_window::Maybe(GtkWindow))
        _custom_window = if _custom_window == nothing
                C_NULL
            else
                _custom_window
            end
        ret = ccall(("gtk_widget_set_tooltip_window", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _custom_window)
        nothing
    end
    function set_valign(instance::GtkWidget, _align)
        ret = ccall(("gtk_widget_set_valign", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _align)
        nothing
    end
    function set_vexpand(instance::GtkWidget, _expand::Bool)
        ret = ccall(("gtk_widget_set_vexpand", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _expand)
        nothing
    end
    function set_vexpand_set(instance::GtkWidget, _set::Bool)
        ret = ccall(("gtk_widget_set_vexpand_set", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _set)
        nothing
    end
    function set_visible(instance::GtkWidget, _visible::Bool)
        ret = ccall(("gtk_widget_set_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _visible)
        nothing
    end
    function set_visual(instance::GtkWidget, _visual::Maybe(GdkVisual))
        _visual = if _visual == nothing
                C_NULL
            else
                _visual
            end
        ret = ccall(("gtk_widget_set_visual", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _visual)
        nothing
    end
    function set_window(instance::GtkWidget, _window::GdkWindow)
        ret = ccall(("gtk_widget_set_window", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _window)
        nothing
    end
    function get_default_icon_list()
        ret = ccall(("gtk_window_get_default_icon_list", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, ())
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_default_icon_name()
        ret = ccall(("gtk_window_get_default_icon_name", libgtk3), Cstring, ())
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_auto_startup_notification(_setting::Bool)
        ret = ccall(("gtk_window_set_auto_startup_notification", libgtk3), Nothing, (Cint,), _setting)
        nothing
    end
    function set_default_icon(_icon::GdkPixbuf)
        ret = ccall(("gtk_window_set_default_icon", libgtk3), Nothing, (Ptr{GObject},), _icon)
        nothing
    end
    function set_default_icon_from_file(_filename::Union{AbstractString, Symbol})
        err = err_buf()
        ret = ccall(("gtk_window_set_default_icon_from_file", libgtk3), Cint, (Cstring, Ptr{Ptr{GError}}), _filename, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_default_icon_list(_list::GLib.LList{GLib._GList{Ptr{GObject}}})
        ret = ccall(("gtk_window_set_default_icon_list", libgtk3), Nothing, (Ptr{GLib._GList{Ptr{GObject}}},), _list)
        nothing
    end
    function set_default_icon_name(_name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_window_set_default_icon_name", libgtk3), Nothing, (Cstring,), _name)
        nothing
    end
    function set_interactive_debugging(_enable::Bool)
        ret = ccall(("gtk_window_set_interactive_debugging", libgtk3), Nothing, (Cint,), _enable)
        nothing
    end
    function get_accept_focus(instance::GtkWindow)
        ret = ccall(("gtk_window_get_accept_focus", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_application(instance::GtkWindow)
        ret = ccall(("gtk_window_get_application", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkApplication, ret, false)
            end
        ret2
    end
    function get_attached_to(instance::GtkWindow)
        ret = ccall(("gtk_window_get_attached_to", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_decorated(instance::GtkWindow)
        ret = ccall(("gtk_window_get_decorated", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_default_widget(instance::GtkWindow)
        ret = ccall(("gtk_window_get_default_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_deletable(instance::GtkWindow)
        ret = ccall(("gtk_window_get_deletable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_destroy_with_parent(instance::GtkWindow)
        ret = ccall(("gtk_window_get_destroy_with_parent", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_focus(instance::GtkWindow)
        ret = ccall(("gtk_window_get_focus", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_focus_on_map(instance::GtkWindow)
        ret = ccall(("gtk_window_get_focus_on_map", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_focus_visible(instance::GtkWindow)
        ret = ccall(("gtk_window_get_focus_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_gravity(instance::GtkWindow)
        ret = ccall(("gtk_window_get_gravity", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Gravity(ret)
        ret2
    end
    function get_group(instance::GtkWindow)
        ret = ccall(("gtk_window_get_group", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWindowGroup, ret, false)
        ret2
    end
    function get_hide_titlebar_when_maximized(instance::GtkWindow)
        ret = ccall(("gtk_window_get_hide_titlebar_when_maximized", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_icon(instance::GtkWindow)
        ret = ccall(("gtk_window_get_icon", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GdkPixbuf, ret, false)
            end
        ret2
    end
    function get_icon_list(instance::GtkWindow)
        ret = ccall(("gtk_window_get_icon_list", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_icon_name(instance::GtkWindow)
        ret = ccall(("gtk_window_get_icon_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_mnemonic_modifier(instance::GtkWindow)
        ret = ccall(("gtk_window_get_mnemonic_modifier", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_mnemonics_visible(instance::GtkWindow)
        ret = ccall(("gtk_window_get_mnemonics_visible", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_modal(instance::GtkWindow)
        ret = ccall(("gtk_window_get_modal", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_resizable(instance::GtkWindow)
        ret = ccall(("gtk_window_get_resizable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_role(instance::GtkWindow)
        ret = ccall(("gtk_window_get_role", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_screen(instance::GtkWindow)
        ret = ccall(("gtk_window_get_screen", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GdkScreen, ret, false)
        ret2
    end
    function get_skip_pager_hint(instance::GtkWindow)
        ret = ccall(("gtk_window_get_skip_pager_hint", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_skip_taskbar_hint(instance::GtkWindow)
        ret = ccall(("gtk_window_get_skip_taskbar_hint", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_title(instance::GtkWindow)
        ret = ccall(("gtk_window_get_title", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_titlebar(instance::GtkWindow)
        ret = ccall(("gtk_window_get_titlebar", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_transient_for(instance::GtkWindow)
        ret = ccall(("gtk_window_get_transient_for", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWindow, ret, false)
            end
        ret2
    end
    function get_type_hint(instance::GtkWindow)
        ret = ccall(("gtk_window_get_type_hint", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = WindowTypeHint(ret)
        ret2
    end
    function get_urgency_hint(instance::GtkWindow)
        ret = ccall(("gtk_window_get_urgency_hint", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_window_type(instance::GtkWindow)
        ret = ccall(("gtk_window_get_window_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = WindowType(ret)
        ret2
    end
    function set_accept_focus(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_accept_focus", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_application(instance::GtkWindow, _application::Maybe(GtkApplication))
        _application = if _application == nothing
                C_NULL
            else
                _application
            end
        ret = ccall(("gtk_window_set_application", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _application)
        nothing
    end
    function set_attached_to(instance::GtkWindow, _attach_widget::Maybe(GtkWidget))
        _attach_widget = if _attach_widget == nothing
                C_NULL
            else
                _attach_widget
            end
        ret = ccall(("gtk_window_set_attached_to", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _attach_widget)
        nothing
    end
    function set_decorated(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_decorated", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_default(instance::GtkWindow, _default_widget::Maybe(GtkWidget))
        _default_widget = if _default_widget == nothing
                C_NULL
            else
                _default_widget
            end
        ret = ccall(("gtk_window_set_default", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _default_widget)
        nothing
    end
    function set_deletable(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_deletable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_destroy_with_parent(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_destroy_with_parent", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_focus(instance::GtkWindow, _focus::Maybe(GtkWidget))
        _focus = if _focus == nothing
                C_NULL
            else
                _focus
            end
        ret = ccall(("gtk_window_set_focus", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _focus)
        nothing
    end
    function set_focus_on_map(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_focus_on_map", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_focus_visible(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_focus_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_gravity(instance::GtkWindow, _gravity)
        ret = ccall(("gtk_window_set_gravity", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _gravity)
        nothing
    end
    function set_has_user_ref_count(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_has_user_ref_count", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_hide_titlebar_when_maximized(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_hide_titlebar_when_maximized", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_icon(instance::GtkWindow, _icon::Maybe(GdkPixbuf))
        _icon = if _icon == nothing
                C_NULL
            else
                _icon
            end
        ret = ccall(("gtk_window_set_icon", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _icon)
        nothing
    end
    function set_icon_from_file(instance::GtkWindow, _filename::Union{AbstractString, Symbol})
        err = err_buf()
        ret = ccall(("gtk_window_set_icon_from_file", libgtk3), Cint, (Ptr{GObject}, Cstring, Ptr{Ptr{GError}}), instance, _filename, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_icon_list(instance::GtkWindow, _list::GLib.LList{GLib._GList{Ptr{GObject}}})
        ret = ccall(("gtk_window_set_icon_list", libgtk3), Nothing, (Ptr{GObject}, Ptr{GLib._GList{Ptr{GObject}}}), instance, _list)
        nothing
    end
    function set_icon_name(instance::GtkWindow, _name::Maybe(Union{AbstractString, Symbol}))
        _name = if _name == nothing
                C_NULL
            else
                _name
            end
        ret = ccall(("gtk_window_set_icon_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function set_keep_above(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_keep_above", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_keep_below(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_keep_below", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_mnemonic_modifier(instance::GtkWindow, _modifier::Integer)
        ret = ccall(("gtk_window_set_mnemonic_modifier", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _modifier)
        nothing
    end
    function set_mnemonics_visible(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_mnemonics_visible", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_modal(instance::GtkWindow, _modal::Bool)
        ret = ccall(("gtk_window_set_modal", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _modal)
        nothing
    end
    function set_position(instance::GtkWindow, _position)
        ret = ccall(("gtk_window_set_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function set_resizable(instance::GtkWindow, _resizable::Bool)
        ret = ccall(("gtk_window_set_resizable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _resizable)
        nothing
    end
    function set_role(instance::GtkWindow, _role::Union{AbstractString, Symbol})
        ret = ccall(("gtk_window_set_role", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _role)
        nothing
    end
    function set_screen(instance::GtkWindow, _screen::GdkScreen)
        ret = ccall(("gtk_window_set_screen", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _screen)
        nothing
    end
    function set_skip_pager_hint(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_skip_pager_hint", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_skip_taskbar_hint(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_skip_taskbar_hint", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function set_startup_id(instance::GtkWindow, _startup_id::Union{AbstractString, Symbol})
        ret = ccall(("gtk_window_set_startup_id", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _startup_id)
        nothing
    end
    function set_title(instance::GtkWindow, _title::Union{AbstractString, Symbol})
        ret = ccall(("gtk_window_set_title", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _title)
        nothing
    end
    function set_titlebar(instance::GtkWindow, _titlebar::Maybe(GtkWidget))
        _titlebar = if _titlebar == nothing
                C_NULL
            else
                _titlebar
            end
        ret = ccall(("gtk_window_set_titlebar", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _titlebar)
        nothing
    end
    function set_transient_for(instance::GtkWindow, _parent::Maybe(GtkWindow))
        _parent = if _parent == nothing
                C_NULL
            else
                _parent
            end
        ret = ccall(("gtk_window_set_transient_for", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _parent)
        nothing
    end
    function set_type_hint(instance::GtkWindow, _hint)
        ret = ccall(("gtk_window_set_type_hint", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _hint)
        nothing
    end
    function set_urgency_hint(instance::GtkWindow, _setting::Bool)
        ret = ccall(("gtk_window_set_urgency_hint", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _setting)
        nothing
    end
    function get_current_grab(instance::GtkWindowGroup)
        ret = ccall(("gtk_window_group_get_current_grab", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkWidget, ret, false)
        ret2
    end
    function get_action_name(instance::GtkActionable)
        ret = ccall(("gtk_actionable_get_action_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function get_action_target_value(instance::GtkActionable)
        ret = ccall(("gtk_actionable_get_action_target_value", libgtk3), Ptr{GVariant}, (Ptr{GObject},), instance)
        ret2 = convert(GVariant, ret)
        ret2
    end
    function set_action_name(instance::GtkActionable, _action_name::Maybe(Union{AbstractString, Symbol}))
        _action_name = if _action_name == nothing
                C_NULL
            else
                _action_name
            end
        ret = ccall(("gtk_actionable_set_action_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _action_name)
        nothing
    end
    function set_action_target_value(instance::GtkActionable, _target_value::Maybe(GVariant))
        _target_value = if _target_value == nothing
                C_NULL
            else
                _target_value
            end
        ret = ccall(("gtk_actionable_set_action_target_value", libgtk3), Nothing, (Ptr{GObject}, Ptr{GVariant}), instance, _target_value)
        nothing
    end
    function set_detailed_action_name(instance::GtkActionable, _detailed_action_name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_actionable_set_detailed_action_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _detailed_action_name)
        nothing
    end
    function get_app_info(instance::GtkAppChooser)
        ret = ccall(("gtk_app_chooser_get_app_info", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, true)
                end
            end
        ret2
    end
    function get_content_type(instance::GtkAppChooser)
        ret = ccall(("gtk_app_chooser_get_content_type", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_name(instance::GtkBuildable)
        ret = ccall(("gtk_buildable_get_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, false)
            end
        ret2
    end
    function set_name(instance::GtkBuildable, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_buildable_set_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function get_area(instance::GtkCellLayout)
        ret = ccall(("gtk_cell_layout_get_area", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkCellArea, ret, false)
            end
        ret2
    end
    function get_cells(instance::GtkCellLayout)
        ret = ccall(("gtk_cell_layout_get_cells", libgtk3), Ptr{GLib._GList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, false)
        ret2
    end
    function get_use_alpha(instance::GtkColorChooser)
        ret = ccall(("gtk_color_chooser_get_use_alpha", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_use_alpha(instance::GtkColorChooser, _use_alpha::Bool)
        ret = ccall(("gtk_color_chooser_set_use_alpha", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_alpha)
        nothing
    end
    function get_editable(instance::GtkEditable)
        ret = ccall(("gtk_editable_get_editable", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_position(instance::GtkEditable)
        ret = ccall(("gtk_editable_get_position", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function set_editable(instance::GtkEditable, _is_editable::Bool)
        ret = ccall(("gtk_editable_set_editable", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _is_editable)
        nothing
    end
    function set_position(instance::GtkEditable, _position::Integer)
        ret = ccall(("gtk_editable_set_position", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _position)
        nothing
    end
    function get_action(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_action", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = FileChooserAction(ret)
        ret2
    end
    function get_create_folders(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_create_folders", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_current_folder(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_current_folder", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_current_folder_file(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_current_folder_file", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_current_folder_uri(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_current_folder_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_current_name(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_current_name", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_do_overwrite_confirmation(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_do_overwrite_confirmation", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_extra_widget(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_extra_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_file(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_file", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                leaftype = GLib.find_leaf_type(ret)
                convert(leaftype, ret, true)
            end
        ret2
    end
    function get_filename(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_filename", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_filenames(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_filenames", libgtk3), Ptr{GLib._GSList{Cstring}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_files(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_files", libgtk3), Ptr{GLib._GSList{Ptr{GObject}}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_filter(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_filter", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkFileFilter, ret, false)
            end
        ret2
    end
    function get_local_only(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_local_only", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_preview_file(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_preview_file", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = begin
                if ret == C_NULL
                    nothing
                else
                    leaftype = GLib.find_leaf_type(ret)
                    convert(leaftype, ret, true)
                end
            end
        ret2
    end
    function get_preview_filename(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_preview_filename", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_preview_uri(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_preview_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_preview_widget(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_preview_widget", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(GtkWidget, ret, false)
            end
        ret2
    end
    function get_preview_widget_active(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_preview_widget_active", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_select_multiple(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_select_multiple", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_hidden(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_show_hidden", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_uri(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_uris(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_uris", libgtk3), Ptr{GLib._GSList{Cstring}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_use_preview_label(instance::GtkFileChooser)
        ret = ccall(("gtk_file_chooser_get_use_preview_label", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_action(instance::GtkFileChooser, _action)
        ret = ccall(("gtk_file_chooser_set_action", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _action)
        nothing
    end
    function set_create_folders(instance::GtkFileChooser, _create_folders::Bool)
        ret = ccall(("gtk_file_chooser_set_create_folders", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _create_folders)
        nothing
    end
    function set_current_folder(instance::GtkFileChooser, _filename::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_set_current_folder", libgtk3), Cint, (Ptr{GObject}, Cstring), instance, _filename)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_current_folder_file(instance::GtkFileChooser, _file::GFile)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_set_current_folder_file", libgtk3), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _file, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_current_folder_uri(instance::GtkFileChooser, _uri::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_set_current_folder_uri", libgtk3), Cint, (Ptr{GObject}, Cstring), instance, _uri)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_current_name(instance::GtkFileChooser, _name::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_set_current_name", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _name)
        nothing
    end
    function set_do_overwrite_confirmation(instance::GtkFileChooser, _do_overwrite_confirmation::Bool)
        ret = ccall(("gtk_file_chooser_set_do_overwrite_confirmation", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _do_overwrite_confirmation)
        nothing
    end
    function set_extra_widget(instance::GtkFileChooser, _extra_widget::GtkWidget)
        ret = ccall(("gtk_file_chooser_set_extra_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _extra_widget)
        nothing
    end
    function set_file(instance::GtkFileChooser, _file::GFile)
        err = err_buf()
        ret = ccall(("gtk_file_chooser_set_file", libgtk3), Cint, (Ptr{GObject}, Ptr{GObject}, Ptr{Ptr{GError}}), instance, _file, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_filename(instance::GtkFileChooser, _filename::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_set_filename", libgtk3), Cint, (Ptr{GObject}, Cstring), instance, _filename)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_filter(instance::GtkFileChooser, _filter::GtkFileFilter)
        ret = ccall(("gtk_file_chooser_set_filter", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function set_local_only(instance::GtkFileChooser, _local_only::Bool)
        ret = ccall(("gtk_file_chooser_set_local_only", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _local_only)
        nothing
    end
    function set_preview_widget(instance::GtkFileChooser, _preview_widget::GtkWidget)
        ret = ccall(("gtk_file_chooser_set_preview_widget", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _preview_widget)
        nothing
    end
    function set_preview_widget_active(instance::GtkFileChooser, _active::Bool)
        ret = ccall(("gtk_file_chooser_set_preview_widget_active", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _active)
        nothing
    end
    function set_select_multiple(instance::GtkFileChooser, _select_multiple::Bool)
        ret = ccall(("gtk_file_chooser_set_select_multiple", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _select_multiple)
        nothing
    end
    function set_show_hidden(instance::GtkFileChooser, _show_hidden::Bool)
        ret = ccall(("gtk_file_chooser_set_show_hidden", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_hidden)
        nothing
    end
    function set_uri(instance::GtkFileChooser, _uri::Union{AbstractString, Symbol})
        ret = ccall(("gtk_file_chooser_set_uri", libgtk3), Cint, (Ptr{GObject}, Cstring), instance, _uri)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_use_preview_label(instance::GtkFileChooser, _use_label::Bool)
        ret = ccall(("gtk_file_chooser_set_use_preview_label", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _use_label)
        nothing
    end
    function get_font(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_font_desc(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_desc", libgtk3), Ref{PangoFontDescription}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(Any, ret, true)
            end
        ret2
    end
    function get_font_face(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_face", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontFace, ret, false)
            end
        ret2
    end
    function get_font_family(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_family", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontFamily, ret, false)
            end
        ret2
    end
    function get_font_features(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_features", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_font_map(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_map", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                convert(PangoFontMap, ret, true)
            end
        ret2
    end
    function get_font_size(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_font_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_language(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_language", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_level(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_level", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_preview_text(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_preview_text", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_show_preview_entry(instance::GtkFontChooser)
        ret = ccall(("gtk_font_chooser_get_show_preview_entry", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_font(instance::GtkFontChooser, _fontname::Union{AbstractString, Symbol})
        ret = ccall(("gtk_font_chooser_set_font", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _fontname)
        nothing
    end
    function set_font_desc(instance::GtkFontChooser, _font_desc)
        ret = ccall(("gtk_font_chooser_set_font_desc", libgtk3), Nothing, (Ptr{GObject}, Ref{PangoFontDescription}), instance, _font_desc)
        nothing
    end
    function set_font_map(instance::GtkFontChooser, _fontmap::Maybe(PangoFontMap))
        _fontmap = if _fontmap == nothing
                C_NULL
            else
                _fontmap
            end
        ret = ccall(("gtk_font_chooser_set_font_map", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _fontmap)
        nothing
    end
    function set_language(instance::GtkFontChooser, _language::Union{AbstractString, Symbol})
        ret = ccall(("gtk_font_chooser_set_language", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _language)
        nothing
    end
    function set_level(instance::GtkFontChooser, _level::Integer)
        ret = ccall(("gtk_font_chooser_set_level", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _level)
        nothing
    end
    function set_preview_text(instance::GtkFontChooser, _text::Union{AbstractString, Symbol})
        ret = ccall(("gtk_font_chooser_set_preview_text", libgtk3), Nothing, (Ptr{GObject}, Cstring), instance, _text)
        nothing
    end
    function set_show_preview_entry(instance::GtkFontChooser, _show_preview_entry::Bool)
        ret = ccall(("gtk_font_chooser_set_show_preview_entry", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_preview_entry)
        nothing
    end
    function get_orientation(instance::GtkOrientable)
        ret = ccall(("gtk_orientable_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function set_orientation(instance::GtkOrientable, _orientation)
        ret = ccall(("gtk_orientable_set_orientation", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _orientation)
        nothing
    end
    function get_current_uri(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_current_uri", libgtk3), Cstring, (Ptr{GObject},), instance)
        ret2 = if ret == C_NULL
                nothing
            else
                bytestring(ret, true)
            end
        ret2
    end
    function get_filter(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_filter", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkRecentFilter, ret, false)
        ret2
    end
    function get_items(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_items", libgtk3), Ptr{GLib._GList{GtkRecentInfo}}, (Ptr{GObject},), instance)
        ret2 = GLib.GList(ret, true)
        ret2
    end
    function get_limit(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_limit", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_local_only(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_local_only", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_select_multiple(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_select_multiple", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_icons(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_show_icons", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_not_found(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_show_not_found", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_private(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_show_private", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_show_tips(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_show_tips", libgtk3), Cint, (Ptr{GObject},), instance)
        ret2 = convert(Bool, ret)
        ret2
    end
    function get_sort_type(instance::GtkRecentChooser)
        ret = ccall(("gtk_recent_chooser_get_sort_type", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = RecentSortType(ret)
        ret2
    end
    function set_current_uri(instance::GtkRecentChooser, _uri::Union{AbstractString, Symbol})
        err = err_buf()
        ret = ccall(("gtk_recent_chooser_set_current_uri", libgtk3), Cint, (Ptr{GObject}, Cstring, Ptr{Ptr{GError}}), instance, _uri, err)
        check_err(err)
        ret2 = convert(Bool, ret)
        ret2
    end
    function set_filter(instance::GtkRecentChooser, _filter::Maybe(GtkRecentFilter))
        _filter = if _filter == nothing
                C_NULL
            else
                _filter
            end
        ret = ccall(("gtk_recent_chooser_set_filter", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _filter)
        nothing
    end
    function set_limit(instance::GtkRecentChooser, _limit::Integer)
        ret = ccall(("gtk_recent_chooser_set_limit", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _limit)
        nothing
    end
    function set_local_only(instance::GtkRecentChooser, _local_only::Bool)
        ret = ccall(("gtk_recent_chooser_set_local_only", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _local_only)
        nothing
    end
    function set_select_multiple(instance::GtkRecentChooser, _select_multiple::Bool)
        ret = ccall(("gtk_recent_chooser_set_select_multiple", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _select_multiple)
        nothing
    end
    function set_show_icons(instance::GtkRecentChooser, _show_icons::Bool)
        ret = ccall(("gtk_recent_chooser_set_show_icons", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_icons)
        nothing
    end
    function set_show_not_found(instance::GtkRecentChooser, _show_not_found::Bool)
        ret = ccall(("gtk_recent_chooser_set_show_not_found", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_not_found)
        nothing
    end
    function set_show_private(instance::GtkRecentChooser, _show_private::Bool)
        ret = ccall(("gtk_recent_chooser_set_show_private", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_private)
        nothing
    end
    function set_show_tips(instance::GtkRecentChooser, _show_tips::Bool)
        ret = ccall(("gtk_recent_chooser_set_show_tips", libgtk3), Nothing, (Ptr{GObject}, Cint), instance, _show_tips)
        nothing
    end
    function set_sort_type(instance::GtkRecentChooser, _sort_type)
        ret = ccall(("gtk_recent_chooser_set_sort_type", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _sort_type)
        nothing
    end
    function get_hadjustment(instance::GtkScrollable)
        ret = ccall(("gtk_scrollable_get_hadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_hscroll_policy(instance::GtkScrollable)
        ret = ccall(("gtk_scrollable_get_hscroll_policy", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ScrollablePolicy(ret)
        ret2
    end
    function get_vadjustment(instance::GtkScrollable)
        ret = ccall(("gtk_scrollable_get_vadjustment", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkAdjustment, ret, false)
        ret2
    end
    function get_vscroll_policy(instance::GtkScrollable)
        ret = ccall(("gtk_scrollable_get_vscroll_policy", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ScrollablePolicy(ret)
        ret2
    end
    function set_hadjustment(instance::GtkScrollable, _hadjustment::Maybe(GtkAdjustment))
        _hadjustment = if _hadjustment == nothing
                C_NULL
            else
                _hadjustment
            end
        ret = ccall(("gtk_scrollable_set_hadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _hadjustment)
        nothing
    end
    function set_hscroll_policy(instance::GtkScrollable, _policy)
        ret = ccall(("gtk_scrollable_set_hscroll_policy", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function set_vadjustment(instance::GtkScrollable, _vadjustment::Maybe(GtkAdjustment))
        _vadjustment = if _vadjustment == nothing
                C_NULL
            else
                _vadjustment
            end
        ret = ccall(("gtk_scrollable_set_vadjustment", libgtk3), Nothing, (Ptr{GObject}, Ptr{GObject}), instance, _vadjustment)
        nothing
    end
    function set_vscroll_policy(instance::GtkScrollable, _policy)
        ret = ccall(("gtk_scrollable_set_vscroll_policy", libgtk3), Nothing, (Ptr{GObject}, Int32), instance, _policy)
        nothing
    end
    function get_ellipsize_mode(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_ellipsize_mode", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = EllipsizeMode(ret)
        ret2
    end
    function get_icon_size(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_icon_size", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_orientation(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_relief_style(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_relief_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ReliefStyle(ret)
        ret2
    end
    function get_style(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_style", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = ToolbarStyle(ret)
        ret2
    end
    function get_text_alignment(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_text_alignment", libgtk3), Float32, (Ptr{GObject},), instance)
        ret
    end
    function get_text_orientation(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_text_orientation", libgtk3), Int32, (Ptr{GObject},), instance)
        ret2 = Orientation(ret)
        ret2
    end
    function get_text_size_group(instance::GtkToolShell)
        ret = ccall(("gtk_tool_shell_get_text_size_group", libgtk3), Ptr{GObject}, (Ptr{GObject},), instance)
        ret2 = convert(GtkSizeGroup, ret, false)
        ret2
    end
    function get_flags(instance::GtkTreeModel)
        ret = ccall(("gtk_tree_model_get_flags", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
    function get_n_columns(instance::GtkTreeModel)
        ret = ccall(("gtk_tree_model_get_n_columns", libgtk3), Int32, (Ptr{GObject},), instance)
        ret
    end
end))
end
