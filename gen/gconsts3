quote
$(Expr(:toplevel, :(module GConstants
    export GUserDirectory, GFormatSizeFlags, GThreadError, GOnceStatus, GBookmarkFileError, GChecksumType, GConvertError, GDateDMY, GDateWeekday, GDateMonth, GTimeType, GFileError, GFileTest, GTraverseFlags, GTraverseType, GHookFlagMask, GIOCondition, GUnicodeType, GUnicodeBreakType, GUnicodeScript, GNormalizeMode, GIOError, GIOChannelError, GIOStatus, GSeekType, GIOFlags, GKeyFileError, GKeyFileFlags, GMarkupError, GMarkupParseFlags, GMarkupCollectType, GVariantClass, GVariantParseError, GLogLevelFlags, GLogWriterOutput, GOptionFlags, GOptionArg, GOptionError, GRegexError, GRegexCompileFlags, GRegexMatchFlags, GErrorType, GTokenType, GShellError, GSliceConfig, GSpawnError, GSpawnFlags, GAsciiType, GTestTrapFlags, GTestSubprocessFlags, GTestLogType, GTestFileType, GThreadPriority, GTypeDebugFlags, GTypeFundamentalFlags, GTypeFlags, GParamFlags, GSignalFlags, GConnectFlags, GSignalMatchType, GBindingFlags, GAppInfoCreateFlags, GConverterFlags, GConverterResult, GDataStreamByteOrder, GDataStreamNewlineType, GFileAttributeType, GFileAttributeInfoFlags, GFileAttributeStatus, GFileQueryInfoFlags, GFileCreateFlags, GFileMeasureFlags, GMountMountFlags, GMountUnmountFlags, GDriveStartFlags, GDriveStartStopType, GFileCopyFlags, GFileMonitorFlags, GFileType, GFilesystemPreviewType, GFileMonitorEvent, GIOErrorEnum, GAskPasswordFlags, GPasswordSave, GMountOperationResult, GOutputStreamSpliceFlags, GIOStreamSpliceFlags, GEmblemOrigin, GResolverError, GResolverRecordType, GResourceError, GResourceFlags, GResourceLookupFlags, GSocketFamily, GSocketType, GSocketMsgFlags, GSocketProtocol, GZlibCompressorFormat, GUnixSocketAddressType, GBusType, GBusNameOwnerFlags, GBusNameWatcherFlags, GDBusProxyFlags, GDBusError, GDBusConnectionFlags, GDBusCapabilityFlags, GDBusCallFlags, GDBusMessageType, GDBusMessageFlags, GDBusMessageHeaderField, GDBusPropertyInfoFlags, GDBusSubtreeFlags, GDBusServerFlags, GDBusSignalFlags, GDBusSendMessageFlags, GCredentialsType, GDBusMessageByteOrder, GApplicationFlags, GTlsError, GTlsCertificateFlags, GTlsAuthenticationMode, GTlsRehandshakeMode, GTlsPasswordFlags, GTlsInteractionResult, GDBusInterfaceSkeletonFlags, GDBusObjectManagerClientFlags, GTlsDatabaseVerifyFlags, GTlsDatabaseLookupFlags, GTlsCertificateRequestFlags, GIOModuleScopeFlags, GSocketClientEvent, GSocketListenerEvent, GTestDBusFlags, GSubprocessFlags, GNotificationPriority, GNetworkConnectivity, GModuleFlags, GSettingsBindFlags, GdkByteOrder, GdkModifierType, GdkModifierIntent, GdkStatus, GdkGrabStatus, GdkGrabOwnership, GdkEventMask, GdkGLError, GdkWindowTypeHint, GdkAxisUse, GdkAxisFlags, GdkInputSource, GdkInputMode, GdkDeviceType, GdkDragAction, GdkDragCancelReason, GdkDragProtocol, GdkDeviceToolType, GdkFilterReturn, GdkEventType, GdkVisibilityState, GdkTouchpadGesturePhase, GdkScrollDirection, GdkNotifyType, GdkCrossingMode, GdkPropertyState, GdkWindowState, GdkSettingAction, GdkOwnerChange, GdkFrameClockPhase, GdkWindowWindowClass, GdkWindowType, GdkWindowAttributesType, GdkWindowHints, GdkWMDecoration, GdkWMFunction, GdkGravity, GdkAnchorHints, GdkWindowEdge, GdkFullscreenMode, GdkSeatCapabilities, GdkSubpixelLayout, GdkPixbufAlphaMode, GdkColorspace, GdkPixbufError, GdkInterpType, GdkPixbufRotation, GdkCursorType, GdkDevicePadFeature, GdkPropMode, GdkVisualType, GtkAlign, GtkArrowType, GtkBaselinePosition, GtkDeleteType, GtkDirectionType, GtkIconSize, GtkSensitivityType, GtkTextDirection, GtkJustification, GtkMenuDirectionType, GtkMessageType, GtkMovementStep, GtkScrollStep, GtkOrientation, GtkPackType, GtkPositionType, GtkReliefStyle, GtkScrollType, GtkSelectionMode, GtkShadowType, GtkStateType, GtkToolbarStyle, GtkWrapMode, GtkSortType, GtkIMPreeditStyle, GtkIMStatusStyle, GtkPackDirection, GtkPrintPages, GtkPageSet, GtkNumberUpLayout, GtkPageOrientation, GtkPrintQuality, GtkPrintDuplex, GtkUnit, GtkTreeViewGridLines, GtkDragResult, GtkSizeGroupMode, GtkSizeRequestMode, GtkScrollablePolicy, GtkStateFlags, GtkRegionFlags, GtkJunctionSides, GtkBorderStyle, GtkLevelBarMode, GtkInputPurpose, GtkInputHints, GtkPropagationPhase, GtkEventSequenceState, GtkPanDirection, GtkPopoverConstraint, GtkAccelFlags, GtkWidgetHelpType, GtkApplicationInhibitFlags, GtkResizeMode, GtkWindowType, GtkWindowPosition, GtkDialogFlags, GtkResponseType, GtkLicense, GtkArrowPlacement, GtkTreeModelFlags, GtkCellRendererState, GtkCellRendererMode, GtkTreeViewColumnSizing, GtkTextSearchFlags, GtkTargetFlags, GtkImageType, GtkEntryIconPosition, GtkTreeViewDropPosition, GtkAssistantPageType, GtkButtonBoxStyle, GtkBuilderError, GtkCalendarDisplayOptions, GtkCellRendererAccelMode, GtkCssSectionType, GtkCssProviderError, GtkDebugFlag, GtkDestDefaults, GtkFileFilterFlags, GtkFileChooserAction, GtkFileChooserConfirmation, GtkFileChooserError, GtkStyleContextPrintFlags, GtkIconLookupFlags, GtkIconThemeError, GtkIconViewDropPosition, GtkButtonsType, GtkButtonRole, GtkNotebookTab, GtkPadActionType, GtkPlacesOpenFlags, GtkPrintStatus, GtkPrintOperationResult, GtkPrintOperationAction, GtkPrintError, GtkRecentManagerError, GtkRecentFilterFlags, GtkRecentSortType, GtkRecentChooserError, GtkRevealerTransitionType, GtkCornerType, GtkPolicyType, GtkShortcutType, GtkStackTransitionType, GtkSpinButtonUpdatePolicy, GtkSpinType, GtkTextBufferTargetInfo, GtkTextWindowType, GtkTextViewLayer, GtkTextExtendSelection, GtkToolbarSpaceStyle, GtkToolPaletteDragTargets, GtkRcFlags, GtkRcTokenType, GtkPathPriorityType, GtkPathType, GtkExpanderStyle, GtkAttachOptions, GtkUIManagerItemType
    $(Expr(:toplevel, :(baremodule GUserDirectory
    const DIRECTORY_DESKTOP = const G_USER_DIRECTORY_DESKTOP = Main.Base.convert(Main.Base.Int32, 0)
    const DIRECTORY_DOCUMENTS = const G_USER_DIRECTORY_DOCUMENTS = Main.Base.convert(Main.Base.Int32, 1)
    const DIRECTORY_DOWNLOAD = const G_USER_DIRECTORY_DOWNLOAD = Main.Base.convert(Main.Base.Int32, 2)
    const DIRECTORY_MUSIC = const G_USER_DIRECTORY_MUSIC = Main.Base.convert(Main.Base.Int32, 3)
    const DIRECTORY_PICTURES = const G_USER_DIRECTORY_PICTURES = Main.Base.convert(Main.Base.Int32, 4)
    const DIRECTORY_PUBLIC_SHARE = const G_USER_DIRECTORY_PUBLIC_SHARE = Main.Base.convert(Main.Base.Int32, 5)
    const DIRECTORY_TEMPLATES = const G_USER_DIRECTORY_TEMPLATES = Main.Base.convert(Main.Base.Int32, 6)
    const DIRECTORY_VIDEOS = const G_USER_DIRECTORY_VIDEOS = Main.Base.convert(Main.Base.Int32, 7)
    const N_DIRECTORIES = const G_USER_N_DIRECTORIES = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GFormatSizeFlags
    const DEFAULT = const G_FORMAT_SIZE_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const LONG_FORMAT = const G_FORMAT_SIZE_LONG_FORMAT = Main.Base.convert(Main.Base.Int32, 1)
    const IEC_UNITS = const G_FORMAT_SIZE_IEC_UNITS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GThreadError
    const AGAIN = const G_THREAD_ERROR_AGAIN = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GOnceStatus
    const NOTCALLED = const G_ONCE_STATUS_NOTCALLED = Main.Base.convert(Main.Base.Int32, 0)
    const PROGRESS = const G_ONCE_STATUS_PROGRESS = Main.Base.convert(Main.Base.Int32, 1)
    const READY = const G_ONCE_STATUS_READY = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GBookmarkFileError
    const INVALID_URI = const G_BOOKMARK_FILE_ERROR_INVALID_URI = Main.Base.convert(Main.Base.Int32, 0)
    const INVALID_VALUE = const G_BOOKMARK_FILE_ERROR_INVALID_VALUE = Main.Base.convert(Main.Base.Int32, 1)
    const APP_NOT_REGISTERED = const G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = Main.Base.convert(Main.Base.Int32, 2)
    const URI_NOT_FOUND = const G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 3)
    const READ = const G_BOOKMARK_FILE_ERROR_READ = Main.Base.convert(Main.Base.Int32, 4)
    const UNKNOWN_ENCODING = const G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = Main.Base.convert(Main.Base.Int32, 5)
    const WRITE = const G_BOOKMARK_FILE_ERROR_WRITE = Main.Base.convert(Main.Base.Int32, 6)
    const FILE_NOT_FOUND = const G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GChecksumType
    const MD5 = const G_CHECKSUM_MD5 = Main.Base.convert(Main.Base.Int32, 0)
    const SHA1 = const G_CHECKSUM_SHA1 = Main.Base.convert(Main.Base.Int32, 1)
    const SHA256 = const G_CHECKSUM_SHA256 = Main.Base.convert(Main.Base.Int32, 2)
    const SHA512 = const G_CHECKSUM_SHA512 = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GConvertError
    const NO_CONVERSION = const G_CONVERT_ERROR_NO_CONVERSION = Main.Base.convert(Main.Base.Int32, 0)
    const ILLEGAL_SEQUENCE = const G_CONVERT_ERROR_ILLEGAL_SEQUENCE = Main.Base.convert(Main.Base.Int32, 1)
    const FAILED = const G_CONVERT_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 2)
    const PARTIAL_INPUT = const G_CONVERT_ERROR_PARTIAL_INPUT = Main.Base.convert(Main.Base.Int32, 3)
    const BAD_URI = const G_CONVERT_ERROR_BAD_URI = Main.Base.convert(Main.Base.Int32, 4)
    const NOT_ABSOLUTE_PATH = const G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = Main.Base.convert(Main.Base.Int32, 5)
    const NO_MEMORY = const G_CONVERT_ERROR_NO_MEMORY = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GDateDMY
    const DAY = const G_DATE_DAY = Main.Base.convert(Main.Base.Int32, 0)
    const MONTH = const G_DATE_MONTH = Main.Base.convert(Main.Base.Int32, 1)
    const YEAR = const G_DATE_YEAR = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDateWeekday
    const BAD_WEEKDAY = const G_DATE_BAD_WEEKDAY = Main.Base.convert(Main.Base.Int32, 0)
    const MONDAY = const G_DATE_MONDAY = Main.Base.convert(Main.Base.Int32, 1)
    const TUESDAY = const G_DATE_TUESDAY = Main.Base.convert(Main.Base.Int32, 2)
    const WEDNESDAY = const G_DATE_WEDNESDAY = Main.Base.convert(Main.Base.Int32, 3)
    const THURSDAY = const G_DATE_THURSDAY = Main.Base.convert(Main.Base.Int32, 4)
    const FRIDAY = const G_DATE_FRIDAY = Main.Base.convert(Main.Base.Int32, 5)
    const SATURDAY = const G_DATE_SATURDAY = Main.Base.convert(Main.Base.Int32, 6)
    const SUNDAY = const G_DATE_SUNDAY = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GDateMonth
    const BAD_MONTH = const G_DATE_BAD_MONTH = Main.Base.convert(Main.Base.Int32, 0)
    const JANUARY = const G_DATE_JANUARY = Main.Base.convert(Main.Base.Int32, 1)
    const FEBRUARY = const G_DATE_FEBRUARY = Main.Base.convert(Main.Base.Int32, 2)
    const MARCH = const G_DATE_MARCH = Main.Base.convert(Main.Base.Int32, 3)
    const APRIL = const G_DATE_APRIL = Main.Base.convert(Main.Base.Int32, 4)
    const MAY = const G_DATE_MAY = Main.Base.convert(Main.Base.Int32, 5)
    const JUNE = const G_DATE_JUNE = Main.Base.convert(Main.Base.Int32, 6)
    const JULY = const G_DATE_JULY = Main.Base.convert(Main.Base.Int32, 7)
    const AUGUST = const G_DATE_AUGUST = Main.Base.convert(Main.Base.Int32, 8)
    const SEPTEMBER = const G_DATE_SEPTEMBER = Main.Base.convert(Main.Base.Int32, 9)
    const OCTOBER = const G_DATE_OCTOBER = Main.Base.convert(Main.Base.Int32, 10)
    const NOVEMBER = const G_DATE_NOVEMBER = Main.Base.convert(Main.Base.Int32, 11)
    const DECEMBER = const G_DATE_DECEMBER = Main.Base.convert(Main.Base.Int32, 12)
    end)))
    $(Expr(:toplevel, :(baremodule GTimeType
    const STANDARD = const G_TIME_TYPE_STANDARD = Main.Base.convert(Main.Base.Int32, 0)
    const DAYLIGHT = const G_TIME_TYPE_DAYLIGHT = Main.Base.convert(Main.Base.Int32, 1)
    const UNIVERSAL = const G_TIME_TYPE_UNIVERSAL = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GFileError
    const EXIST = const G_FILE_ERROR_EXIST = Main.Base.convert(Main.Base.Int32, 0)
    const ISDIR = const G_FILE_ERROR_ISDIR = Main.Base.convert(Main.Base.Int32, 1)
    const ACCES = const G_FILE_ERROR_ACCES = Main.Base.convert(Main.Base.Int32, 2)
    const NAMETOOLONG = const G_FILE_ERROR_NAMETOOLONG = Main.Base.convert(Main.Base.Int32, 3)
    const NOENT = const G_FILE_ERROR_NOENT = Main.Base.convert(Main.Base.Int32, 4)
    const NOTDIR = const G_FILE_ERROR_NOTDIR = Main.Base.convert(Main.Base.Int32, 5)
    const NXIO = const G_FILE_ERROR_NXIO = Main.Base.convert(Main.Base.Int32, 6)
    const NODEV = const G_FILE_ERROR_NODEV = Main.Base.convert(Main.Base.Int32, 7)
    const ROFS = const G_FILE_ERROR_ROFS = Main.Base.convert(Main.Base.Int32, 8)
    const TXTBSY = const G_FILE_ERROR_TXTBSY = Main.Base.convert(Main.Base.Int32, 9)
    const FAULT = const G_FILE_ERROR_FAULT = Main.Base.convert(Main.Base.Int32, 10)
    const LOOP = const G_FILE_ERROR_LOOP = Main.Base.convert(Main.Base.Int32, 11)
    const NOSPC = const G_FILE_ERROR_NOSPC = Main.Base.convert(Main.Base.Int32, 12)
    const NOMEM = const G_FILE_ERROR_NOMEM = Main.Base.convert(Main.Base.Int32, 13)
    const MFILE = const G_FILE_ERROR_MFILE = Main.Base.convert(Main.Base.Int32, 14)
    const NFILE = const G_FILE_ERROR_NFILE = Main.Base.convert(Main.Base.Int32, 15)
    const BADF = const G_FILE_ERROR_BADF = Main.Base.convert(Main.Base.Int32, 16)
    const INVAL = const G_FILE_ERROR_INVAL = Main.Base.convert(Main.Base.Int32, 17)
    const PIPE = const G_FILE_ERROR_PIPE = Main.Base.convert(Main.Base.Int32, 18)
    const AGAIN = const G_FILE_ERROR_AGAIN = Main.Base.convert(Main.Base.Int32, 19)
    const INTR = const G_FILE_ERROR_INTR = Main.Base.convert(Main.Base.Int32, 20)
    const IO = const G_FILE_ERROR_IO = Main.Base.convert(Main.Base.Int32, 21)
    const PERM = const G_FILE_ERROR_PERM = Main.Base.convert(Main.Base.Int32, 22)
    const NOSYS = const G_FILE_ERROR_NOSYS = Main.Base.convert(Main.Base.Int32, 23)
    const FAILED = const G_FILE_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 24)
    end)))
    $(Expr(:toplevel, :(baremodule GFileTest
    const IS_REGULAR = const G_FILE_TEST_IS_REGULAR = Main.Base.convert(Main.Base.Int32, 1)
    const IS_SYMLINK = const G_FILE_TEST_IS_SYMLINK = Main.Base.convert(Main.Base.Int32, 2)
    const IS_DIR = const G_FILE_TEST_IS_DIR = Main.Base.convert(Main.Base.Int32, 4)
    const IS_EXECUTABLE = const G_FILE_TEST_IS_EXECUTABLE = Main.Base.convert(Main.Base.Int32, 8)
    const EXISTS = const G_FILE_TEST_EXISTS = Main.Base.convert(Main.Base.Int32, 16)
    end)))
    $(Expr(:toplevel, :(baremodule GTraverseFlags
    const LEAVES = const G_TRAVERSE_LEAVES = Main.Base.convert(Main.Base.Int32, 1)
    const NON_LEAVES = const G_TRAVERSE_NON_LEAVES = Main.Base.convert(Main.Base.Int32, 2)
    const ALL = const G_TRAVERSE_ALL = Main.Base.convert(Main.Base.Int32, 3)
    const MASK = const G_TRAVERSE_MASK = Main.Base.convert(Main.Base.Int32, 3)
    const LEAFS = const G_TRAVERSE_LEAFS = Main.Base.convert(Main.Base.Int32, 1)
    const NON_LEAFS = const G_TRAVERSE_NON_LEAFS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GTraverseType
    const IN_ORDER = const G_IN_ORDER = Main.Base.convert(Main.Base.Int32, 0)
    const PRE_ORDER = const G_PRE_ORDER = Main.Base.convert(Main.Base.Int32, 1)
    const POST_ORDER = const G_POST_ORDER = Main.Base.convert(Main.Base.Int32, 2)
    const LEVEL_ORDER = const G_LEVEL_ORDER = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GHookFlagMask
    const ACTIVE = const G_HOOK_FLAG_ACTIVE = Main.Base.convert(Main.Base.Int32, 1)
    const IN_CALL = const G_HOOK_FLAG_IN_CALL = Main.Base.convert(Main.Base.Int32, 2)
    const MASK = const G_HOOK_FLAG_MASK = Main.Base.convert(Main.Base.Int32, 15)
    end)))
    $(Expr(:toplevel, :(baremodule GIOCondition
    const IN = const G_IO_IN = Main.Base.convert(Main.Base.Int32, 1)
    const OUT = const G_IO_OUT = Main.Base.convert(Main.Base.Int32, 4)
    const PRI = const G_IO_PRI = Main.Base.convert(Main.Base.Int32, 2)
    const ERR = const G_IO_ERR = Main.Base.convert(Main.Base.Int32, 8)
    const HUP = const G_IO_HUP = Main.Base.convert(Main.Base.Int32, 16)
    const NVAL = const G_IO_NVAL = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GUnicodeType
    const CONTROL = const G_UNICODE_CONTROL = Main.Base.convert(Main.Base.Int32, 0)
    const FORMAT = const G_UNICODE_FORMAT = Main.Base.convert(Main.Base.Int32, 1)
    const UNASSIGNED = const G_UNICODE_UNASSIGNED = Main.Base.convert(Main.Base.Int32, 2)
    const PRIVATE_USE = const G_UNICODE_PRIVATE_USE = Main.Base.convert(Main.Base.Int32, 3)
    const SURROGATE = const G_UNICODE_SURROGATE = Main.Base.convert(Main.Base.Int32, 4)
    const LOWERCASE_LETTER = const G_UNICODE_LOWERCASE_LETTER = Main.Base.convert(Main.Base.Int32, 5)
    const MODIFIER_LETTER = const G_UNICODE_MODIFIER_LETTER = Main.Base.convert(Main.Base.Int32, 6)
    const OTHER_LETTER = const G_UNICODE_OTHER_LETTER = Main.Base.convert(Main.Base.Int32, 7)
    const TITLECASE_LETTER = const G_UNICODE_TITLECASE_LETTER = Main.Base.convert(Main.Base.Int32, 8)
    const UPPERCASE_LETTER = const G_UNICODE_UPPERCASE_LETTER = Main.Base.convert(Main.Base.Int32, 9)
    const SPACING_MARK = const G_UNICODE_SPACING_MARK = Main.Base.convert(Main.Base.Int32, 10)
    const ENCLOSING_MARK = const G_UNICODE_ENCLOSING_MARK = Main.Base.convert(Main.Base.Int32, 11)
    const NON_SPACING_MARK = const G_UNICODE_NON_SPACING_MARK = Main.Base.convert(Main.Base.Int32, 12)
    const DECIMAL_NUMBER = const G_UNICODE_DECIMAL_NUMBER = Main.Base.convert(Main.Base.Int32, 13)
    const LETTER_NUMBER = const G_UNICODE_LETTER_NUMBER = Main.Base.convert(Main.Base.Int32, 14)
    const OTHER_NUMBER = const G_UNICODE_OTHER_NUMBER = Main.Base.convert(Main.Base.Int32, 15)
    const CONNECT_PUNCTUATION = const G_UNICODE_CONNECT_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 16)
    const DASH_PUNCTUATION = const G_UNICODE_DASH_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 17)
    const CLOSE_PUNCTUATION = const G_UNICODE_CLOSE_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 18)
    const FINAL_PUNCTUATION = const G_UNICODE_FINAL_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 19)
    const INITIAL_PUNCTUATION = const G_UNICODE_INITIAL_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 20)
    const OTHER_PUNCTUATION = const G_UNICODE_OTHER_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 21)
    const OPEN_PUNCTUATION = const G_UNICODE_OPEN_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 22)
    const CURRENCY_SYMBOL = const G_UNICODE_CURRENCY_SYMBOL = Main.Base.convert(Main.Base.Int32, 23)
    const MODIFIER_SYMBOL = const G_UNICODE_MODIFIER_SYMBOL = Main.Base.convert(Main.Base.Int32, 24)
    const MATH_SYMBOL = const G_UNICODE_MATH_SYMBOL = Main.Base.convert(Main.Base.Int32, 25)
    const OTHER_SYMBOL = const G_UNICODE_OTHER_SYMBOL = Main.Base.convert(Main.Base.Int32, 26)
    const LINE_SEPARATOR = const G_UNICODE_LINE_SEPARATOR = Main.Base.convert(Main.Base.Int32, 27)
    const PARAGRAPH_SEPARATOR = const G_UNICODE_PARAGRAPH_SEPARATOR = Main.Base.convert(Main.Base.Int32, 28)
    const SPACE_SEPARATOR = const G_UNICODE_SPACE_SEPARATOR = Main.Base.convert(Main.Base.Int32, 29)
    end)))
    $(Expr(:toplevel, :(baremodule GUnicodeBreakType
    const MANDATORY = const G_UNICODE_BREAK_MANDATORY = Main.Base.convert(Main.Base.Int32, 0)
    const CARRIAGE_RETURN = const G_UNICODE_BREAK_CARRIAGE_RETURN = Main.Base.convert(Main.Base.Int32, 1)
    const LINE_FEED = const G_UNICODE_BREAK_LINE_FEED = Main.Base.convert(Main.Base.Int32, 2)
    const COMBINING_MARK = const G_UNICODE_BREAK_COMBINING_MARK = Main.Base.convert(Main.Base.Int32, 3)
    const SURROGATE = const G_UNICODE_BREAK_SURROGATE = Main.Base.convert(Main.Base.Int32, 4)
    const ZERO_WIDTH_SPACE = const G_UNICODE_BREAK_ZERO_WIDTH_SPACE = Main.Base.convert(Main.Base.Int32, 5)
    const INSEPARABLE = const G_UNICODE_BREAK_INSEPARABLE = Main.Base.convert(Main.Base.Int32, 6)
    const NON_BREAKING_GLUE = const G_UNICODE_BREAK_NON_BREAKING_GLUE = Main.Base.convert(Main.Base.Int32, 7)
    const CONTINGENT = const G_UNICODE_BREAK_CONTINGENT = Main.Base.convert(Main.Base.Int32, 8)
    const SPACE = const G_UNICODE_BREAK_SPACE = Main.Base.convert(Main.Base.Int32, 9)
    const AFTER = const G_UNICODE_BREAK_AFTER = Main.Base.convert(Main.Base.Int32, 10)
    const BEFORE = const G_UNICODE_BREAK_BEFORE = Main.Base.convert(Main.Base.Int32, 11)
    const BEFORE_AND_AFTER = const G_UNICODE_BREAK_BEFORE_AND_AFTER = Main.Base.convert(Main.Base.Int32, 12)
    const HYPHEN = const G_UNICODE_BREAK_HYPHEN = Main.Base.convert(Main.Base.Int32, 13)
    const NON_STARTER = const G_UNICODE_BREAK_NON_STARTER = Main.Base.convert(Main.Base.Int32, 14)
    const OPEN_PUNCTUATION = const G_UNICODE_BREAK_OPEN_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 15)
    const CLOSE_PUNCTUATION = const G_UNICODE_BREAK_CLOSE_PUNCTUATION = Main.Base.convert(Main.Base.Int32, 16)
    const QUOTATION = const G_UNICODE_BREAK_QUOTATION = Main.Base.convert(Main.Base.Int32, 17)
    const EXCLAMATION = const G_UNICODE_BREAK_EXCLAMATION = Main.Base.convert(Main.Base.Int32, 18)
    const IDEOGRAPHIC = const G_UNICODE_BREAK_IDEOGRAPHIC = Main.Base.convert(Main.Base.Int32, 19)
    const NUMERIC = const G_UNICODE_BREAK_NUMERIC = Main.Base.convert(Main.Base.Int32, 20)
    const INFIX_SEPARATOR = const G_UNICODE_BREAK_INFIX_SEPARATOR = Main.Base.convert(Main.Base.Int32, 21)
    const SYMBOL = const G_UNICODE_BREAK_SYMBOL = Main.Base.convert(Main.Base.Int32, 22)
    const ALPHABETIC = const G_UNICODE_BREAK_ALPHABETIC = Main.Base.convert(Main.Base.Int32, 23)
    const PREFIX = const G_UNICODE_BREAK_PREFIX = Main.Base.convert(Main.Base.Int32, 24)
    const POSTFIX = const G_UNICODE_BREAK_POSTFIX = Main.Base.convert(Main.Base.Int32, 25)
    const COMPLEX_CONTEXT = const G_UNICODE_BREAK_COMPLEX_CONTEXT = Main.Base.convert(Main.Base.Int32, 26)
    const AMBIGUOUS = const G_UNICODE_BREAK_AMBIGUOUS = Main.Base.convert(Main.Base.Int32, 27)
    const UNKNOWN = const G_UNICODE_BREAK_UNKNOWN = Main.Base.convert(Main.Base.Int32, 28)
    const NEXT_LINE = const G_UNICODE_BREAK_NEXT_LINE = Main.Base.convert(Main.Base.Int32, 29)
    const WORD_JOINER = const G_UNICODE_BREAK_WORD_JOINER = Main.Base.convert(Main.Base.Int32, 30)
    const HANGUL_L_JAMO = const G_UNICODE_BREAK_HANGUL_L_JAMO = Main.Base.convert(Main.Base.Int32, 31)
    const HANGUL_V_JAMO = const G_UNICODE_BREAK_HANGUL_V_JAMO = Main.Base.convert(Main.Base.Int32, 32)
    const HANGUL_T_JAMO = const G_UNICODE_BREAK_HANGUL_T_JAMO = Main.Base.convert(Main.Base.Int32, 33)
    const HANGUL_LV_SYLLABLE = const G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = Main.Base.convert(Main.Base.Int32, 34)
    const HANGUL_LVT_SYLLABLE = const G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = Main.Base.convert(Main.Base.Int32, 35)
    const CLOSE_PARANTHESIS = const G_UNICODE_BREAK_CLOSE_PARANTHESIS = Main.Base.convert(Main.Base.Int32, 36)
    const CONDITIONAL_JAPANESE_STARTER = const G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = Main.Base.convert(Main.Base.Int32, 37)
    const HEBREW_LETTER = const G_UNICODE_BREAK_HEBREW_LETTER = Main.Base.convert(Main.Base.Int32, 38)
    const REGIONAL_INDICATOR = const G_UNICODE_BREAK_REGIONAL_INDICATOR = Main.Base.convert(Main.Base.Int32, 39)
    const EMOJI_BASE = const G_UNICODE_BREAK_EMOJI_BASE = Main.Base.convert(Main.Base.Int32, 40)
    const EMOJI_MODIFIER = const G_UNICODE_BREAK_EMOJI_MODIFIER = Main.Base.convert(Main.Base.Int32, 41)
    const ZERO_WIDTH_JOINER = const G_UNICODE_BREAK_ZERO_WIDTH_JOINER = Main.Base.convert(Main.Base.Int32, 42)
    end)))
    $(Expr(:toplevel, :(baremodule GUnicodeScript
    const INVALID_CODE = const G_UNICODE_SCRIPT_INVALID_CODE = Main.Base.convert(Main.Base.Int32, -1)
    const COMMON = const G_UNICODE_SCRIPT_COMMON = Main.Base.convert(Main.Base.Int32, 0)
    const INHERITED = const G_UNICODE_SCRIPT_INHERITED = Main.Base.convert(Main.Base.Int32, 1)
    const ARABIC = const G_UNICODE_SCRIPT_ARABIC = Main.Base.convert(Main.Base.Int32, 2)
    const ARMENIAN = const G_UNICODE_SCRIPT_ARMENIAN = Main.Base.convert(Main.Base.Int32, 3)
    const BENGALI = const G_UNICODE_SCRIPT_BENGALI = Main.Base.convert(Main.Base.Int32, 4)
    const BOPOMOFO = const G_UNICODE_SCRIPT_BOPOMOFO = Main.Base.convert(Main.Base.Int32, 5)
    const CHEROKEE = const G_UNICODE_SCRIPT_CHEROKEE = Main.Base.convert(Main.Base.Int32, 6)
    const COPTIC = const G_UNICODE_SCRIPT_COPTIC = Main.Base.convert(Main.Base.Int32, 7)
    const CYRILLIC = const G_UNICODE_SCRIPT_CYRILLIC = Main.Base.convert(Main.Base.Int32, 8)
    const DESERET = const G_UNICODE_SCRIPT_DESERET = Main.Base.convert(Main.Base.Int32, 9)
    const DEVANAGARI = const G_UNICODE_SCRIPT_DEVANAGARI = Main.Base.convert(Main.Base.Int32, 10)
    const ETHIOPIC = const G_UNICODE_SCRIPT_ETHIOPIC = Main.Base.convert(Main.Base.Int32, 11)
    const GEORGIAN = const G_UNICODE_SCRIPT_GEORGIAN = Main.Base.convert(Main.Base.Int32, 12)
    const GOTHIC = const G_UNICODE_SCRIPT_GOTHIC = Main.Base.convert(Main.Base.Int32, 13)
    const GREEK = const G_UNICODE_SCRIPT_GREEK = Main.Base.convert(Main.Base.Int32, 14)
    const GUJARATI = const G_UNICODE_SCRIPT_GUJARATI = Main.Base.convert(Main.Base.Int32, 15)
    const GURMUKHI = const G_UNICODE_SCRIPT_GURMUKHI = Main.Base.convert(Main.Base.Int32, 16)
    const HAN = const G_UNICODE_SCRIPT_HAN = Main.Base.convert(Main.Base.Int32, 17)
    const HANGUL = const G_UNICODE_SCRIPT_HANGUL = Main.Base.convert(Main.Base.Int32, 18)
    const HEBREW = const G_UNICODE_SCRIPT_HEBREW = Main.Base.convert(Main.Base.Int32, 19)
    const HIRAGANA = const G_UNICODE_SCRIPT_HIRAGANA = Main.Base.convert(Main.Base.Int32, 20)
    const KANNADA = const G_UNICODE_SCRIPT_KANNADA = Main.Base.convert(Main.Base.Int32, 21)
    const KATAKANA = const G_UNICODE_SCRIPT_KATAKANA = Main.Base.convert(Main.Base.Int32, 22)
    const KHMER = const G_UNICODE_SCRIPT_KHMER = Main.Base.convert(Main.Base.Int32, 23)
    const LAO = const G_UNICODE_SCRIPT_LAO = Main.Base.convert(Main.Base.Int32, 24)
    const LATIN = const G_UNICODE_SCRIPT_LATIN = Main.Base.convert(Main.Base.Int32, 25)
    const MALAYALAM = const G_UNICODE_SCRIPT_MALAYALAM = Main.Base.convert(Main.Base.Int32, 26)
    const MONGOLIAN = const G_UNICODE_SCRIPT_MONGOLIAN = Main.Base.convert(Main.Base.Int32, 27)
    const MYANMAR = const G_UNICODE_SCRIPT_MYANMAR = Main.Base.convert(Main.Base.Int32, 28)
    const OGHAM = const G_UNICODE_SCRIPT_OGHAM = Main.Base.convert(Main.Base.Int32, 29)
    const OLD_ITALIC = const G_UNICODE_SCRIPT_OLD_ITALIC = Main.Base.convert(Main.Base.Int32, 30)
    const ORIYA = const G_UNICODE_SCRIPT_ORIYA = Main.Base.convert(Main.Base.Int32, 31)
    const RUNIC = const G_UNICODE_SCRIPT_RUNIC = Main.Base.convert(Main.Base.Int32, 32)
    const SINHALA = const G_UNICODE_SCRIPT_SINHALA = Main.Base.convert(Main.Base.Int32, 33)
    const SYRIAC = const G_UNICODE_SCRIPT_SYRIAC = Main.Base.convert(Main.Base.Int32, 34)
    const TAMIL = const G_UNICODE_SCRIPT_TAMIL = Main.Base.convert(Main.Base.Int32, 35)
    const TELUGU = const G_UNICODE_SCRIPT_TELUGU = Main.Base.convert(Main.Base.Int32, 36)
    const THAANA = const G_UNICODE_SCRIPT_THAANA = Main.Base.convert(Main.Base.Int32, 37)
    const THAI = const G_UNICODE_SCRIPT_THAI = Main.Base.convert(Main.Base.Int32, 38)
    const TIBETAN = const G_UNICODE_SCRIPT_TIBETAN = Main.Base.convert(Main.Base.Int32, 39)
    const CANADIAN_ABORIGINAL = const G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = Main.Base.convert(Main.Base.Int32, 40)
    const YI = const G_UNICODE_SCRIPT_YI = Main.Base.convert(Main.Base.Int32, 41)
    const TAGALOG = const G_UNICODE_SCRIPT_TAGALOG = Main.Base.convert(Main.Base.Int32, 42)
    const HANUNOO = const G_UNICODE_SCRIPT_HANUNOO = Main.Base.convert(Main.Base.Int32, 43)
    const BUHID = const G_UNICODE_SCRIPT_BUHID = Main.Base.convert(Main.Base.Int32, 44)
    const TAGBANWA = const G_UNICODE_SCRIPT_TAGBANWA = Main.Base.convert(Main.Base.Int32, 45)
    const BRAILLE = const G_UNICODE_SCRIPT_BRAILLE = Main.Base.convert(Main.Base.Int32, 46)
    const CYPRIOT = const G_UNICODE_SCRIPT_CYPRIOT = Main.Base.convert(Main.Base.Int32, 47)
    const LIMBU = const G_UNICODE_SCRIPT_LIMBU = Main.Base.convert(Main.Base.Int32, 48)
    const OSMANYA = const G_UNICODE_SCRIPT_OSMANYA = Main.Base.convert(Main.Base.Int32, 49)
    const SHAVIAN = const G_UNICODE_SCRIPT_SHAVIAN = Main.Base.convert(Main.Base.Int32, 50)
    const LINEAR_B = const G_UNICODE_SCRIPT_LINEAR_B = Main.Base.convert(Main.Base.Int32, 51)
    const TAI_LE = const G_UNICODE_SCRIPT_TAI_LE = Main.Base.convert(Main.Base.Int32, 52)
    const UGARITIC = const G_UNICODE_SCRIPT_UGARITIC = Main.Base.convert(Main.Base.Int32, 53)
    const NEW_TAI_LUE = const G_UNICODE_SCRIPT_NEW_TAI_LUE = Main.Base.convert(Main.Base.Int32, 54)
    const BUGINESE = const G_UNICODE_SCRIPT_BUGINESE = Main.Base.convert(Main.Base.Int32, 55)
    const GLAGOLITIC = const G_UNICODE_SCRIPT_GLAGOLITIC = Main.Base.convert(Main.Base.Int32, 56)
    const TIFINAGH = const G_UNICODE_SCRIPT_TIFINAGH = Main.Base.convert(Main.Base.Int32, 57)
    const SYLOTI_NAGRI = const G_UNICODE_SCRIPT_SYLOTI_NAGRI = Main.Base.convert(Main.Base.Int32, 58)
    const OLD_PERSIAN = const G_UNICODE_SCRIPT_OLD_PERSIAN = Main.Base.convert(Main.Base.Int32, 59)
    const KHAROSHTHI = const G_UNICODE_SCRIPT_KHAROSHTHI = Main.Base.convert(Main.Base.Int32, 60)
    const UNKNOWN = const G_UNICODE_SCRIPT_UNKNOWN = Main.Base.convert(Main.Base.Int32, 61)
    const BALINESE = const G_UNICODE_SCRIPT_BALINESE = Main.Base.convert(Main.Base.Int32, 62)
    const CUNEIFORM = const G_UNICODE_SCRIPT_CUNEIFORM = Main.Base.convert(Main.Base.Int32, 63)
    const PHOENICIAN = const G_UNICODE_SCRIPT_PHOENICIAN = Main.Base.convert(Main.Base.Int32, 64)
    const PHAGS_PA = const G_UNICODE_SCRIPT_PHAGS_PA = Main.Base.convert(Main.Base.Int32, 65)
    const NKO = const G_UNICODE_SCRIPT_NKO = Main.Base.convert(Main.Base.Int32, 66)
    const KAYAH_LI = const G_UNICODE_SCRIPT_KAYAH_LI = Main.Base.convert(Main.Base.Int32, 67)
    const LEPCHA = const G_UNICODE_SCRIPT_LEPCHA = Main.Base.convert(Main.Base.Int32, 68)
    const REJANG = const G_UNICODE_SCRIPT_REJANG = Main.Base.convert(Main.Base.Int32, 69)
    const SUNDANESE = const G_UNICODE_SCRIPT_SUNDANESE = Main.Base.convert(Main.Base.Int32, 70)
    const SAURASHTRA = const G_UNICODE_SCRIPT_SAURASHTRA = Main.Base.convert(Main.Base.Int32, 71)
    const CHAM = const G_UNICODE_SCRIPT_CHAM = Main.Base.convert(Main.Base.Int32, 72)
    const OL_CHIKI = const G_UNICODE_SCRIPT_OL_CHIKI = Main.Base.convert(Main.Base.Int32, 73)
    const VAI = const G_UNICODE_SCRIPT_VAI = Main.Base.convert(Main.Base.Int32, 74)
    const CARIAN = const G_UNICODE_SCRIPT_CARIAN = Main.Base.convert(Main.Base.Int32, 75)
    const LYCIAN = const G_UNICODE_SCRIPT_LYCIAN = Main.Base.convert(Main.Base.Int32, 76)
    const LYDIAN = const G_UNICODE_SCRIPT_LYDIAN = Main.Base.convert(Main.Base.Int32, 77)
    const AVESTAN = const G_UNICODE_SCRIPT_AVESTAN = Main.Base.convert(Main.Base.Int32, 78)
    const BAMUM = const G_UNICODE_SCRIPT_BAMUM = Main.Base.convert(Main.Base.Int32, 79)
    const EGYPTIAN_HIEROGLYPHS = const G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = Main.Base.convert(Main.Base.Int32, 80)
    const IMPERIAL_ARAMAIC = const G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = Main.Base.convert(Main.Base.Int32, 81)
    const INSCRIPTIONAL_PAHLAVI = const G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = Main.Base.convert(Main.Base.Int32, 82)
    const INSCRIPTIONAL_PARTHIAN = const G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = Main.Base.convert(Main.Base.Int32, 83)
    const JAVANESE = const G_UNICODE_SCRIPT_JAVANESE = Main.Base.convert(Main.Base.Int32, 84)
    const KAITHI = const G_UNICODE_SCRIPT_KAITHI = Main.Base.convert(Main.Base.Int32, 85)
    const LISU = const G_UNICODE_SCRIPT_LISU = Main.Base.convert(Main.Base.Int32, 86)
    const MEETEI_MAYEK = const G_UNICODE_SCRIPT_MEETEI_MAYEK = Main.Base.convert(Main.Base.Int32, 87)
    const OLD_SOUTH_ARABIAN = const G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = Main.Base.convert(Main.Base.Int32, 88)
    const OLD_TURKIC = const G_UNICODE_SCRIPT_OLD_TURKIC = Main.Base.convert(Main.Base.Int32, 89)
    const SAMARITAN = const G_UNICODE_SCRIPT_SAMARITAN = Main.Base.convert(Main.Base.Int32, 90)
    const TAI_THAM = const G_UNICODE_SCRIPT_TAI_THAM = Main.Base.convert(Main.Base.Int32, 91)
    const TAI_VIET = const G_UNICODE_SCRIPT_TAI_VIET = Main.Base.convert(Main.Base.Int32, 92)
    const BATAK = const G_UNICODE_SCRIPT_BATAK = Main.Base.convert(Main.Base.Int32, 93)
    const BRAHMI = const G_UNICODE_SCRIPT_BRAHMI = Main.Base.convert(Main.Base.Int32, 94)
    const MANDAIC = const G_UNICODE_SCRIPT_MANDAIC = Main.Base.convert(Main.Base.Int32, 95)
    const CHAKMA = const G_UNICODE_SCRIPT_CHAKMA = Main.Base.convert(Main.Base.Int32, 96)
    const MEROITIC_CURSIVE = const G_UNICODE_SCRIPT_MEROITIC_CURSIVE = Main.Base.convert(Main.Base.Int32, 97)
    const MEROITIC_HIEROGLYPHS = const G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = Main.Base.convert(Main.Base.Int32, 98)
    const MIAO = const G_UNICODE_SCRIPT_MIAO = Main.Base.convert(Main.Base.Int32, 99)
    const SHARADA = const G_UNICODE_SCRIPT_SHARADA = Main.Base.convert(Main.Base.Int32, 100)
    const SORA_SOMPENG = const G_UNICODE_SCRIPT_SORA_SOMPENG = Main.Base.convert(Main.Base.Int32, 101)
    const TAKRI = const G_UNICODE_SCRIPT_TAKRI = Main.Base.convert(Main.Base.Int32, 102)
    const BASSA_VAH = const G_UNICODE_SCRIPT_BASSA_VAH = Main.Base.convert(Main.Base.Int32, 103)
    const CAUCASIAN_ALBANIAN = const G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = Main.Base.convert(Main.Base.Int32, 104)
    const DUPLOYAN = const G_UNICODE_SCRIPT_DUPLOYAN = Main.Base.convert(Main.Base.Int32, 105)
    const ELBASAN = const G_UNICODE_SCRIPT_ELBASAN = Main.Base.convert(Main.Base.Int32, 106)
    const GRANTHA = const G_UNICODE_SCRIPT_GRANTHA = Main.Base.convert(Main.Base.Int32, 107)
    const KHOJKI = const G_UNICODE_SCRIPT_KHOJKI = Main.Base.convert(Main.Base.Int32, 108)
    const KHUDAWADI = const G_UNICODE_SCRIPT_KHUDAWADI = Main.Base.convert(Main.Base.Int32, 109)
    const LINEAR_A = const G_UNICODE_SCRIPT_LINEAR_A = Main.Base.convert(Main.Base.Int32, 110)
    const MAHAJANI = const G_UNICODE_SCRIPT_MAHAJANI = Main.Base.convert(Main.Base.Int32, 111)
    const MANICHAEAN = const G_UNICODE_SCRIPT_MANICHAEAN = Main.Base.convert(Main.Base.Int32, 112)
    const MENDE_KIKAKUI = const G_UNICODE_SCRIPT_MENDE_KIKAKUI = Main.Base.convert(Main.Base.Int32, 113)
    const MODI = const G_UNICODE_SCRIPT_MODI = Main.Base.convert(Main.Base.Int32, 114)
    const MRO = const G_UNICODE_SCRIPT_MRO = Main.Base.convert(Main.Base.Int32, 115)
    const NABATAEAN = const G_UNICODE_SCRIPT_NABATAEAN = Main.Base.convert(Main.Base.Int32, 116)
    const OLD_NORTH_ARABIAN = const G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = Main.Base.convert(Main.Base.Int32, 117)
    const OLD_PERMIC = const G_UNICODE_SCRIPT_OLD_PERMIC = Main.Base.convert(Main.Base.Int32, 118)
    const PAHAWH_HMONG = const G_UNICODE_SCRIPT_PAHAWH_HMONG = Main.Base.convert(Main.Base.Int32, 119)
    const PALMYRENE = const G_UNICODE_SCRIPT_PALMYRENE = Main.Base.convert(Main.Base.Int32, 120)
    const PAU_CIN_HAU = const G_UNICODE_SCRIPT_PAU_CIN_HAU = Main.Base.convert(Main.Base.Int32, 121)
    const PSALTER_PAHLAVI = const G_UNICODE_SCRIPT_PSALTER_PAHLAVI = Main.Base.convert(Main.Base.Int32, 122)
    const SIDDHAM = const G_UNICODE_SCRIPT_SIDDHAM = Main.Base.convert(Main.Base.Int32, 123)
    const TIRHUTA = const G_UNICODE_SCRIPT_TIRHUTA = Main.Base.convert(Main.Base.Int32, 124)
    const WARANG_CITI = const G_UNICODE_SCRIPT_WARANG_CITI = Main.Base.convert(Main.Base.Int32, 125)
    const AHOM = const G_UNICODE_SCRIPT_AHOM = Main.Base.convert(Main.Base.Int32, 126)
    const ANATOLIAN_HIEROGLYPHS = const G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = Main.Base.convert(Main.Base.Int32, 127)
    const HATRAN = const G_UNICODE_SCRIPT_HATRAN = Main.Base.convert(Main.Base.Int32, 128)
    const MULTANI = const G_UNICODE_SCRIPT_MULTANI = Main.Base.convert(Main.Base.Int32, 129)
    const OLD_HUNGARIAN = const G_UNICODE_SCRIPT_OLD_HUNGARIAN = Main.Base.convert(Main.Base.Int32, 130)
    const SIGNWRITING = const G_UNICODE_SCRIPT_SIGNWRITING = Main.Base.convert(Main.Base.Int32, 131)
    const ADLAM = const G_UNICODE_SCRIPT_ADLAM = Main.Base.convert(Main.Base.Int32, 132)
    const BHAIKSUKI = const G_UNICODE_SCRIPT_BHAIKSUKI = Main.Base.convert(Main.Base.Int32, 133)
    const MARCHEN = const G_UNICODE_SCRIPT_MARCHEN = Main.Base.convert(Main.Base.Int32, 134)
    const NEWA = const G_UNICODE_SCRIPT_NEWA = Main.Base.convert(Main.Base.Int32, 135)
    const OSAGE = const G_UNICODE_SCRIPT_OSAGE = Main.Base.convert(Main.Base.Int32, 136)
    const TANGUT = const G_UNICODE_SCRIPT_TANGUT = Main.Base.convert(Main.Base.Int32, 137)
    end)))
    $(Expr(:toplevel, :(baremodule GNormalizeMode
    const DEFAULT = const G_NORMALIZE_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const NFD = const G_NORMALIZE_NFD = Main.Base.convert(Main.Base.Int32, 0)
    const DEFAULT_COMPOSE = const G_NORMALIZE_DEFAULT_COMPOSE = Main.Base.convert(Main.Base.Int32, 1)
    const NFC = const G_NORMALIZE_NFC = Main.Base.convert(Main.Base.Int32, 1)
    const ALL = const G_NORMALIZE_ALL = Main.Base.convert(Main.Base.Int32, 2)
    const NFKD = const G_NORMALIZE_NFKD = Main.Base.convert(Main.Base.Int32, 2)
    const ALL_COMPOSE = const G_NORMALIZE_ALL_COMPOSE = Main.Base.convert(Main.Base.Int32, 3)
    const NFKC = const G_NORMALIZE_NFKC = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GIOError
    const NONE = const G_IO_ERROR_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const AGAIN = const G_IO_ERROR_AGAIN = Main.Base.convert(Main.Base.Int32, 1)
    const INVAL = const G_IO_ERROR_INVAL = Main.Base.convert(Main.Base.Int32, 2)
    const UNKNOWN = const G_IO_ERROR_UNKNOWN = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GIOChannelError
    const FBIG = const G_IO_CHANNEL_ERROR_FBIG = Main.Base.convert(Main.Base.Int32, 0)
    const INVAL = const G_IO_CHANNEL_ERROR_INVAL = Main.Base.convert(Main.Base.Int32, 1)
    const IO = const G_IO_CHANNEL_ERROR_IO = Main.Base.convert(Main.Base.Int32, 2)
    const ISDIR = const G_IO_CHANNEL_ERROR_ISDIR = Main.Base.convert(Main.Base.Int32, 3)
    const NOSPC = const G_IO_CHANNEL_ERROR_NOSPC = Main.Base.convert(Main.Base.Int32, 4)
    const NXIO = const G_IO_CHANNEL_ERROR_NXIO = Main.Base.convert(Main.Base.Int32, 5)
    const OVERFLOW = const G_IO_CHANNEL_ERROR_OVERFLOW = Main.Base.convert(Main.Base.Int32, 6)
    const PIPE = const G_IO_CHANNEL_ERROR_PIPE = Main.Base.convert(Main.Base.Int32, 7)
    const FAILED = const G_IO_CHANNEL_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GIOStatus
    const ERROR = const G_IO_STATUS_ERROR = Main.Base.convert(Main.Base.Int32, 0)
    const NORMAL = const G_IO_STATUS_NORMAL = Main.Base.convert(Main.Base.Int32, 1)
    const EOF = const G_IO_STATUS_EOF = Main.Base.convert(Main.Base.Int32, 2)
    const AGAIN = const G_IO_STATUS_AGAIN = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GSeekType
    const CUR = const G_SEEK_CUR = Main.Base.convert(Main.Base.Int32, 0)
    const SET = const G_SEEK_SET = Main.Base.convert(Main.Base.Int32, 1)
    const END = const G_SEEK_END = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GIOFlags
    const APPEND = const G_IO_FLAG_APPEND = Main.Base.convert(Main.Base.Int32, 1)
    const NONBLOCK = const G_IO_FLAG_NONBLOCK = Main.Base.convert(Main.Base.Int32, 2)
    const IS_READABLE = const G_IO_FLAG_IS_READABLE = Main.Base.convert(Main.Base.Int32, 4)
    const IS_WRITABLE = const G_IO_FLAG_IS_WRITABLE = Main.Base.convert(Main.Base.Int32, 8)
    const IS_WRITEABLE = const G_IO_FLAG_IS_WRITEABLE = Main.Base.convert(Main.Base.Int32, 8)
    const IS_SEEKABLE = const G_IO_FLAG_IS_SEEKABLE = Main.Base.convert(Main.Base.Int32, 16)
    const MASK = const G_IO_FLAG_MASK = Main.Base.convert(Main.Base.Int32, 31)
    const GET_MASK = const G_IO_FLAG_GET_MASK = Main.Base.convert(Main.Base.Int32, 31)
    const SET_MASK = const G_IO_FLAG_SET_MASK = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GKeyFileError
    const UNKNOWN_ENCODING = const G_KEY_FILE_ERROR_UNKNOWN_ENCODING = Main.Base.convert(Main.Base.Int32, 0)
    const PARSE = const G_KEY_FILE_ERROR_PARSE = Main.Base.convert(Main.Base.Int32, 1)
    const NOT_FOUND = const G_KEY_FILE_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 2)
    const KEY_NOT_FOUND = const G_KEY_FILE_ERROR_KEY_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 3)
    const GROUP_NOT_FOUND = const G_KEY_FILE_ERROR_GROUP_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 4)
    const INVALID_VALUE = const G_KEY_FILE_ERROR_INVALID_VALUE = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GKeyFileFlags
    const NONE = const G_KEY_FILE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const KEEP_COMMENTS = const G_KEY_FILE_KEEP_COMMENTS = Main.Base.convert(Main.Base.Int32, 1)
    const KEEP_TRANSLATIONS = const G_KEY_FILE_KEEP_TRANSLATIONS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GMarkupError
    const BAD_UTF8 = const G_MARKUP_ERROR_BAD_UTF8 = Main.Base.convert(Main.Base.Int32, 0)
    const EMPTY = const G_MARKUP_ERROR_EMPTY = Main.Base.convert(Main.Base.Int32, 1)
    const PARSE = const G_MARKUP_ERROR_PARSE = Main.Base.convert(Main.Base.Int32, 2)
    const UNKNOWN_ELEMENT = const G_MARKUP_ERROR_UNKNOWN_ELEMENT = Main.Base.convert(Main.Base.Int32, 3)
    const UNKNOWN_ATTRIBUTE = const G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = Main.Base.convert(Main.Base.Int32, 4)
    const INVALID_CONTENT = const G_MARKUP_ERROR_INVALID_CONTENT = Main.Base.convert(Main.Base.Int32, 5)
    const MISSING_ATTRIBUTE = const G_MARKUP_ERROR_MISSING_ATTRIBUTE = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GMarkupParseFlags
    const DO_NOT_USE_THIS_UNSUPPORTED_FLAG = const G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = Main.Base.convert(Main.Base.Int32, 1)
    const TREAT_CDATA_AS_TEXT = const G_MARKUP_TREAT_CDATA_AS_TEXT = Main.Base.convert(Main.Base.Int32, 2)
    const PREFIX_ERROR_POSITION = const G_MARKUP_PREFIX_ERROR_POSITION = Main.Base.convert(Main.Base.Int32, 4)
    const IGNORE_QUALIFIED = const G_MARKUP_IGNORE_QUALIFIED = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GMarkupCollectType
    const INVALID = const G_MARKUP_COLLECT_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const STRING = const G_MARKUP_COLLECT_STRING = Main.Base.convert(Main.Base.Int32, 1)
    const STRDUP = const G_MARKUP_COLLECT_STRDUP = Main.Base.convert(Main.Base.Int32, 2)
    const BOOLEAN = const G_MARKUP_COLLECT_BOOLEAN = Main.Base.convert(Main.Base.Int32, 3)
    const TRISTATE = const G_MARKUP_COLLECT_TRISTATE = Main.Base.convert(Main.Base.Int32, 4)
    const OPTIONAL = const G_MARKUP_COLLECT_OPTIONAL = Main.Base.convert(Main.Base.Int32, 65536)
    end)))
    $(Expr(:toplevel, :(baremodule GVariantClass
    const BOOLEAN = const G_VARIANT_CLASS_BOOLEAN = Main.Base.convert(Main.Base.Int32, 98)
    const BYTE = const G_VARIANT_CLASS_BYTE = Main.Base.convert(Main.Base.Int32, 121)
    const INT16 = const G_VARIANT_CLASS_INT16 = Main.Base.convert(Main.Base.Int32, 110)
    const UINT16 = const G_VARIANT_CLASS_UINT16 = Main.Base.convert(Main.Base.Int32, 113)
    const INT32 = const G_VARIANT_CLASS_INT32 = Main.Base.convert(Main.Base.Int32, 105)
    const UINT32 = const G_VARIANT_CLASS_UINT32 = Main.Base.convert(Main.Base.Int32, 117)
    const INT64 = const G_VARIANT_CLASS_INT64 = Main.Base.convert(Main.Base.Int32, 120)
    const UINT64 = const G_VARIANT_CLASS_UINT64 = Main.Base.convert(Main.Base.Int32, 116)
    const HANDLE = const G_VARIANT_CLASS_HANDLE = Main.Base.convert(Main.Base.Int32, 104)
    const DOUBLE = const G_VARIANT_CLASS_DOUBLE = Main.Base.convert(Main.Base.Int32, 100)
    const STRING = const G_VARIANT_CLASS_STRING = Main.Base.convert(Main.Base.Int32, 115)
    const OBJECT_PATH = const G_VARIANT_CLASS_OBJECT_PATH = Main.Base.convert(Main.Base.Int32, 111)
    const SIGNATURE = const G_VARIANT_CLASS_SIGNATURE = Main.Base.convert(Main.Base.Int32, 103)
    const VARIANT = const G_VARIANT_CLASS_VARIANT = Main.Base.convert(Main.Base.Int32, 118)
    const MAYBE = const G_VARIANT_CLASS_MAYBE = Main.Base.convert(Main.Base.Int32, 109)
    const ARRAY = const G_VARIANT_CLASS_ARRAY = Main.Base.convert(Main.Base.Int32, 97)
    const TUPLE = const G_VARIANT_CLASS_TUPLE = Main.Base.convert(Main.Base.Int32, 40)
    const DICT_ENTRY = const G_VARIANT_CLASS_DICT_ENTRY = Main.Base.convert(Main.Base.Int32, 123)
    end)))
    $(Expr(:toplevel, :(baremodule GVariantParseError
    const FAILED = const G_VARIANT_PARSE_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 0)
    const BASIC_TYPE_EXPECTED = const G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = Main.Base.convert(Main.Base.Int32, 1)
    const CANNOT_INFER_TYPE = const G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = Main.Base.convert(Main.Base.Int32, 2)
    const DEFINITE_TYPE_EXPECTED = const G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = Main.Base.convert(Main.Base.Int32, 3)
    const INPUT_NOT_AT_END = const G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = Main.Base.convert(Main.Base.Int32, 4)
    const INVALID_CHARACTER = const G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = Main.Base.convert(Main.Base.Int32, 5)
    const INVALID_FORMAT_STRING = const G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = Main.Base.convert(Main.Base.Int32, 6)
    const INVALID_OBJECT_PATH = const G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = Main.Base.convert(Main.Base.Int32, 7)
    const INVALID_SIGNATURE = const G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = Main.Base.convert(Main.Base.Int32, 8)
    const INVALID_TYPE_STRING = const G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = Main.Base.convert(Main.Base.Int32, 9)
    const NO_COMMON_TYPE = const G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = Main.Base.convert(Main.Base.Int32, 10)
    const NUMBER_OUT_OF_RANGE = const G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = Main.Base.convert(Main.Base.Int32, 11)
    const NUMBER_TOO_BIG = const G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = Main.Base.convert(Main.Base.Int32, 12)
    const TYPE_ERROR = const G_VARIANT_PARSE_ERROR_TYPE_ERROR = Main.Base.convert(Main.Base.Int32, 13)
    const UNEXPECTED_TOKEN = const G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = Main.Base.convert(Main.Base.Int32, 14)
    const UNKNOWN_KEYWORD = const G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = Main.Base.convert(Main.Base.Int32, 15)
    const UNTERMINATED_STRING_CONSTANT = const G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = Main.Base.convert(Main.Base.Int32, 16)
    const VALUE_EXPECTED = const G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = Main.Base.convert(Main.Base.Int32, 17)
    end)))
    $(Expr(:toplevel, :(baremodule GLogLevelFlags
    const FLAG_RECURSION = const G_LOG_FLAG_RECURSION = Main.Base.convert(Main.Base.Int32, 1)
    const FLAG_FATAL = const G_LOG_FLAG_FATAL = Main.Base.convert(Main.Base.Int32, 2)
    const LEVEL_ERROR = const G_LOG_LEVEL_ERROR = Main.Base.convert(Main.Base.Int32, 4)
    const LEVEL_CRITICAL = const G_LOG_LEVEL_CRITICAL = Main.Base.convert(Main.Base.Int32, 8)
    const LEVEL_WARNING = const G_LOG_LEVEL_WARNING = Main.Base.convert(Main.Base.Int32, 16)
    const LEVEL_MESSAGE = const G_LOG_LEVEL_MESSAGE = Main.Base.convert(Main.Base.Int32, 32)
    const LEVEL_INFO = const G_LOG_LEVEL_INFO = Main.Base.convert(Main.Base.Int32, 64)
    const LEVEL_DEBUG = const G_LOG_LEVEL_DEBUG = Main.Base.convert(Main.Base.Int32, 128)
    const LEVEL_MASK = const G_LOG_LEVEL_MASK = Main.Base.convert(Main.Base.Int32, -4)
    end)))
    $(Expr(:toplevel, :(baremodule GLogWriterOutput
    const HANDLED = const G_LOG_WRITER_HANDLED = Main.Base.convert(Main.Base.Int32, 1)
    const UNHANDLED = const G_LOG_WRITER_UNHANDLED = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GOptionFlags
    const NONE = const G_OPTION_FLAG_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const HIDDEN = const G_OPTION_FLAG_HIDDEN = Main.Base.convert(Main.Base.Int32, 1)
    const IN_MAIN = const G_OPTION_FLAG_IN_MAIN = Main.Base.convert(Main.Base.Int32, 2)
    const REVERSE = const G_OPTION_FLAG_REVERSE = Main.Base.convert(Main.Base.Int32, 4)
    const NO_ARG = const G_OPTION_FLAG_NO_ARG = Main.Base.convert(Main.Base.Int32, 8)
    const FILENAME = const G_OPTION_FLAG_FILENAME = Main.Base.convert(Main.Base.Int32, 16)
    const OPTIONAL_ARG = const G_OPTION_FLAG_OPTIONAL_ARG = Main.Base.convert(Main.Base.Int32, 32)
    const NOALIAS = const G_OPTION_FLAG_NOALIAS = Main.Base.convert(Main.Base.Int32, 64)
    end)))
    $(Expr(:toplevel, :(baremodule GOptionArg
    const NONE = const G_OPTION_ARG_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const STRING = const G_OPTION_ARG_STRING = Main.Base.convert(Main.Base.Int32, 1)
    const INT = const G_OPTION_ARG_INT = Main.Base.convert(Main.Base.Int32, 2)
    const CALLBACK = const G_OPTION_ARG_CALLBACK = Main.Base.convert(Main.Base.Int32, 3)
    const FILENAME = const G_OPTION_ARG_FILENAME = Main.Base.convert(Main.Base.Int32, 4)
    const STRING_ARRAY = const G_OPTION_ARG_STRING_ARRAY = Main.Base.convert(Main.Base.Int32, 5)
    const FILENAME_ARRAY = const G_OPTION_ARG_FILENAME_ARRAY = Main.Base.convert(Main.Base.Int32, 6)
    const DOUBLE = const G_OPTION_ARG_DOUBLE = Main.Base.convert(Main.Base.Int32, 7)
    const INT64 = const G_OPTION_ARG_INT64 = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GOptionError
    const UNKNOWN_OPTION = const G_OPTION_ERROR_UNKNOWN_OPTION = Main.Base.convert(Main.Base.Int32, 0)
    const BAD_VALUE = const G_OPTION_ERROR_BAD_VALUE = Main.Base.convert(Main.Base.Int32, 1)
    const FAILED = const G_OPTION_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GRegexError
    const COMPILE = const G_REGEX_ERROR_COMPILE = Main.Base.convert(Main.Base.Int32, 0)
    const OPTIMIZE = const G_REGEX_ERROR_OPTIMIZE = Main.Base.convert(Main.Base.Int32, 1)
    const REPLACE = const G_REGEX_ERROR_REPLACE = Main.Base.convert(Main.Base.Int32, 2)
    const MATCH = const G_REGEX_ERROR_MATCH = Main.Base.convert(Main.Base.Int32, 3)
    const INTERNAL = const G_REGEX_ERROR_INTERNAL = Main.Base.convert(Main.Base.Int32, 4)
    const STRAY_BACKSLASH = const G_REGEX_ERROR_STRAY_BACKSLASH = Main.Base.convert(Main.Base.Int32, 101)
    const MISSING_CONTROL_CHAR = const G_REGEX_ERROR_MISSING_CONTROL_CHAR = Main.Base.convert(Main.Base.Int32, 102)
    const UNRECOGNIZED_ESCAPE = const G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = Main.Base.convert(Main.Base.Int32, 103)
    const QUANTIFIERS_OUT_OF_ORDER = const G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = Main.Base.convert(Main.Base.Int32, 104)
    const QUANTIFIER_TOO_BIG = const G_REGEX_ERROR_QUANTIFIER_TOO_BIG = Main.Base.convert(Main.Base.Int32, 105)
    const UNTERMINATED_CHARACTER_CLASS = const G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = Main.Base.convert(Main.Base.Int32, 106)
    const INVALID_ESCAPE_IN_CHARACTER_CLASS = const G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = Main.Base.convert(Main.Base.Int32, 107)
    const RANGE_OUT_OF_ORDER = const G_REGEX_ERROR_RANGE_OUT_OF_ORDER = Main.Base.convert(Main.Base.Int32, 108)
    const NOTHING_TO_REPEAT = const G_REGEX_ERROR_NOTHING_TO_REPEAT = Main.Base.convert(Main.Base.Int32, 109)
    const UNRECOGNIZED_CHARACTER = const G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = Main.Base.convert(Main.Base.Int32, 112)
    const POSIX_NAMED_CLASS_OUTSIDE_CLASS = const G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = Main.Base.convert(Main.Base.Int32, 113)
    const UNMATCHED_PARENTHESIS = const G_REGEX_ERROR_UNMATCHED_PARENTHESIS = Main.Base.convert(Main.Base.Int32, 114)
    const INEXISTENT_SUBPATTERN_REFERENCE = const G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = Main.Base.convert(Main.Base.Int32, 115)
    const UNTERMINATED_COMMENT = const G_REGEX_ERROR_UNTERMINATED_COMMENT = Main.Base.convert(Main.Base.Int32, 118)
    const EXPRESSION_TOO_LARGE = const G_REGEX_ERROR_EXPRESSION_TOO_LARGE = Main.Base.convert(Main.Base.Int32, 120)
    const MEMORY_ERROR = const G_REGEX_ERROR_MEMORY_ERROR = Main.Base.convert(Main.Base.Int32, 121)
    const VARIABLE_LENGTH_LOOKBEHIND = const G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = Main.Base.convert(Main.Base.Int32, 125)
    const MALFORMED_CONDITION = const G_REGEX_ERROR_MALFORMED_CONDITION = Main.Base.convert(Main.Base.Int32, 126)
    const TOO_MANY_CONDITIONAL_BRANCHES = const G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = Main.Base.convert(Main.Base.Int32, 127)
    const ASSERTION_EXPECTED = const G_REGEX_ERROR_ASSERTION_EXPECTED = Main.Base.convert(Main.Base.Int32, 128)
    const UNKNOWN_POSIX_CLASS_NAME = const G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = Main.Base.convert(Main.Base.Int32, 130)
    const POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = const G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = Main.Base.convert(Main.Base.Int32, 131)
    const HEX_CODE_TOO_LARGE = const G_REGEX_ERROR_HEX_CODE_TOO_LARGE = Main.Base.convert(Main.Base.Int32, 134)
    const INVALID_CONDITION = const G_REGEX_ERROR_INVALID_CONDITION = Main.Base.convert(Main.Base.Int32, 135)
    const SINGLE_BYTE_MATCH_IN_LOOKBEHIND = const G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = Main.Base.convert(Main.Base.Int32, 136)
    const INFINITE_LOOP = const G_REGEX_ERROR_INFINITE_LOOP = Main.Base.convert(Main.Base.Int32, 140)
    const MISSING_SUBPATTERN_NAME_TERMINATOR = const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = Main.Base.convert(Main.Base.Int32, 142)
    const DUPLICATE_SUBPATTERN_NAME = const G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = Main.Base.convert(Main.Base.Int32, 143)
    const MALFORMED_PROPERTY = const G_REGEX_ERROR_MALFORMED_PROPERTY = Main.Base.convert(Main.Base.Int32, 146)
    const UNKNOWN_PROPERTY = const G_REGEX_ERROR_UNKNOWN_PROPERTY = Main.Base.convert(Main.Base.Int32, 147)
    const SUBPATTERN_NAME_TOO_LONG = const G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = Main.Base.convert(Main.Base.Int32, 148)
    const TOO_MANY_SUBPATTERNS = const G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = Main.Base.convert(Main.Base.Int32, 149)
    const INVALID_OCTAL_VALUE = const G_REGEX_ERROR_INVALID_OCTAL_VALUE = Main.Base.convert(Main.Base.Int32, 151)
    const TOO_MANY_BRANCHES_IN_DEFINE = const G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = Main.Base.convert(Main.Base.Int32, 154)
    const DEFINE_REPETION = const G_REGEX_ERROR_DEFINE_REPETION = Main.Base.convert(Main.Base.Int32, 155)
    const INCONSISTENT_NEWLINE_OPTIONS = const G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = Main.Base.convert(Main.Base.Int32, 156)
    const MISSING_BACK_REFERENCE = const G_REGEX_ERROR_MISSING_BACK_REFERENCE = Main.Base.convert(Main.Base.Int32, 157)
    const INVALID_RELATIVE_REFERENCE = const G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = Main.Base.convert(Main.Base.Int32, 158)
    const BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = Main.Base.convert(Main.Base.Int32, 159)
    const UNKNOWN_BACKTRACKING_CONTROL_VERB = const G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = Main.Base.convert(Main.Base.Int32, 160)
    const NUMBER_TOO_BIG = const G_REGEX_ERROR_NUMBER_TOO_BIG = Main.Base.convert(Main.Base.Int32, 161)
    const MISSING_SUBPATTERN_NAME = const G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = Main.Base.convert(Main.Base.Int32, 162)
    const MISSING_DIGIT = const G_REGEX_ERROR_MISSING_DIGIT = Main.Base.convert(Main.Base.Int32, 163)
    const INVALID_DATA_CHARACTER = const G_REGEX_ERROR_INVALID_DATA_CHARACTER = Main.Base.convert(Main.Base.Int32, 164)
    const EXTRA_SUBPATTERN_NAME = const G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = Main.Base.convert(Main.Base.Int32, 165)
    const BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = const G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = Main.Base.convert(Main.Base.Int32, 166)
    const INVALID_CONTROL_CHAR = const G_REGEX_ERROR_INVALID_CONTROL_CHAR = Main.Base.convert(Main.Base.Int32, 168)
    const MISSING_NAME = const G_REGEX_ERROR_MISSING_NAME = Main.Base.convert(Main.Base.Int32, 169)
    const NOT_SUPPORTED_IN_CLASS = const G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = Main.Base.convert(Main.Base.Int32, 171)
    const TOO_MANY_FORWARD_REFERENCES = const G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = Main.Base.convert(Main.Base.Int32, 172)
    const NAME_TOO_LONG = const G_REGEX_ERROR_NAME_TOO_LONG = Main.Base.convert(Main.Base.Int32, 175)
    const CHARACTER_VALUE_TOO_LARGE = const G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = Main.Base.convert(Main.Base.Int32, 176)
    end)))
    $(Expr(:toplevel, :(baremodule GRegexCompileFlags
    const CASELESS = const G_REGEX_CASELESS = Main.Base.convert(Main.Base.Int32, 1)
    const MULTILINE = const G_REGEX_MULTILINE = Main.Base.convert(Main.Base.Int32, 2)
    const DOTALL = const G_REGEX_DOTALL = Main.Base.convert(Main.Base.Int32, 4)
    const EXTENDED = const G_REGEX_EXTENDED = Main.Base.convert(Main.Base.Int32, 8)
    const ANCHORED = const G_REGEX_ANCHORED = Main.Base.convert(Main.Base.Int32, 16)
    const DOLLAR_ENDONLY = const G_REGEX_DOLLAR_ENDONLY = Main.Base.convert(Main.Base.Int32, 32)
    const UNGREEDY = const G_REGEX_UNGREEDY = Main.Base.convert(Main.Base.Int32, 512)
    const RAW = const G_REGEX_RAW = Main.Base.convert(Main.Base.Int32, 2048)
    const NO_AUTO_CAPTURE = const G_REGEX_NO_AUTO_CAPTURE = Main.Base.convert(Main.Base.Int32, 4096)
    const OPTIMIZE = const G_REGEX_OPTIMIZE = Main.Base.convert(Main.Base.Int32, 8192)
    const FIRSTLINE = const G_REGEX_FIRSTLINE = Main.Base.convert(Main.Base.Int32, 262144)
    const DUPNAMES = const G_REGEX_DUPNAMES = Main.Base.convert(Main.Base.Int32, 524288)
    const NEWLINE_CR = const G_REGEX_NEWLINE_CR = Main.Base.convert(Main.Base.Int32, 1048576)
    const NEWLINE_LF = const G_REGEX_NEWLINE_LF = Main.Base.convert(Main.Base.Int32, 2097152)
    const NEWLINE_CRLF = const G_REGEX_NEWLINE_CRLF = Main.Base.convert(Main.Base.Int32, 3145728)
    const NEWLINE_ANYCRLF = const G_REGEX_NEWLINE_ANYCRLF = Main.Base.convert(Main.Base.Int32, 5242880)
    const BSR_ANYCRLF = const G_REGEX_BSR_ANYCRLF = Main.Base.convert(Main.Base.Int32, 8388608)
    const JAVASCRIPT_COMPAT = const G_REGEX_JAVASCRIPT_COMPAT = Main.Base.convert(Main.Base.Int32, 33554432)
    end)))
    $(Expr(:toplevel, :(baremodule GRegexMatchFlags
    const ANCHORED = const G_REGEX_MATCH_ANCHORED = Main.Base.convert(Main.Base.Int32, 16)
    const NOTBOL = const G_REGEX_MATCH_NOTBOL = Main.Base.convert(Main.Base.Int32, 128)
    const NOTEOL = const G_REGEX_MATCH_NOTEOL = Main.Base.convert(Main.Base.Int32, 256)
    const NOTEMPTY = const G_REGEX_MATCH_NOTEMPTY = Main.Base.convert(Main.Base.Int32, 1024)
    const PARTIAL = const G_REGEX_MATCH_PARTIAL = Main.Base.convert(Main.Base.Int32, 32768)
    const NEWLINE_CR = const G_REGEX_MATCH_NEWLINE_CR = Main.Base.convert(Main.Base.Int32, 1048576)
    const NEWLINE_LF = const G_REGEX_MATCH_NEWLINE_LF = Main.Base.convert(Main.Base.Int32, 2097152)
    const NEWLINE_CRLF = const G_REGEX_MATCH_NEWLINE_CRLF = Main.Base.convert(Main.Base.Int32, 3145728)
    const NEWLINE_ANY = const G_REGEX_MATCH_NEWLINE_ANY = Main.Base.convert(Main.Base.Int32, 4194304)
    const NEWLINE_ANYCRLF = const G_REGEX_MATCH_NEWLINE_ANYCRLF = Main.Base.convert(Main.Base.Int32, 5242880)
    const BSR_ANYCRLF = const G_REGEX_MATCH_BSR_ANYCRLF = Main.Base.convert(Main.Base.Int32, 8388608)
    const BSR_ANY = const G_REGEX_MATCH_BSR_ANY = Main.Base.convert(Main.Base.Int32, 16777216)
    const PARTIAL_SOFT = const G_REGEX_MATCH_PARTIAL_SOFT = Main.Base.convert(Main.Base.Int32, 32768)
    const PARTIAL_HARD = const G_REGEX_MATCH_PARTIAL_HARD = Main.Base.convert(Main.Base.Int32, 134217728)
    const NOTEMPTY_ATSTART = const G_REGEX_MATCH_NOTEMPTY_ATSTART = Main.Base.convert(Main.Base.Int32, 268435456)
    end)))
    $(Expr(:toplevel, :(baremodule GErrorType
    const UNKNOWN = const G_ERR_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const UNEXP_EOF = const G_ERR_UNEXP_EOF = Main.Base.convert(Main.Base.Int32, 1)
    const UNEXP_EOF_IN_STRING = const G_ERR_UNEXP_EOF_IN_STRING = Main.Base.convert(Main.Base.Int32, 2)
    const UNEXP_EOF_IN_COMMENT = const G_ERR_UNEXP_EOF_IN_COMMENT = Main.Base.convert(Main.Base.Int32, 3)
    const NON_DIGIT_IN_CONST = const G_ERR_NON_DIGIT_IN_CONST = Main.Base.convert(Main.Base.Int32, 4)
    const DIGIT_RADIX = const G_ERR_DIGIT_RADIX = Main.Base.convert(Main.Base.Int32, 5)
    const FLOAT_RADIX = const G_ERR_FLOAT_RADIX = Main.Base.convert(Main.Base.Int32, 6)
    const FLOAT_MALFORMED = const G_ERR_FLOAT_MALFORMED = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GTokenType
    const EOF = const G_TOKEN_EOF = Main.Base.convert(Main.Base.Int32, 0)
    const LEFT_PAREN = const G_TOKEN_LEFT_PAREN = Main.Base.convert(Main.Base.Int32, 40)
    const RIGHT_PAREN = const G_TOKEN_RIGHT_PAREN = Main.Base.convert(Main.Base.Int32, 41)
    const LEFT_CURLY = const G_TOKEN_LEFT_CURLY = Main.Base.convert(Main.Base.Int32, 123)
    const RIGHT_CURLY = const G_TOKEN_RIGHT_CURLY = Main.Base.convert(Main.Base.Int32, 125)
    const LEFT_BRACE = const G_TOKEN_LEFT_BRACE = Main.Base.convert(Main.Base.Int32, 91)
    const RIGHT_BRACE = const G_TOKEN_RIGHT_BRACE = Main.Base.convert(Main.Base.Int32, 93)
    const EQUAL_SIGN = const G_TOKEN_EQUAL_SIGN = Main.Base.convert(Main.Base.Int32, 61)
    const COMMA = const G_TOKEN_COMMA = Main.Base.convert(Main.Base.Int32, 44)
    const NONE = const G_TOKEN_NONE = Main.Base.convert(Main.Base.Int32, 256)
    const ERROR = const G_TOKEN_ERROR = Main.Base.convert(Main.Base.Int32, 257)
    const CHAR = const G_TOKEN_CHAR = Main.Base.convert(Main.Base.Int32, 258)
    const BINARY = const G_TOKEN_BINARY = Main.Base.convert(Main.Base.Int32, 259)
    const OCTAL = const G_TOKEN_OCTAL = Main.Base.convert(Main.Base.Int32, 260)
    const INT = const G_TOKEN_INT = Main.Base.convert(Main.Base.Int32, 261)
    const HEX = const G_TOKEN_HEX = Main.Base.convert(Main.Base.Int32, 262)
    const FLOAT = const G_TOKEN_FLOAT = Main.Base.convert(Main.Base.Int32, 263)
    const STRING = const G_TOKEN_STRING = Main.Base.convert(Main.Base.Int32, 264)
    const SYMBOL = const G_TOKEN_SYMBOL = Main.Base.convert(Main.Base.Int32, 265)
    const IDENTIFIER = const G_TOKEN_IDENTIFIER = Main.Base.convert(Main.Base.Int32, 266)
    const IDENTIFIER_NULL = const G_TOKEN_IDENTIFIER_NULL = Main.Base.convert(Main.Base.Int32, 267)
    const COMMENT_SINGLE = const G_TOKEN_COMMENT_SINGLE = Main.Base.convert(Main.Base.Int32, 268)
    const COMMENT_MULTI = const G_TOKEN_COMMENT_MULTI = Main.Base.convert(Main.Base.Int32, 269)
    const LAST = const G_TOKEN_LAST = Main.Base.convert(Main.Base.Int32, 270)
    end)))
    $(Expr(:toplevel, :(baremodule GShellError
    const BAD_QUOTING = const G_SHELL_ERROR_BAD_QUOTING = Main.Base.convert(Main.Base.Int32, 0)
    const EMPTY_STRING = const G_SHELL_ERROR_EMPTY_STRING = Main.Base.convert(Main.Base.Int32, 1)
    const FAILED = const G_SHELL_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GSliceConfig
    const ALWAYS_MALLOC = const G_SLICE_CONFIG_ALWAYS_MALLOC = Main.Base.convert(Main.Base.Int32, 1)
    const BYPASS_MAGAZINES = const G_SLICE_CONFIG_BYPASS_MAGAZINES = Main.Base.convert(Main.Base.Int32, 2)
    const WORKING_SET_MSECS = const G_SLICE_CONFIG_WORKING_SET_MSECS = Main.Base.convert(Main.Base.Int32, 3)
    const COLOR_INCREMENT = const G_SLICE_CONFIG_COLOR_INCREMENT = Main.Base.convert(Main.Base.Int32, 4)
    const CHUNK_SIZES = const G_SLICE_CONFIG_CHUNK_SIZES = Main.Base.convert(Main.Base.Int32, 5)
    const CONTENTION_COUNTER = const G_SLICE_CONFIG_CONTENTION_COUNTER = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GSpawnError
    const FORK = const G_SPAWN_ERROR_FORK = Main.Base.convert(Main.Base.Int32, 0)
    const READ = const G_SPAWN_ERROR_READ = Main.Base.convert(Main.Base.Int32, 1)
    const CHDIR = const G_SPAWN_ERROR_CHDIR = Main.Base.convert(Main.Base.Int32, 2)
    const ACCES = const G_SPAWN_ERROR_ACCES = Main.Base.convert(Main.Base.Int32, 3)
    const PERM = const G_SPAWN_ERROR_PERM = Main.Base.convert(Main.Base.Int32, 4)
    const TOO_BIG = const G_SPAWN_ERROR_TOO_BIG = Main.Base.convert(Main.Base.Int32, 5)
    const G_SPAWN_ERROR_2BIG = Main.Base.convert(Main.Base.Int32, 5)
    const NOEXEC = const G_SPAWN_ERROR_NOEXEC = Main.Base.convert(Main.Base.Int32, 6)
    const NAMETOOLONG = const G_SPAWN_ERROR_NAMETOOLONG = Main.Base.convert(Main.Base.Int32, 7)
    const NOENT = const G_SPAWN_ERROR_NOENT = Main.Base.convert(Main.Base.Int32, 8)
    const NOMEM = const G_SPAWN_ERROR_NOMEM = Main.Base.convert(Main.Base.Int32, 9)
    const NOTDIR = const G_SPAWN_ERROR_NOTDIR = Main.Base.convert(Main.Base.Int32, 10)
    const LOOP = const G_SPAWN_ERROR_LOOP = Main.Base.convert(Main.Base.Int32, 11)
    const TXTBUSY = const G_SPAWN_ERROR_TXTBUSY = Main.Base.convert(Main.Base.Int32, 12)
    const IO = const G_SPAWN_ERROR_IO = Main.Base.convert(Main.Base.Int32, 13)
    const NFILE = const G_SPAWN_ERROR_NFILE = Main.Base.convert(Main.Base.Int32, 14)
    const MFILE = const G_SPAWN_ERROR_MFILE = Main.Base.convert(Main.Base.Int32, 15)
    const INVAL = const G_SPAWN_ERROR_INVAL = Main.Base.convert(Main.Base.Int32, 16)
    const ISDIR = const G_SPAWN_ERROR_ISDIR = Main.Base.convert(Main.Base.Int32, 17)
    const LIBBAD = const G_SPAWN_ERROR_LIBBAD = Main.Base.convert(Main.Base.Int32, 18)
    const FAILED = const G_SPAWN_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 19)
    end)))
    $(Expr(:toplevel, :(baremodule GSpawnFlags
    const DEFAULT = const G_SPAWN_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const LEAVE_DESCRIPTORS_OPEN = const G_SPAWN_LEAVE_DESCRIPTORS_OPEN = Main.Base.convert(Main.Base.Int32, 1)
    const DO_NOT_REAP_CHILD = const G_SPAWN_DO_NOT_REAP_CHILD = Main.Base.convert(Main.Base.Int32, 2)
    const SEARCH_PATH = const G_SPAWN_SEARCH_PATH = Main.Base.convert(Main.Base.Int32, 4)
    const STDOUT_TO_DEV_NULL = const G_SPAWN_STDOUT_TO_DEV_NULL = Main.Base.convert(Main.Base.Int32, 8)
    const STDERR_TO_DEV_NULL = const G_SPAWN_STDERR_TO_DEV_NULL = Main.Base.convert(Main.Base.Int32, 16)
    const CHILD_INHERITS_STDIN = const G_SPAWN_CHILD_INHERITS_STDIN = Main.Base.convert(Main.Base.Int32, 32)
    const FILE_AND_ARGV_ZERO = const G_SPAWN_FILE_AND_ARGV_ZERO = Main.Base.convert(Main.Base.Int32, 64)
    const SEARCH_PATH_FROM_ENVP = const G_SPAWN_SEARCH_PATH_FROM_ENVP = Main.Base.convert(Main.Base.Int32, 128)
    const CLOEXEC_PIPES = const G_SPAWN_CLOEXEC_PIPES = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GAsciiType
    const ALNUM = const G_ASCII_ALNUM = Main.Base.convert(Main.Base.Int32, 1)
    const ALPHA = const G_ASCII_ALPHA = Main.Base.convert(Main.Base.Int32, 2)
    const CNTRL = const G_ASCII_CNTRL = Main.Base.convert(Main.Base.Int32, 4)
    const DIGIT = const G_ASCII_DIGIT = Main.Base.convert(Main.Base.Int32, 8)
    const GRAPH = const G_ASCII_GRAPH = Main.Base.convert(Main.Base.Int32, 16)
    const LOWER = const G_ASCII_LOWER = Main.Base.convert(Main.Base.Int32, 32)
    const PRINT = const G_ASCII_PRINT = Main.Base.convert(Main.Base.Int32, 64)
    const PUNCT = const G_ASCII_PUNCT = Main.Base.convert(Main.Base.Int32, 128)
    const SPACE = const G_ASCII_SPACE = Main.Base.convert(Main.Base.Int32, 256)
    const UPPER = const G_ASCII_UPPER = Main.Base.convert(Main.Base.Int32, 512)
    const XDIGIT = const G_ASCII_XDIGIT = Main.Base.convert(Main.Base.Int32, 1024)
    end)))
    $(Expr(:toplevel, :(baremodule GTestTrapFlags
    const SILENCE_STDOUT = const G_TEST_TRAP_SILENCE_STDOUT = Main.Base.convert(Main.Base.Int32, 128)
    const SILENCE_STDERR = const G_TEST_TRAP_SILENCE_STDERR = Main.Base.convert(Main.Base.Int32, 256)
    const INHERIT_STDIN = const G_TEST_TRAP_INHERIT_STDIN = Main.Base.convert(Main.Base.Int32, 512)
    end)))
    $(Expr(:toplevel, :(baremodule GTestSubprocessFlags
    const STDIN = const G_TEST_SUBPROCESS_INHERIT_STDIN = Main.Base.convert(Main.Base.Int32, 1)
    const STDOUT = const G_TEST_SUBPROCESS_INHERIT_STDOUT = Main.Base.convert(Main.Base.Int32, 2)
    const STDERR = const G_TEST_SUBPROCESS_INHERIT_STDERR = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GTestLogType
    const NONE = const G_TEST_LOG_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const ERROR = const G_TEST_LOG_ERROR = Main.Base.convert(Main.Base.Int32, 1)
    const START_BINARY = const G_TEST_LOG_START_BINARY = Main.Base.convert(Main.Base.Int32, 2)
    const LIST_CASE = const G_TEST_LOG_LIST_CASE = Main.Base.convert(Main.Base.Int32, 3)
    const SKIP_CASE = const G_TEST_LOG_SKIP_CASE = Main.Base.convert(Main.Base.Int32, 4)
    const START_CASE = const G_TEST_LOG_START_CASE = Main.Base.convert(Main.Base.Int32, 5)
    const STOP_CASE = const G_TEST_LOG_STOP_CASE = Main.Base.convert(Main.Base.Int32, 6)
    const MIN_RESULT = const G_TEST_LOG_MIN_RESULT = Main.Base.convert(Main.Base.Int32, 7)
    const MAX_RESULT = const G_TEST_LOG_MAX_RESULT = Main.Base.convert(Main.Base.Int32, 8)
    const MESSAGE = const G_TEST_LOG_MESSAGE = Main.Base.convert(Main.Base.Int32, 9)
    const START_SUITE = const G_TEST_LOG_START_SUITE = Main.Base.convert(Main.Base.Int32, 10)
    const STOP_SUITE = const G_TEST_LOG_STOP_SUITE = Main.Base.convert(Main.Base.Int32, 11)
    end)))
    $(Expr(:toplevel, :(baremodule GTestFileType
    const DIST = const G_TEST_DIST = Main.Base.convert(Main.Base.Int32, 0)
    const BUILT = const G_TEST_BUILT = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GThreadPriority
    const LOW = const G_THREAD_PRIORITY_LOW = Main.Base.convert(Main.Base.Int32, 0)
    const NORMAL = const G_THREAD_PRIORITY_NORMAL = Main.Base.convert(Main.Base.Int32, 1)
    const HIGH = const G_THREAD_PRIORITY_HIGH = Main.Base.convert(Main.Base.Int32, 2)
    const URGENT = const G_THREAD_PRIORITY_URGENT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GTypeDebugFlags
    const NONE = const G_TYPE_DEBUG_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const OBJECTS = const G_TYPE_DEBUG_OBJECTS = Main.Base.convert(Main.Base.Int32, 1)
    const SIGNALS = const G_TYPE_DEBUG_SIGNALS = Main.Base.convert(Main.Base.Int32, 2)
    const INSTANCE_COUNT = const G_TYPE_DEBUG_INSTANCE_COUNT = Main.Base.convert(Main.Base.Int32, 4)
    const MASK = const G_TYPE_DEBUG_MASK = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GTypeFundamentalFlags
    const CLASSED = const G_TYPE_FLAG_CLASSED = Main.Base.convert(Main.Base.Int32, 1)
    const INSTANTIATABLE = const G_TYPE_FLAG_INSTANTIATABLE = Main.Base.convert(Main.Base.Int32, 2)
    const DERIVABLE = const G_TYPE_FLAG_DERIVABLE = Main.Base.convert(Main.Base.Int32, 4)
    const DEEP_DERIVABLE = const G_TYPE_FLAG_DEEP_DERIVABLE = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GTypeFlags
    const ABSTRACT = const G_TYPE_FLAG_ABSTRACT = Main.Base.convert(Main.Base.Int32, 16)
    const VALUE_ABSTRACT = const G_TYPE_FLAG_VALUE_ABSTRACT = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GParamFlags
    const READABLE = const G_PARAM_READABLE = Main.Base.convert(Main.Base.Int32, 1)
    const WRITABLE = const G_PARAM_WRITABLE = Main.Base.convert(Main.Base.Int32, 2)
    const READWRITE = const G_PARAM_READWRITE = Main.Base.convert(Main.Base.Int32, 3)
    const CONSTRUCT = const G_PARAM_CONSTRUCT = Main.Base.convert(Main.Base.Int32, 4)
    const CONSTRUCT_ONLY = const G_PARAM_CONSTRUCT_ONLY = Main.Base.convert(Main.Base.Int32, 8)
    const LAX_VALIDATION = const G_PARAM_LAX_VALIDATION = Main.Base.convert(Main.Base.Int32, 16)
    const STATIC_NAME = const G_PARAM_STATIC_NAME = Main.Base.convert(Main.Base.Int32, 32)
    const PRIVATE = const G_PARAM_PRIVATE = Main.Base.convert(Main.Base.Int32, 32)
    const STATIC_NICK = const G_PARAM_STATIC_NICK = Main.Base.convert(Main.Base.Int32, 64)
    const STATIC_BLURB = const G_PARAM_STATIC_BLURB = Main.Base.convert(Main.Base.Int32, 128)
    const EXPLICIT_NOTIFY = const G_PARAM_EXPLICIT_NOTIFY = Main.Base.convert(Main.Base.Int32, 1073741824)
    const DEPRECATED = const G_PARAM_DEPRECATED = Main.Base.convert(Main.Base.Int32, -2147483648)
    end)))
    $(Expr(:toplevel, :(baremodule GSignalFlags
    const RUN_FIRST = const G_SIGNAL_RUN_FIRST = Main.Base.convert(Main.Base.Int32, 1)
    const RUN_LAST = const G_SIGNAL_RUN_LAST = Main.Base.convert(Main.Base.Int32, 2)
    const RUN_CLEANUP = const G_SIGNAL_RUN_CLEANUP = Main.Base.convert(Main.Base.Int32, 4)
    const NO_RECURSE = const G_SIGNAL_NO_RECURSE = Main.Base.convert(Main.Base.Int32, 8)
    const DETAILED = const G_SIGNAL_DETAILED = Main.Base.convert(Main.Base.Int32, 16)
    const ACTION = const G_SIGNAL_ACTION = Main.Base.convert(Main.Base.Int32, 32)
    const NO_HOOKS = const G_SIGNAL_NO_HOOKS = Main.Base.convert(Main.Base.Int32, 64)
    const MUST_COLLECT = const G_SIGNAL_MUST_COLLECT = Main.Base.convert(Main.Base.Int32, 128)
    const DEPRECATED = const G_SIGNAL_DEPRECATED = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GConnectFlags
    const AFTER = const G_CONNECT_AFTER = Main.Base.convert(Main.Base.Int32, 1)
    const SWAPPED = const G_CONNECT_SWAPPED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GSignalMatchType
    const ID = const G_SIGNAL_MATCH_ID = Main.Base.convert(Main.Base.Int32, 1)
    const DETAIL = const G_SIGNAL_MATCH_DETAIL = Main.Base.convert(Main.Base.Int32, 2)
    const CLOSURE = const G_SIGNAL_MATCH_CLOSURE = Main.Base.convert(Main.Base.Int32, 4)
    const FUNC = const G_SIGNAL_MATCH_FUNC = Main.Base.convert(Main.Base.Int32, 8)
    const DATA = const G_SIGNAL_MATCH_DATA = Main.Base.convert(Main.Base.Int32, 16)
    const UNBLOCKED = const G_SIGNAL_MATCH_UNBLOCKED = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GBindingFlags
    const DEFAULT = const G_BINDING_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const BIDIRECTIONAL = const G_BINDING_BIDIRECTIONAL = Main.Base.convert(Main.Base.Int32, 1)
    const SYNC_CREATE = const G_BINDING_SYNC_CREATE = Main.Base.convert(Main.Base.Int32, 2)
    const INVERT_BOOLEAN = const G_BINDING_INVERT_BOOLEAN = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GAppInfoCreateFlags
    const NONE = const G_APP_INFO_CREATE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const NEEDS_TERMINAL = const G_APP_INFO_CREATE_NEEDS_TERMINAL = Main.Base.convert(Main.Base.Int32, 1)
    const SUPPORTS_URIS = const G_APP_INFO_CREATE_SUPPORTS_URIS = Main.Base.convert(Main.Base.Int32, 2)
    const SUPPORTS_STARTUP_NOTIFICATION = const G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GConverterFlags
    const NO_FLAGS = const G_CONVERTER_NO_FLAGS = Main.Base.convert(Main.Base.Int32, 0)
    const INPUT_AT_END = const G_CONVERTER_INPUT_AT_END = Main.Base.convert(Main.Base.Int32, 1)
    const FLUSH = const G_CONVERTER_FLUSH = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GConverterResult
    const ERROR = const G_CONVERTER_ERROR = Main.Base.convert(Main.Base.Int32, 0)
    const CONVERTED = const G_CONVERTER_CONVERTED = Main.Base.convert(Main.Base.Int32, 1)
    const FINISHED = const G_CONVERTER_FINISHED = Main.Base.convert(Main.Base.Int32, 2)
    const FLUSHED = const G_CONVERTER_FLUSHED = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GDataStreamByteOrder
    const BIG_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = Main.Base.convert(Main.Base.Int32, 0)
    const LITTLE_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = Main.Base.convert(Main.Base.Int32, 1)
    const HOST_ENDIAN = const G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDataStreamNewlineType
    const LF = const G_DATA_STREAM_NEWLINE_TYPE_LF = Main.Base.convert(Main.Base.Int32, 0)
    const CR = const G_DATA_STREAM_NEWLINE_TYPE_CR = Main.Base.convert(Main.Base.Int32, 1)
    const CR_LF = const G_DATA_STREAM_NEWLINE_TYPE_CR_LF = Main.Base.convert(Main.Base.Int32, 2)
    const ANY = const G_DATA_STREAM_NEWLINE_TYPE_ANY = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GFileAttributeType
    const INVALID = const G_FILE_ATTRIBUTE_TYPE_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const STRING = const G_FILE_ATTRIBUTE_TYPE_STRING = Main.Base.convert(Main.Base.Int32, 1)
    const BYTE_STRING = const G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = Main.Base.convert(Main.Base.Int32, 2)
    const BOOLEAN = const G_FILE_ATTRIBUTE_TYPE_BOOLEAN = Main.Base.convert(Main.Base.Int32, 3)
    const UINT32 = const G_FILE_ATTRIBUTE_TYPE_UINT32 = Main.Base.convert(Main.Base.Int32, 4)
    const INT32 = const G_FILE_ATTRIBUTE_TYPE_INT32 = Main.Base.convert(Main.Base.Int32, 5)
    const UINT64 = const G_FILE_ATTRIBUTE_TYPE_UINT64 = Main.Base.convert(Main.Base.Int32, 6)
    const INT64 = const G_FILE_ATTRIBUTE_TYPE_INT64 = Main.Base.convert(Main.Base.Int32, 7)
    const OBJECT = const G_FILE_ATTRIBUTE_TYPE_OBJECT = Main.Base.convert(Main.Base.Int32, 8)
    const STRINGV = const G_FILE_ATTRIBUTE_TYPE_STRINGV = Main.Base.convert(Main.Base.Int32, 9)
    end)))
    $(Expr(:toplevel, :(baremodule GFileAttributeInfoFlags
    const NONE = const G_FILE_ATTRIBUTE_INFO_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const COPY_WITH_FILE = const G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = Main.Base.convert(Main.Base.Int32, 1)
    const COPY_WHEN_MOVED = const G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GFileAttributeStatus
    const UNSET = const G_FILE_ATTRIBUTE_STATUS_UNSET = Main.Base.convert(Main.Base.Int32, 0)
    const SET = const G_FILE_ATTRIBUTE_STATUS_SET = Main.Base.convert(Main.Base.Int32, 1)
    const ERROR_SETTING = const G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GFileQueryInfoFlags
    const NONE = const G_FILE_QUERY_INFO_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const NOFOLLOW_SYMLINKS = const G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GFileCreateFlags
    const NONE = const G_FILE_CREATE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const PRIVATE = const G_FILE_CREATE_PRIVATE = Main.Base.convert(Main.Base.Int32, 1)
    const REPLACE_DESTINATION = const G_FILE_CREATE_REPLACE_DESTINATION = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GFileMeasureFlags
    const NONE = const G_FILE_MEASURE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const REPORT_ANY_ERROR = const G_FILE_MEASURE_REPORT_ANY_ERROR = Main.Base.convert(Main.Base.Int32, 2)
    const APPARENT_SIZE = const G_FILE_MEASURE_APPARENT_SIZE = Main.Base.convert(Main.Base.Int32, 4)
    const NO_XDEV = const G_FILE_MEASURE_NO_XDEV = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GMountMountFlags
    const NONE = const G_MOUNT_MOUNT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GMountUnmountFlags
    const NONE = const G_MOUNT_UNMOUNT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const FORCE = const G_MOUNT_UNMOUNT_FORCE = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GDriveStartFlags
    const NONE = const G_DRIVE_START_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GDriveStartStopType
    const UNKNOWN = const G_DRIVE_START_STOP_TYPE_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const SHUTDOWN = const G_DRIVE_START_STOP_TYPE_SHUTDOWN = Main.Base.convert(Main.Base.Int32, 1)
    const NETWORK = const G_DRIVE_START_STOP_TYPE_NETWORK = Main.Base.convert(Main.Base.Int32, 2)
    const MULTIDISK = const G_DRIVE_START_STOP_TYPE_MULTIDISK = Main.Base.convert(Main.Base.Int32, 3)
    const PASSWORD = const G_DRIVE_START_STOP_TYPE_PASSWORD = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GFileCopyFlags
    const NONE = const G_FILE_COPY_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const OVERWRITE = const G_FILE_COPY_OVERWRITE = Main.Base.convert(Main.Base.Int32, 1)
    const BACKUP = const G_FILE_COPY_BACKUP = Main.Base.convert(Main.Base.Int32, 2)
    const NOFOLLOW_SYMLINKS = const G_FILE_COPY_NOFOLLOW_SYMLINKS = Main.Base.convert(Main.Base.Int32, 4)
    const ALL_METADATA = const G_FILE_COPY_ALL_METADATA = Main.Base.convert(Main.Base.Int32, 8)
    const NO_FALLBACK_FOR_MOVE = const G_FILE_COPY_NO_FALLBACK_FOR_MOVE = Main.Base.convert(Main.Base.Int32, 16)
    const TARGET_DEFAULT_PERMS = const G_FILE_COPY_TARGET_DEFAULT_PERMS = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GFileMonitorFlags
    const NONE = const G_FILE_MONITOR_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const WATCH_MOUNTS = const G_FILE_MONITOR_WATCH_MOUNTS = Main.Base.convert(Main.Base.Int32, 1)
    const SEND_MOVED = const G_FILE_MONITOR_SEND_MOVED = Main.Base.convert(Main.Base.Int32, 2)
    const WATCH_HARD_LINKS = const G_FILE_MONITOR_WATCH_HARD_LINKS = Main.Base.convert(Main.Base.Int32, 4)
    const WATCH_MOVES = const G_FILE_MONITOR_WATCH_MOVES = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GFileType
    const UNKNOWN = const G_FILE_TYPE_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const REGULAR = const G_FILE_TYPE_REGULAR = Main.Base.convert(Main.Base.Int32, 1)
    const DIRECTORY = const G_FILE_TYPE_DIRECTORY = Main.Base.convert(Main.Base.Int32, 2)
    const SYMBOLIC_LINK = const G_FILE_TYPE_SYMBOLIC_LINK = Main.Base.convert(Main.Base.Int32, 3)
    const SPECIAL = const G_FILE_TYPE_SPECIAL = Main.Base.convert(Main.Base.Int32, 4)
    const SHORTCUT = const G_FILE_TYPE_SHORTCUT = Main.Base.convert(Main.Base.Int32, 5)
    const MOUNTABLE = const G_FILE_TYPE_MOUNTABLE = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GFilesystemPreviewType
    const IF_ALWAYS = const G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = Main.Base.convert(Main.Base.Int32, 0)
    const IF_LOCAL = const G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = Main.Base.convert(Main.Base.Int32, 1)
    const NEVER = const G_FILESYSTEM_PREVIEW_TYPE_NEVER = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GFileMonitorEvent
    const CHANGED = const G_FILE_MONITOR_EVENT_CHANGED = Main.Base.convert(Main.Base.Int32, 0)
    const CHANGES_DONE_HINT = const G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = Main.Base.convert(Main.Base.Int32, 1)
    const DELETED = const G_FILE_MONITOR_EVENT_DELETED = Main.Base.convert(Main.Base.Int32, 2)
    const CREATED = const G_FILE_MONITOR_EVENT_CREATED = Main.Base.convert(Main.Base.Int32, 3)
    const ATTRIBUTE_CHANGED = const G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = Main.Base.convert(Main.Base.Int32, 4)
    const PRE_UNMOUNT = const G_FILE_MONITOR_EVENT_PRE_UNMOUNT = Main.Base.convert(Main.Base.Int32, 5)
    const UNMOUNTED = const G_FILE_MONITOR_EVENT_UNMOUNTED = Main.Base.convert(Main.Base.Int32, 6)
    const MOVED = const G_FILE_MONITOR_EVENT_MOVED = Main.Base.convert(Main.Base.Int32, 7)
    const RENAMED = const G_FILE_MONITOR_EVENT_RENAMED = Main.Base.convert(Main.Base.Int32, 8)
    const MOVED_IN = const G_FILE_MONITOR_EVENT_MOVED_IN = Main.Base.convert(Main.Base.Int32, 9)
    const MOVED_OUT = const G_FILE_MONITOR_EVENT_MOVED_OUT = Main.Base.convert(Main.Base.Int32, 10)
    end)))
    $(Expr(:toplevel, :(baremodule GIOErrorEnum
    const FAILED = const G_IO_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 0)
    const NOT_FOUND = const G_IO_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 1)
    const EXISTS = const G_IO_ERROR_EXISTS = Main.Base.convert(Main.Base.Int32, 2)
    const IS_DIRECTORY = const G_IO_ERROR_IS_DIRECTORY = Main.Base.convert(Main.Base.Int32, 3)
    const NOT_DIRECTORY = const G_IO_ERROR_NOT_DIRECTORY = Main.Base.convert(Main.Base.Int32, 4)
    const NOT_EMPTY = const G_IO_ERROR_NOT_EMPTY = Main.Base.convert(Main.Base.Int32, 5)
    const NOT_REGULAR_FILE = const G_IO_ERROR_NOT_REGULAR_FILE = Main.Base.convert(Main.Base.Int32, 6)
    const NOT_SYMBOLIC_LINK = const G_IO_ERROR_NOT_SYMBOLIC_LINK = Main.Base.convert(Main.Base.Int32, 7)
    const NOT_MOUNTABLE_FILE = const G_IO_ERROR_NOT_MOUNTABLE_FILE = Main.Base.convert(Main.Base.Int32, 8)
    const FILENAME_TOO_LONG = const G_IO_ERROR_FILENAME_TOO_LONG = Main.Base.convert(Main.Base.Int32, 9)
    const INVALID_FILENAME = const G_IO_ERROR_INVALID_FILENAME = Main.Base.convert(Main.Base.Int32, 10)
    const TOO_MANY_LINKS = const G_IO_ERROR_TOO_MANY_LINKS = Main.Base.convert(Main.Base.Int32, 11)
    const NO_SPACE = const G_IO_ERROR_NO_SPACE = Main.Base.convert(Main.Base.Int32, 12)
    const INVALID_ARGUMENT = const G_IO_ERROR_INVALID_ARGUMENT = Main.Base.convert(Main.Base.Int32, 13)
    const PERMISSION_DENIED = const G_IO_ERROR_PERMISSION_DENIED = Main.Base.convert(Main.Base.Int32, 14)
    const NOT_SUPPORTED = const G_IO_ERROR_NOT_SUPPORTED = Main.Base.convert(Main.Base.Int32, 15)
    const NOT_MOUNTED = const G_IO_ERROR_NOT_MOUNTED = Main.Base.convert(Main.Base.Int32, 16)
    const ALREADY_MOUNTED = const G_IO_ERROR_ALREADY_MOUNTED = Main.Base.convert(Main.Base.Int32, 17)
    const CLOSED = const G_IO_ERROR_CLOSED = Main.Base.convert(Main.Base.Int32, 18)
    const CANCELLED = const G_IO_ERROR_CANCELLED = Main.Base.convert(Main.Base.Int32, 19)
    const PENDING = const G_IO_ERROR_PENDING = Main.Base.convert(Main.Base.Int32, 20)
    const READ_ONLY = const G_IO_ERROR_READ_ONLY = Main.Base.convert(Main.Base.Int32, 21)
    const CANT_CREATE_BACKUP = const G_IO_ERROR_CANT_CREATE_BACKUP = Main.Base.convert(Main.Base.Int32, 22)
    const WRONG_ETAG = const G_IO_ERROR_WRONG_ETAG = Main.Base.convert(Main.Base.Int32, 23)
    const TIMED_OUT = const G_IO_ERROR_TIMED_OUT = Main.Base.convert(Main.Base.Int32, 24)
    const WOULD_RECURSE = const G_IO_ERROR_WOULD_RECURSE = Main.Base.convert(Main.Base.Int32, 25)
    const BUSY = const G_IO_ERROR_BUSY = Main.Base.convert(Main.Base.Int32, 26)
    const WOULD_BLOCK = const G_IO_ERROR_WOULD_BLOCK = Main.Base.convert(Main.Base.Int32, 27)
    const HOST_NOT_FOUND = const G_IO_ERROR_HOST_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 28)
    const WOULD_MERGE = const G_IO_ERROR_WOULD_MERGE = Main.Base.convert(Main.Base.Int32, 29)
    const FAILED_HANDLED = const G_IO_ERROR_FAILED_HANDLED = Main.Base.convert(Main.Base.Int32, 30)
    const TOO_MANY_OPEN_FILES = const G_IO_ERROR_TOO_MANY_OPEN_FILES = Main.Base.convert(Main.Base.Int32, 31)
    const NOT_INITIALIZED = const G_IO_ERROR_NOT_INITIALIZED = Main.Base.convert(Main.Base.Int32, 32)
    const ADDRESS_IN_USE = const G_IO_ERROR_ADDRESS_IN_USE = Main.Base.convert(Main.Base.Int32, 33)
    const PARTIAL_INPUT = const G_IO_ERROR_PARTIAL_INPUT = Main.Base.convert(Main.Base.Int32, 34)
    const INVALID_DATA = const G_IO_ERROR_INVALID_DATA = Main.Base.convert(Main.Base.Int32, 35)
    const DBUS_ERROR = const G_IO_ERROR_DBUS_ERROR = Main.Base.convert(Main.Base.Int32, 36)
    const HOST_UNREACHABLE = const G_IO_ERROR_HOST_UNREACHABLE = Main.Base.convert(Main.Base.Int32, 37)
    const NETWORK_UNREACHABLE = const G_IO_ERROR_NETWORK_UNREACHABLE = Main.Base.convert(Main.Base.Int32, 38)
    const CONNECTION_REFUSED = const G_IO_ERROR_CONNECTION_REFUSED = Main.Base.convert(Main.Base.Int32, 39)
    const PROXY_FAILED = const G_IO_ERROR_PROXY_FAILED = Main.Base.convert(Main.Base.Int32, 40)
    const PROXY_AUTH_FAILED = const G_IO_ERROR_PROXY_AUTH_FAILED = Main.Base.convert(Main.Base.Int32, 41)
    const PROXY_NEED_AUTH = const G_IO_ERROR_PROXY_NEED_AUTH = Main.Base.convert(Main.Base.Int32, 42)
    const PROXY_NOT_ALLOWED = const G_IO_ERROR_PROXY_NOT_ALLOWED = Main.Base.convert(Main.Base.Int32, 43)
    const BROKEN_PIPE = const G_IO_ERROR_BROKEN_PIPE = Main.Base.convert(Main.Base.Int32, 44)
    const CONNECTION_CLOSED = const G_IO_ERROR_CONNECTION_CLOSED = Main.Base.convert(Main.Base.Int32, 44)
    const NOT_CONNECTED = const G_IO_ERROR_NOT_CONNECTED = Main.Base.convert(Main.Base.Int32, 45)
    const MESSAGE_TOO_LARGE = const G_IO_ERROR_MESSAGE_TOO_LARGE = Main.Base.convert(Main.Base.Int32, 46)
    end)))
    $(Expr(:toplevel, :(baremodule GAskPasswordFlags
    const NEED_PASSWORD = const G_ASK_PASSWORD_NEED_PASSWORD = Main.Base.convert(Main.Base.Int32, 1)
    const NEED_USERNAME = const G_ASK_PASSWORD_NEED_USERNAME = Main.Base.convert(Main.Base.Int32, 2)
    const NEED_DOMAIN = const G_ASK_PASSWORD_NEED_DOMAIN = Main.Base.convert(Main.Base.Int32, 4)
    const SAVING_SUPPORTED = const G_ASK_PASSWORD_SAVING_SUPPORTED = Main.Base.convert(Main.Base.Int32, 8)
    const ANONYMOUS_SUPPORTED = const G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = Main.Base.convert(Main.Base.Int32, 16)
    end)))
    $(Expr(:toplevel, :(baremodule GPasswordSave
    const NEVER = const G_PASSWORD_SAVE_NEVER = Main.Base.convert(Main.Base.Int32, 0)
    const FOR_SESSION = const G_PASSWORD_SAVE_FOR_SESSION = Main.Base.convert(Main.Base.Int32, 1)
    const PERMANENTLY = const G_PASSWORD_SAVE_PERMANENTLY = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GMountOperationResult
    const HANDLED = const G_MOUNT_OPERATION_HANDLED = Main.Base.convert(Main.Base.Int32, 0)
    const ABORTED = const G_MOUNT_OPERATION_ABORTED = Main.Base.convert(Main.Base.Int32, 1)
    const UNHANDLED = const G_MOUNT_OPERATION_UNHANDLED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GOutputStreamSpliceFlags
    const NONE = const G_OUTPUT_STREAM_SPLICE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CLOSE_SOURCE = const G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = Main.Base.convert(Main.Base.Int32, 1)
    const CLOSE_TARGET = const G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GIOStreamSpliceFlags
    const NONE = const G_IO_STREAM_SPLICE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CLOSE_STREAM1 = const G_IO_STREAM_SPLICE_CLOSE_STREAM1 = Main.Base.convert(Main.Base.Int32, 1)
    const CLOSE_STREAM2 = const G_IO_STREAM_SPLICE_CLOSE_STREAM2 = Main.Base.convert(Main.Base.Int32, 2)
    const WAIT_FOR_BOTH = const G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GEmblemOrigin
    const UNKNOWN = const G_EMBLEM_ORIGIN_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const DEVICE = const G_EMBLEM_ORIGIN_DEVICE = Main.Base.convert(Main.Base.Int32, 1)
    const LIVEMETADATA = const G_EMBLEM_ORIGIN_LIVEMETADATA = Main.Base.convert(Main.Base.Int32, 2)
    const TAG = const G_EMBLEM_ORIGIN_TAG = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GResolverError
    const NOT_FOUND = const G_RESOLVER_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 0)
    const TEMPORARY_FAILURE = const G_RESOLVER_ERROR_TEMPORARY_FAILURE = Main.Base.convert(Main.Base.Int32, 1)
    const INTERNAL = const G_RESOLVER_ERROR_INTERNAL = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GResolverRecordType
    const SRV = const G_RESOLVER_RECORD_SRV = Main.Base.convert(Main.Base.Int32, 1)
    const MX = const G_RESOLVER_RECORD_MX = Main.Base.convert(Main.Base.Int32, 2)
    const TXT = const G_RESOLVER_RECORD_TXT = Main.Base.convert(Main.Base.Int32, 3)
    const SOA = const G_RESOLVER_RECORD_SOA = Main.Base.convert(Main.Base.Int32, 4)
    const NS = const G_RESOLVER_RECORD_NS = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GResourceError
    const NOT_FOUND = const G_RESOURCE_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 0)
    const INTERNAL = const G_RESOURCE_ERROR_INTERNAL = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GResourceFlags
    const NONE = const G_RESOURCE_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const COMPRESSED = const G_RESOURCE_FLAGS_COMPRESSED = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GResourceLookupFlags
    const NONE = const G_RESOURCE_LOOKUP_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketFamily
    const INVALID = const G_SOCKET_FAMILY_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const UNIX = const G_SOCKET_FAMILY_UNIX = Main.Base.convert(Main.Base.Int32, 1)
    const IPV4 = const G_SOCKET_FAMILY_IPV4 = Main.Base.convert(Main.Base.Int32, 2)
    const IPV6 = const G_SOCKET_FAMILY_IPV6 = Main.Base.convert(Main.Base.Int32, 10)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketType
    const INVALID = const G_SOCKET_TYPE_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const STREAM = const G_SOCKET_TYPE_STREAM = Main.Base.convert(Main.Base.Int32, 1)
    const DATAGRAM = const G_SOCKET_TYPE_DATAGRAM = Main.Base.convert(Main.Base.Int32, 2)
    const SEQPACKET = const G_SOCKET_TYPE_SEQPACKET = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketMsgFlags
    const NONE = const G_SOCKET_MSG_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const OOB = const G_SOCKET_MSG_OOB = Main.Base.convert(Main.Base.Int32, 1)
    const PEEK = const G_SOCKET_MSG_PEEK = Main.Base.convert(Main.Base.Int32, 2)
    const DONTROUTE = const G_SOCKET_MSG_DONTROUTE = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketProtocol
    const UNKNOWN = const G_SOCKET_PROTOCOL_UNKNOWN = Main.Base.convert(Main.Base.Int32, -1)
    const DEFAULT = const G_SOCKET_PROTOCOL_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const TCP = const G_SOCKET_PROTOCOL_TCP = Main.Base.convert(Main.Base.Int32, 6)
    const UDP = const G_SOCKET_PROTOCOL_UDP = Main.Base.convert(Main.Base.Int32, 17)
    const SCTP = const G_SOCKET_PROTOCOL_SCTP = Main.Base.convert(Main.Base.Int32, 132)
    end)))
    $(Expr(:toplevel, :(baremodule GZlibCompressorFormat
    const ZLIB = const G_ZLIB_COMPRESSOR_FORMAT_ZLIB = Main.Base.convert(Main.Base.Int32, 0)
    const GZIP = const G_ZLIB_COMPRESSOR_FORMAT_GZIP = Main.Base.convert(Main.Base.Int32, 1)
    const RAW = const G_ZLIB_COMPRESSOR_FORMAT_RAW = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GUnixSocketAddressType
    const INVALID = const G_UNIX_SOCKET_ADDRESS_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const ANONYMOUS = const G_UNIX_SOCKET_ADDRESS_ANONYMOUS = Main.Base.convert(Main.Base.Int32, 1)
    const PATH = const G_UNIX_SOCKET_ADDRESS_PATH = Main.Base.convert(Main.Base.Int32, 2)
    const ABSTRACT = const G_UNIX_SOCKET_ADDRESS_ABSTRACT = Main.Base.convert(Main.Base.Int32, 3)
    const ABSTRACT_PADDED = const G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GBusType
    const STARTER = const G_BUS_TYPE_STARTER = Main.Base.convert(Main.Base.Int32, -1)
    const NONE = const G_BUS_TYPE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const SYSTEM = const G_BUS_TYPE_SYSTEM = Main.Base.convert(Main.Base.Int32, 1)
    const SESSION = const G_BUS_TYPE_SESSION = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GBusNameOwnerFlags
    const NONE = const G_BUS_NAME_OWNER_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const ALLOW_REPLACEMENT = const G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = Main.Base.convert(Main.Base.Int32, 1)
    const REPLACE = const G_BUS_NAME_OWNER_FLAGS_REPLACE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GBusNameWatcherFlags
    const NONE = const G_BUS_NAME_WATCHER_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const AUTO_START = const G_BUS_NAME_WATCHER_FLAGS_AUTO_START = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusProxyFlags
    const NONE = const G_DBUS_PROXY_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const DO_NOT_LOAD_PROPERTIES = const G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = Main.Base.convert(Main.Base.Int32, 1)
    const DO_NOT_CONNECT_SIGNALS = const G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = Main.Base.convert(Main.Base.Int32, 2)
    const DO_NOT_AUTO_START = const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = Main.Base.convert(Main.Base.Int32, 4)
    const GET_INVALIDATED_PROPERTIES = const G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = Main.Base.convert(Main.Base.Int32, 8)
    const DO_NOT_AUTO_START_AT_CONSTRUCTION = const G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = Main.Base.convert(Main.Base.Int32, 16)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusError
    const FAILED = const G_DBUS_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 0)
    const NO_MEMORY = const G_DBUS_ERROR_NO_MEMORY = Main.Base.convert(Main.Base.Int32, 1)
    const SERVICE_UNKNOWN = const G_DBUS_ERROR_SERVICE_UNKNOWN = Main.Base.convert(Main.Base.Int32, 2)
    const NAME_HAS_NO_OWNER = const G_DBUS_ERROR_NAME_HAS_NO_OWNER = Main.Base.convert(Main.Base.Int32, 3)
    const NO_REPLY = const G_DBUS_ERROR_NO_REPLY = Main.Base.convert(Main.Base.Int32, 4)
    const IO_ERROR = const G_DBUS_ERROR_IO_ERROR = Main.Base.convert(Main.Base.Int32, 5)
    const BAD_ADDRESS = const G_DBUS_ERROR_BAD_ADDRESS = Main.Base.convert(Main.Base.Int32, 6)
    const NOT_SUPPORTED = const G_DBUS_ERROR_NOT_SUPPORTED = Main.Base.convert(Main.Base.Int32, 7)
    const LIMITS_EXCEEDED = const G_DBUS_ERROR_LIMITS_EXCEEDED = Main.Base.convert(Main.Base.Int32, 8)
    const ACCESS_DENIED = const G_DBUS_ERROR_ACCESS_DENIED = Main.Base.convert(Main.Base.Int32, 9)
    const AUTH_FAILED = const G_DBUS_ERROR_AUTH_FAILED = Main.Base.convert(Main.Base.Int32, 10)
    const NO_SERVER = const G_DBUS_ERROR_NO_SERVER = Main.Base.convert(Main.Base.Int32, 11)
    const TIMEOUT = const G_DBUS_ERROR_TIMEOUT = Main.Base.convert(Main.Base.Int32, 12)
    const NO_NETWORK = const G_DBUS_ERROR_NO_NETWORK = Main.Base.convert(Main.Base.Int32, 13)
    const ADDRESS_IN_USE = const G_DBUS_ERROR_ADDRESS_IN_USE = Main.Base.convert(Main.Base.Int32, 14)
    const DISCONNECTED = const G_DBUS_ERROR_DISCONNECTED = Main.Base.convert(Main.Base.Int32, 15)
    const INVALID_ARGS = const G_DBUS_ERROR_INVALID_ARGS = Main.Base.convert(Main.Base.Int32, 16)
    const FILE_NOT_FOUND = const G_DBUS_ERROR_FILE_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 17)
    const FILE_EXISTS = const G_DBUS_ERROR_FILE_EXISTS = Main.Base.convert(Main.Base.Int32, 18)
    const UNKNOWN_METHOD = const G_DBUS_ERROR_UNKNOWN_METHOD = Main.Base.convert(Main.Base.Int32, 19)
    const TIMED_OUT = const G_DBUS_ERROR_TIMED_OUT = Main.Base.convert(Main.Base.Int32, 20)
    const MATCH_RULE_NOT_FOUND = const G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 21)
    const MATCH_RULE_INVALID = const G_DBUS_ERROR_MATCH_RULE_INVALID = Main.Base.convert(Main.Base.Int32, 22)
    const SPAWN_EXEC_FAILED = const G_DBUS_ERROR_SPAWN_EXEC_FAILED = Main.Base.convert(Main.Base.Int32, 23)
    const SPAWN_FORK_FAILED = const G_DBUS_ERROR_SPAWN_FORK_FAILED = Main.Base.convert(Main.Base.Int32, 24)
    const SPAWN_CHILD_EXITED = const G_DBUS_ERROR_SPAWN_CHILD_EXITED = Main.Base.convert(Main.Base.Int32, 25)
    const SPAWN_CHILD_SIGNALED = const G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = Main.Base.convert(Main.Base.Int32, 26)
    const SPAWN_FAILED = const G_DBUS_ERROR_SPAWN_FAILED = Main.Base.convert(Main.Base.Int32, 27)
    const SPAWN_SETUP_FAILED = const G_DBUS_ERROR_SPAWN_SETUP_FAILED = Main.Base.convert(Main.Base.Int32, 28)
    const SPAWN_CONFIG_INVALID = const G_DBUS_ERROR_SPAWN_CONFIG_INVALID = Main.Base.convert(Main.Base.Int32, 29)
    const SPAWN_SERVICE_INVALID = const G_DBUS_ERROR_SPAWN_SERVICE_INVALID = Main.Base.convert(Main.Base.Int32, 30)
    const SPAWN_SERVICE_NOT_FOUND = const G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 31)
    const SPAWN_PERMISSIONS_INVALID = const G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = Main.Base.convert(Main.Base.Int32, 32)
    const SPAWN_FILE_INVALID = const G_DBUS_ERROR_SPAWN_FILE_INVALID = Main.Base.convert(Main.Base.Int32, 33)
    const SPAWN_NO_MEMORY = const G_DBUS_ERROR_SPAWN_NO_MEMORY = Main.Base.convert(Main.Base.Int32, 34)
    const UNIX_PROCESS_ID_UNKNOWN = const G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = Main.Base.convert(Main.Base.Int32, 35)
    const INVALID_SIGNATURE = const G_DBUS_ERROR_INVALID_SIGNATURE = Main.Base.convert(Main.Base.Int32, 36)
    const INVALID_FILE_CONTENT = const G_DBUS_ERROR_INVALID_FILE_CONTENT = Main.Base.convert(Main.Base.Int32, 37)
    const SELINUX_SECURITY_CONTEXT_UNKNOWN = const G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = Main.Base.convert(Main.Base.Int32, 38)
    const ADT_AUDIT_DATA_UNKNOWN = const G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = Main.Base.convert(Main.Base.Int32, 39)
    const OBJECT_PATH_IN_USE = const G_DBUS_ERROR_OBJECT_PATH_IN_USE = Main.Base.convert(Main.Base.Int32, 40)
    const UNKNOWN_OBJECT = const G_DBUS_ERROR_UNKNOWN_OBJECT = Main.Base.convert(Main.Base.Int32, 41)
    const UNKNOWN_INTERFACE = const G_DBUS_ERROR_UNKNOWN_INTERFACE = Main.Base.convert(Main.Base.Int32, 42)
    const UNKNOWN_PROPERTY = const G_DBUS_ERROR_UNKNOWN_PROPERTY = Main.Base.convert(Main.Base.Int32, 43)
    const PROPERTY_READ_ONLY = const G_DBUS_ERROR_PROPERTY_READ_ONLY = Main.Base.convert(Main.Base.Int32, 44)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusConnectionFlags
    const NONE = const G_DBUS_CONNECTION_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const AUTHENTICATION_CLIENT = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = Main.Base.convert(Main.Base.Int32, 1)
    const AUTHENTICATION_SERVER = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = Main.Base.convert(Main.Base.Int32, 2)
    const AUTHENTICATION_ALLOW_ANONYMOUS = const G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = Main.Base.convert(Main.Base.Int32, 4)
    const MESSAGE_BUS_CONNECTION = const G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = Main.Base.convert(Main.Base.Int32, 8)
    const DELAY_MESSAGE_PROCESSING = const G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = Main.Base.convert(Main.Base.Int32, 16)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusCapabilityFlags
    const NONE = const G_DBUS_CAPABILITY_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const UNIX_FD_PASSING = const G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusCallFlags
    const NONE = const G_DBUS_CALL_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const NO_AUTO_START = const G_DBUS_CALL_FLAGS_NO_AUTO_START = Main.Base.convert(Main.Base.Int32, 1)
    const ALLOW_INTERACTIVE_AUTHORIZATION = const G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusMessageType
    const INVALID = const G_DBUS_MESSAGE_TYPE_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const METHOD_CALL = const G_DBUS_MESSAGE_TYPE_METHOD_CALL = Main.Base.convert(Main.Base.Int32, 1)
    const METHOD_RETURN = const G_DBUS_MESSAGE_TYPE_METHOD_RETURN = Main.Base.convert(Main.Base.Int32, 2)
    const ERROR = const G_DBUS_MESSAGE_TYPE_ERROR = Main.Base.convert(Main.Base.Int32, 3)
    const SIGNAL = const G_DBUS_MESSAGE_TYPE_SIGNAL = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusMessageFlags
    const NONE = const G_DBUS_MESSAGE_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const NO_REPLY_EXPECTED = const G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = Main.Base.convert(Main.Base.Int32, 1)
    const NO_AUTO_START = const G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = Main.Base.convert(Main.Base.Int32, 2)
    const ALLOW_INTERACTIVE_AUTHORIZATION = const G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusMessageHeaderField
    const INVALID = const G_DBUS_MESSAGE_HEADER_FIELD_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const PATH = const G_DBUS_MESSAGE_HEADER_FIELD_PATH = Main.Base.convert(Main.Base.Int32, 1)
    const INTERFACE = const G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = Main.Base.convert(Main.Base.Int32, 2)
    const MEMBER = const G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = Main.Base.convert(Main.Base.Int32, 3)
    const ERROR_NAME = const G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = Main.Base.convert(Main.Base.Int32, 4)
    const REPLY_SERIAL = const G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = Main.Base.convert(Main.Base.Int32, 5)
    const DESTINATION = const G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = Main.Base.convert(Main.Base.Int32, 6)
    const SENDER = const G_DBUS_MESSAGE_HEADER_FIELD_SENDER = Main.Base.convert(Main.Base.Int32, 7)
    const SIGNATURE = const G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = Main.Base.convert(Main.Base.Int32, 8)
    const NUM_UNIX_FDS = const G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = Main.Base.convert(Main.Base.Int32, 9)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusPropertyInfoFlags
    const NONE = const G_DBUS_PROPERTY_INFO_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const READABLE = const G_DBUS_PROPERTY_INFO_FLAGS_READABLE = Main.Base.convert(Main.Base.Int32, 1)
    const WRITABLE = const G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusSubtreeFlags
    const NONE = const G_DBUS_SUBTREE_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const DISPATCH_TO_UNENUMERATED_NODES = const G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusServerFlags
    const NONE = const G_DBUS_SERVER_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const RUN_IN_THREAD = const G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = Main.Base.convert(Main.Base.Int32, 1)
    const AUTHENTICATION_ALLOW_ANONYMOUS = const G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusSignalFlags
    const NONE = const G_DBUS_SIGNAL_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const NO_MATCH_RULE = const G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = Main.Base.convert(Main.Base.Int32, 1)
    const MATCH_ARG0_NAMESPACE = const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = Main.Base.convert(Main.Base.Int32, 2)
    const MATCH_ARG0_PATH = const G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusSendMessageFlags
    const NONE = const G_DBUS_SEND_MESSAGE_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const PRESERVE_SERIAL = const G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GCredentialsType
    const INVALID = const G_CREDENTIALS_TYPE_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const LINUX_UCRED = const G_CREDENTIALS_TYPE_LINUX_UCRED = Main.Base.convert(Main.Base.Int32, 1)
    const FREEBSD_CMSGCRED = const G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = Main.Base.convert(Main.Base.Int32, 2)
    const OPENBSD_SOCKPEERCRED = const G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = Main.Base.convert(Main.Base.Int32, 3)
    const SOLARIS_UCRED = const G_CREDENTIALS_TYPE_SOLARIS_UCRED = Main.Base.convert(Main.Base.Int32, 4)
    const NETBSD_UNPCBID = const G_CREDENTIALS_TYPE_NETBSD_UNPCBID = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusMessageByteOrder
    const BIG_ENDIAN = const G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = Main.Base.convert(Main.Base.Int32, 66)
    const LITTLE_ENDIAN = const G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = Main.Base.convert(Main.Base.Int32, 108)
    end)))
    $(Expr(:toplevel, :(baremodule GApplicationFlags
    const FLAGS_NONE = const G_APPLICATION_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const IS_SERVICE = const G_APPLICATION_IS_SERVICE = Main.Base.convert(Main.Base.Int32, 1)
    const IS_LAUNCHER = const G_APPLICATION_IS_LAUNCHER = Main.Base.convert(Main.Base.Int32, 2)
    const HANDLES_OPEN = const G_APPLICATION_HANDLES_OPEN = Main.Base.convert(Main.Base.Int32, 4)
    const HANDLES_COMMAND_LINE = const G_APPLICATION_HANDLES_COMMAND_LINE = Main.Base.convert(Main.Base.Int32, 8)
    const SEND_ENVIRONMENT = const G_APPLICATION_SEND_ENVIRONMENT = Main.Base.convert(Main.Base.Int32, 16)
    const NON_UNIQUE = const G_APPLICATION_NON_UNIQUE = Main.Base.convert(Main.Base.Int32, 32)
    const CAN_OVERRIDE_APP_ID = const G_APPLICATION_CAN_OVERRIDE_APP_ID = Main.Base.convert(Main.Base.Int32, 64)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsError
    const UNAVAILABLE = const G_TLS_ERROR_UNAVAILABLE = Main.Base.convert(Main.Base.Int32, 0)
    const MISC = const G_TLS_ERROR_MISC = Main.Base.convert(Main.Base.Int32, 1)
    const BAD_CERTIFICATE = const G_TLS_ERROR_BAD_CERTIFICATE = Main.Base.convert(Main.Base.Int32, 2)
    const NOT_TLS = const G_TLS_ERROR_NOT_TLS = Main.Base.convert(Main.Base.Int32, 3)
    const HANDSHAKE = const G_TLS_ERROR_HANDSHAKE = Main.Base.convert(Main.Base.Int32, 4)
    const CERTIFICATE_REQUIRED = const G_TLS_ERROR_CERTIFICATE_REQUIRED = Main.Base.convert(Main.Base.Int32, 5)
    const EOF = const G_TLS_ERROR_EOF = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsCertificateFlags
    const UNKNOWN_CA = const G_TLS_CERTIFICATE_UNKNOWN_CA = Main.Base.convert(Main.Base.Int32, 1)
    const BAD_IDENTITY = const G_TLS_CERTIFICATE_BAD_IDENTITY = Main.Base.convert(Main.Base.Int32, 2)
    const NOT_ACTIVATED = const G_TLS_CERTIFICATE_NOT_ACTIVATED = Main.Base.convert(Main.Base.Int32, 4)
    const EXPIRED = const G_TLS_CERTIFICATE_EXPIRED = Main.Base.convert(Main.Base.Int32, 8)
    const REVOKED = const G_TLS_CERTIFICATE_REVOKED = Main.Base.convert(Main.Base.Int32, 16)
    const INSECURE = const G_TLS_CERTIFICATE_INSECURE = Main.Base.convert(Main.Base.Int32, 32)
    const GENERIC_ERROR = const G_TLS_CERTIFICATE_GENERIC_ERROR = Main.Base.convert(Main.Base.Int32, 64)
    const VALIDATE_ALL = const G_TLS_CERTIFICATE_VALIDATE_ALL = Main.Base.convert(Main.Base.Int32, 127)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsAuthenticationMode
    const NONE = const G_TLS_AUTHENTICATION_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const REQUESTED = const G_TLS_AUTHENTICATION_REQUESTED = Main.Base.convert(Main.Base.Int32, 1)
    const REQUIRED = const G_TLS_AUTHENTICATION_REQUIRED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsRehandshakeMode
    const NEVER = const G_TLS_REHANDSHAKE_NEVER = Main.Base.convert(Main.Base.Int32, 0)
    const SAFELY = const G_TLS_REHANDSHAKE_SAFELY = Main.Base.convert(Main.Base.Int32, 1)
    const UNSAFELY = const G_TLS_REHANDSHAKE_UNSAFELY = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsPasswordFlags
    const NONE = const G_TLS_PASSWORD_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const RETRY = const G_TLS_PASSWORD_RETRY = Main.Base.convert(Main.Base.Int32, 2)
    const MANY_TRIES = const G_TLS_PASSWORD_MANY_TRIES = Main.Base.convert(Main.Base.Int32, 4)
    const FINAL_TRY = const G_TLS_PASSWORD_FINAL_TRY = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsInteractionResult
    const UNHANDLED = const G_TLS_INTERACTION_UNHANDLED = Main.Base.convert(Main.Base.Int32, 0)
    const HANDLED = const G_TLS_INTERACTION_HANDLED = Main.Base.convert(Main.Base.Int32, 1)
    const FAILED = const G_TLS_INTERACTION_FAILED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusInterfaceSkeletonFlags
    const NONE = const G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const HANDLE_METHOD_INVOCATIONS_IN_THREAD = const G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GDBusObjectManagerClientFlags
    const NONE = const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const DO_NOT_AUTO_START = const G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsDatabaseVerifyFlags
    const NONE = const G_TLS_DATABASE_VERIFY_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsDatabaseLookupFlags
    const NONE = const G_TLS_DATABASE_LOOKUP_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const KEYPAIR = const G_TLS_DATABASE_LOOKUP_KEYPAIR = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GTlsCertificateRequestFlags
    const NONE = const G_TLS_CERTIFICATE_REQUEST_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GIOModuleScopeFlags
    const NONE = const G_IO_MODULE_SCOPE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const BLOCK_DUPLICATES = const G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketClientEvent
    const RESOLVING = const G_SOCKET_CLIENT_RESOLVING = Main.Base.convert(Main.Base.Int32, 0)
    const RESOLVED = const G_SOCKET_CLIENT_RESOLVED = Main.Base.convert(Main.Base.Int32, 1)
    const CONNECTING = const G_SOCKET_CLIENT_CONNECTING = Main.Base.convert(Main.Base.Int32, 2)
    const CONNECTED = const G_SOCKET_CLIENT_CONNECTED = Main.Base.convert(Main.Base.Int32, 3)
    const PROXY_NEGOTIATING = const G_SOCKET_CLIENT_PROXY_NEGOTIATING = Main.Base.convert(Main.Base.Int32, 4)
    const PROXY_NEGOTIATED = const G_SOCKET_CLIENT_PROXY_NEGOTIATED = Main.Base.convert(Main.Base.Int32, 5)
    const TLS_HANDSHAKING = const G_SOCKET_CLIENT_TLS_HANDSHAKING = Main.Base.convert(Main.Base.Int32, 6)
    const TLS_HANDSHAKED = const G_SOCKET_CLIENT_TLS_HANDSHAKED = Main.Base.convert(Main.Base.Int32, 7)
    const COMPLETE = const G_SOCKET_CLIENT_COMPLETE = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GSocketListenerEvent
    const BINDING = const G_SOCKET_LISTENER_BINDING = Main.Base.convert(Main.Base.Int32, 0)
    const BOUND = const G_SOCKET_LISTENER_BOUND = Main.Base.convert(Main.Base.Int32, 1)
    const LISTENING = const G_SOCKET_LISTENER_LISTENING = Main.Base.convert(Main.Base.Int32, 2)
    const LISTENED = const G_SOCKET_LISTENER_LISTENED = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GTestDBusFlags
    const NONE = const G_TEST_DBUS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GSubprocessFlags
    const NONE = const G_SUBPROCESS_FLAGS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const STDIN_PIPE = const G_SUBPROCESS_FLAGS_STDIN_PIPE = Main.Base.convert(Main.Base.Int32, 1)
    const STDIN_INHERIT = const G_SUBPROCESS_FLAGS_STDIN_INHERIT = Main.Base.convert(Main.Base.Int32, 2)
    const STDOUT_PIPE = const G_SUBPROCESS_FLAGS_STDOUT_PIPE = Main.Base.convert(Main.Base.Int32, 4)
    const STDOUT_SILENCE = const G_SUBPROCESS_FLAGS_STDOUT_SILENCE = Main.Base.convert(Main.Base.Int32, 8)
    const STDERR_PIPE = const G_SUBPROCESS_FLAGS_STDERR_PIPE = Main.Base.convert(Main.Base.Int32, 16)
    const STDERR_SILENCE = const G_SUBPROCESS_FLAGS_STDERR_SILENCE = Main.Base.convert(Main.Base.Int32, 32)
    const STDERR_MERGE = const G_SUBPROCESS_FLAGS_STDERR_MERGE = Main.Base.convert(Main.Base.Int32, 64)
    const INHERIT_FDS = const G_SUBPROCESS_FLAGS_INHERIT_FDS = Main.Base.convert(Main.Base.Int32, 128)
    end)))
    $(Expr(:toplevel, :(baremodule GNotificationPriority
    const NORMAL = const G_NOTIFICATION_PRIORITY_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const LOW = const G_NOTIFICATION_PRIORITY_LOW = Main.Base.convert(Main.Base.Int32, 1)
    const HIGH = const G_NOTIFICATION_PRIORITY_HIGH = Main.Base.convert(Main.Base.Int32, 2)
    const URGENT = const G_NOTIFICATION_PRIORITY_URGENT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GNetworkConnectivity
    const LOCAL = const G_NETWORK_CONNECTIVITY_LOCAL = Main.Base.convert(Main.Base.Int32, 1)
    const LIMITED = const G_NETWORK_CONNECTIVITY_LIMITED = Main.Base.convert(Main.Base.Int32, 2)
    const PORTAL = const G_NETWORK_CONNECTIVITY_PORTAL = Main.Base.convert(Main.Base.Int32, 3)
    const FULL = const G_NETWORK_CONNECTIVITY_FULL = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GModuleFlags
    const LAZY = const G_MODULE_BIND_LAZY = Main.Base.convert(Main.Base.Int32, 1)
    const LOCAL = const G_MODULE_BIND_LOCAL = Main.Base.convert(Main.Base.Int32, 2)
    const MASK = const G_MODULE_BIND_MASK = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GSettingsBindFlags
    const DEFAULT = const G_SETTINGS_BIND_DEFAULT = Main.Base.convert(Main.Base.Int32, 0)
    const GET = const G_SETTINGS_BIND_GET = Main.Base.convert(Main.Base.Int32, 1)
    const SET = const G_SETTINGS_BIND_SET = Main.Base.convert(Main.Base.Int32, 2)
    const NO_SENSITIVITY = const G_SETTINGS_BIND_NO_SENSITIVITY = Main.Base.convert(Main.Base.Int32, 4)
    const GET_NO_CHANGES = const G_SETTINGS_BIND_GET_NO_CHANGES = Main.Base.convert(Main.Base.Int32, 8)
    const INVERT_BOOLEAN = const G_SETTINGS_BIND_INVERT_BOOLEAN = Main.Base.convert(Main.Base.Int32, 16)
    end)))
    $(Expr(:toplevel, :(baremodule GdkByteOrder
    const LSB_FIRST = const GDK_LSB_FIRST = Main.Base.convert(Main.Base.Int32, 0)
    const MSB_FIRST = const GDK_MSB_FIRST = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkModifierType
    const SHIFT = const GDK_SHIFT_MASK = Main.Base.convert(Main.Base.Int32, 1)
    const LOCK = const GDK_LOCK_MASK = Main.Base.convert(Main.Base.Int32, 2)
    const CONTROL = const GDK_CONTROL_MASK = Main.Base.convert(Main.Base.Int32, 4)
    const MOD1 = const GDK_MOD1_MASK = Main.Base.convert(Main.Base.Int32, 8)
    const MOD2 = const GDK_MOD2_MASK = Main.Base.convert(Main.Base.Int32, 16)
    const MOD3 = const GDK_MOD3_MASK = Main.Base.convert(Main.Base.Int32, 32)
    const MOD4 = const GDK_MOD4_MASK = Main.Base.convert(Main.Base.Int32, 64)
    const MOD5 = const GDK_MOD5_MASK = Main.Base.convert(Main.Base.Int32, 128)
    const BUTTON1 = const GDK_BUTTON1_MASK = Main.Base.convert(Main.Base.Int32, 256)
    const BUTTON2 = const GDK_BUTTON2_MASK = Main.Base.convert(Main.Base.Int32, 512)
    const BUTTON3 = const GDK_BUTTON3_MASK = Main.Base.convert(Main.Base.Int32, 1024)
    const BUTTON4 = const GDK_BUTTON4_MASK = Main.Base.convert(Main.Base.Int32, 2048)
    const BUTTON5 = const GDK_BUTTON5_MASK = Main.Base.convert(Main.Base.Int32, 4096)
    const MODIFIER_RESERVED_13 = const GDK_MODIFIER_RESERVED_13_MASK = Main.Base.convert(Main.Base.Int32, 8192)
    const MODIFIER_RESERVED_14 = const GDK_MODIFIER_RESERVED_14_MASK = Main.Base.convert(Main.Base.Int32, 16384)
    const MODIFIER_RESERVED_15 = const GDK_MODIFIER_RESERVED_15_MASK = Main.Base.convert(Main.Base.Int32, 32768)
    const MODIFIER_RESERVED_16 = const GDK_MODIFIER_RESERVED_16_MASK = Main.Base.convert(Main.Base.Int32, 65536)
    const MODIFIER_RESERVED_17 = const GDK_MODIFIER_RESERVED_17_MASK = Main.Base.convert(Main.Base.Int32, 131072)
    const MODIFIER_RESERVED_18 = const GDK_MODIFIER_RESERVED_18_MASK = Main.Base.convert(Main.Base.Int32, 262144)
    const MODIFIER_RESERVED_19 = const GDK_MODIFIER_RESERVED_19_MASK = Main.Base.convert(Main.Base.Int32, 524288)
    const MODIFIER_RESERVED_20 = const GDK_MODIFIER_RESERVED_20_MASK = Main.Base.convert(Main.Base.Int32, 1048576)
    const MODIFIER_RESERVED_21 = const GDK_MODIFIER_RESERVED_21_MASK = Main.Base.convert(Main.Base.Int32, 2097152)
    const MODIFIER_RESERVED_22 = const GDK_MODIFIER_RESERVED_22_MASK = Main.Base.convert(Main.Base.Int32, 4194304)
    const MODIFIER_RESERVED_23 = const GDK_MODIFIER_RESERVED_23_MASK = Main.Base.convert(Main.Base.Int32, 8388608)
    const MODIFIER_RESERVED_24 = const GDK_MODIFIER_RESERVED_24_MASK = Main.Base.convert(Main.Base.Int32, 16777216)
    const MODIFIER_RESERVED_25 = const GDK_MODIFIER_RESERVED_25_MASK = Main.Base.convert(Main.Base.Int32, 33554432)
    const SUPER = const GDK_SUPER_MASK = Main.Base.convert(Main.Base.Int32, 67108864)
    const HYPER = const GDK_HYPER_MASK = Main.Base.convert(Main.Base.Int32, 134217728)
    const META = const GDK_META_MASK = Main.Base.convert(Main.Base.Int32, 268435456)
    const MODIFIER_RESERVED_29 = const GDK_MODIFIER_RESERVED_29_MASK = Main.Base.convert(Main.Base.Int32, 536870912)
    const RELEASE = const GDK_RELEASE_MASK = Main.Base.convert(Main.Base.Int32, 1073741824)
    const MODIFIER = const GDK_MODIFIER_MASK = Main.Base.convert(Main.Base.Int32, 1543512063)
    const BUTTONS = const GDK_BUTTONS = 7936
    end)))
    $(Expr(:toplevel, :(baremodule GdkModifierIntent
    const PRIMARY_ACCELERATOR = const GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR = Main.Base.convert(Main.Base.Int32, 0)
    const CONTEXT_MENU = const GDK_MODIFIER_INTENT_CONTEXT_MENU = Main.Base.convert(Main.Base.Int32, 1)
    const EXTEND_SELECTION = const GDK_MODIFIER_INTENT_EXTEND_SELECTION = Main.Base.convert(Main.Base.Int32, 2)
    const MODIFY_SELECTION = const GDK_MODIFIER_INTENT_MODIFY_SELECTION = Main.Base.convert(Main.Base.Int32, 3)
    const NO_TEXT_INPUT = const GDK_MODIFIER_INTENT_NO_TEXT_INPUT = Main.Base.convert(Main.Base.Int32, 4)
    const SHIFT_GROUP = const GDK_MODIFIER_INTENT_SHIFT_GROUP = Main.Base.convert(Main.Base.Int32, 5)
    const DEFAULT_MOD_MASK = const GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GdkStatus
    const OK = const GDK_OK = Main.Base.convert(Main.Base.Int32, 0)
    const ERROR = const GDK_ERROR = Main.Base.convert(Main.Base.Int32, -1)
    const ERROR_PARAM = const GDK_ERROR_PARAM = Main.Base.convert(Main.Base.Int32, -2)
    const ERROR_FILE = const GDK_ERROR_FILE = Main.Base.convert(Main.Base.Int32, -3)
    const ERROR_MEM = const GDK_ERROR_MEM = Main.Base.convert(Main.Base.Int32, -4)
    end)))
    $(Expr(:toplevel, :(baremodule GdkGrabStatus
    const SUCCESS = const GDK_GRAB_SUCCESS = Main.Base.convert(Main.Base.Int32, 0)
    const ALREADY_GRABBED = const GDK_GRAB_ALREADY_GRABBED = Main.Base.convert(Main.Base.Int32, 1)
    const INVALID_TIME = const GDK_GRAB_INVALID_TIME = Main.Base.convert(Main.Base.Int32, 2)
    const NOT_VIEWABLE = const GDK_GRAB_NOT_VIEWABLE = Main.Base.convert(Main.Base.Int32, 3)
    const FROZEN = const GDK_GRAB_FROZEN = Main.Base.convert(Main.Base.Int32, 4)
    const FAILED = const GDK_GRAB_FAILED = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GdkGrabOwnership
    const NONE = const GDK_OWNERSHIP_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const WINDOW = const GDK_OWNERSHIP_WINDOW = Main.Base.convert(Main.Base.Int32, 1)
    const APPLICATION = const GDK_OWNERSHIP_APPLICATION = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkEventMask
    const EXPOSURE = const GDK_EXPOSURE_MASK = Main.Base.convert(Main.Base.Int32, 2)
    const POINTER_MOTION = const GDK_POINTER_MOTION_MASK = Main.Base.convert(Main.Base.Int32, 4)
    const POINTER_MOTION_HINT = const GDK_POINTER_MOTION_HINT_MASK = Main.Base.convert(Main.Base.Int32, 8)
    const BUTTON_MOTION = const GDK_BUTTON_MOTION_MASK = Main.Base.convert(Main.Base.Int32, 16)
    const BUTTON1_MOTION = const GDK_BUTTON1_MOTION_MASK = Main.Base.convert(Main.Base.Int32, 32)
    const BUTTON2_MOTION = const GDK_BUTTON2_MOTION_MASK = Main.Base.convert(Main.Base.Int32, 64)
    const BUTTON3_MOTION = const GDK_BUTTON3_MOTION_MASK = Main.Base.convert(Main.Base.Int32, 128)
    const BUTTON_PRESS = const GDK_BUTTON_PRESS_MASK = Main.Base.convert(Main.Base.Int32, 256)
    const BUTTON_RELEASE = const GDK_BUTTON_RELEASE_MASK = Main.Base.convert(Main.Base.Int32, 512)
    const KEY_PRESS = const GDK_KEY_PRESS_MASK = Main.Base.convert(Main.Base.Int32, 1024)
    const KEY_RELEASE = const GDK_KEY_RELEASE_MASK = Main.Base.convert(Main.Base.Int32, 2048)
    const ENTER_NOTIFY = const GDK_ENTER_NOTIFY_MASK = Main.Base.convert(Main.Base.Int32, 4096)
    const LEAVE_NOTIFY = const GDK_LEAVE_NOTIFY_MASK = Main.Base.convert(Main.Base.Int32, 8192)
    const FOCUS_CHANGE = const GDK_FOCUS_CHANGE_MASK = Main.Base.convert(Main.Base.Int32, 16384)
    const STRUCTURE = const GDK_STRUCTURE_MASK = Main.Base.convert(Main.Base.Int32, 32768)
    const PROPERTY_CHANGE = const GDK_PROPERTY_CHANGE_MASK = Main.Base.convert(Main.Base.Int32, 65536)
    const VISIBILITY_NOTIFY = const GDK_VISIBILITY_NOTIFY_MASK = Main.Base.convert(Main.Base.Int32, 131072)
    const PROXIMITY_IN = const GDK_PROXIMITY_IN_MASK = Main.Base.convert(Main.Base.Int32, 262144)
    const PROXIMITY_OUT = const GDK_PROXIMITY_OUT_MASK = Main.Base.convert(Main.Base.Int32, 524288)
    const SUBSTRUCTURE = const GDK_SUBSTRUCTURE_MASK = Main.Base.convert(Main.Base.Int32, 1048576)
    const SCROLL = const GDK_SCROLL_MASK = Main.Base.convert(Main.Base.Int32, 2097152)
    const TOUCH = const GDK_TOUCH_MASK = Main.Base.convert(Main.Base.Int32, 4194304)
    const SMOOTH_SCROLL = const GDK_SMOOTH_SCROLL_MASK = Main.Base.convert(Main.Base.Int32, 8388608)
    const TOUCHPAD_GESTURE = const GDK_TOUCHPAD_GESTURE_MASK = Main.Base.convert(Main.Base.Int32, 16777216)
    const TABLET_PAD = const GDK_TABLET_PAD_MASK = Main.Base.convert(Main.Base.Int32, 33554432)
    const ALL_EVENTS = const GDK_ALL_EVENTS_MASK = Main.Base.convert(Main.Base.Int32, 16777214)
    end)))
    $(Expr(:toplevel, :(baremodule GdkGLError
    const NOT_AVAILABLE = const GDK_GL_ERROR_NOT_AVAILABLE = Main.Base.convert(Main.Base.Int32, 0)
    const UNSUPPORTED_FORMAT = const GDK_GL_ERROR_UNSUPPORTED_FORMAT = Main.Base.convert(Main.Base.Int32, 1)
    const UNSUPPORTED_PROFILE = const GDK_GL_ERROR_UNSUPPORTED_PROFILE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowTypeHint
    const NORMAL = const GDK_WINDOW_TYPE_HINT_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const DIALOG = const GDK_WINDOW_TYPE_HINT_DIALOG = Main.Base.convert(Main.Base.Int32, 1)
    const MENU = const GDK_WINDOW_TYPE_HINT_MENU = Main.Base.convert(Main.Base.Int32, 2)
    const TOOLBAR = const GDK_WINDOW_TYPE_HINT_TOOLBAR = Main.Base.convert(Main.Base.Int32, 3)
    const SPLASHSCREEN = const GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = Main.Base.convert(Main.Base.Int32, 4)
    const UTILITY = const GDK_WINDOW_TYPE_HINT_UTILITY = Main.Base.convert(Main.Base.Int32, 5)
    const DOCK = const GDK_WINDOW_TYPE_HINT_DOCK = Main.Base.convert(Main.Base.Int32, 6)
    const DESKTOP = const GDK_WINDOW_TYPE_HINT_DESKTOP = Main.Base.convert(Main.Base.Int32, 7)
    const DROPDOWN_MENU = const GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = Main.Base.convert(Main.Base.Int32, 8)
    const POPUP_MENU = const GDK_WINDOW_TYPE_HINT_POPUP_MENU = Main.Base.convert(Main.Base.Int32, 9)
    const TOOLTIP = const GDK_WINDOW_TYPE_HINT_TOOLTIP = Main.Base.convert(Main.Base.Int32, 10)
    const NOTIFICATION = const GDK_WINDOW_TYPE_HINT_NOTIFICATION = Main.Base.convert(Main.Base.Int32, 11)
    const COMBO = const GDK_WINDOW_TYPE_HINT_COMBO = Main.Base.convert(Main.Base.Int32, 12)
    const DND = const GDK_WINDOW_TYPE_HINT_DND = Main.Base.convert(Main.Base.Int32, 13)
    end)))
    $(Expr(:toplevel, :(baremodule GdkAxisUse
    const IGNORE = const GDK_AXIS_IGNORE = Main.Base.convert(Main.Base.Int32, 0)
    const X = const GDK_AXIS_X = Main.Base.convert(Main.Base.Int32, 1)
    const Y = const GDK_AXIS_Y = Main.Base.convert(Main.Base.Int32, 2)
    const PRESSURE = const GDK_AXIS_PRESSURE = Main.Base.convert(Main.Base.Int32, 3)
    const XTILT = const GDK_AXIS_XTILT = Main.Base.convert(Main.Base.Int32, 4)
    const YTILT = const GDK_AXIS_YTILT = Main.Base.convert(Main.Base.Int32, 5)
    const WHEEL = const GDK_AXIS_WHEEL = Main.Base.convert(Main.Base.Int32, 6)
    const DISTANCE = const GDK_AXIS_DISTANCE = Main.Base.convert(Main.Base.Int32, 7)
    const ROTATION = const GDK_AXIS_ROTATION = Main.Base.convert(Main.Base.Int32, 8)
    const SLIDER = const GDK_AXIS_SLIDER = Main.Base.convert(Main.Base.Int32, 9)
    const LAST = const GDK_AXIS_LAST = Main.Base.convert(Main.Base.Int32, 10)
    end)))
    $(Expr(:toplevel, :(baremodule GdkAxisFlags
    const X = const GDK_AXIS_FLAG_X = Main.Base.convert(Main.Base.Int32, 2)
    const Y = const GDK_AXIS_FLAG_Y = Main.Base.convert(Main.Base.Int32, 4)
    const PRESSURE = const GDK_AXIS_FLAG_PRESSURE = Main.Base.convert(Main.Base.Int32, 8)
    const XTILT = const GDK_AXIS_FLAG_XTILT = Main.Base.convert(Main.Base.Int32, 16)
    const YTILT = const GDK_AXIS_FLAG_YTILT = Main.Base.convert(Main.Base.Int32, 32)
    const WHEEL = const GDK_AXIS_FLAG_WHEEL = Main.Base.convert(Main.Base.Int32, 64)
    const DISTANCE = const GDK_AXIS_FLAG_DISTANCE = Main.Base.convert(Main.Base.Int32, 128)
    const ROTATION = const GDK_AXIS_FLAG_ROTATION = Main.Base.convert(Main.Base.Int32, 256)
    const SLIDER = const GDK_AXIS_FLAG_SLIDER = Main.Base.convert(Main.Base.Int32, 512)
    end)))
    $(Expr(:toplevel, :(baremodule GdkInputSource
    const MOUSE = const GDK_SOURCE_MOUSE = Main.Base.convert(Main.Base.Int32, 0)
    const PEN = const GDK_SOURCE_PEN = Main.Base.convert(Main.Base.Int32, 1)
    const ERASER = const GDK_SOURCE_ERASER = Main.Base.convert(Main.Base.Int32, 2)
    const CURSOR = const GDK_SOURCE_CURSOR = Main.Base.convert(Main.Base.Int32, 3)
    const KEYBOARD = const GDK_SOURCE_KEYBOARD = Main.Base.convert(Main.Base.Int32, 4)
    const TOUCHSCREEN = const GDK_SOURCE_TOUCHSCREEN = Main.Base.convert(Main.Base.Int32, 5)
    const TOUCHPAD = const GDK_SOURCE_TOUCHPAD = Main.Base.convert(Main.Base.Int32, 6)
    const TRACKPOINT = const GDK_SOURCE_TRACKPOINT = Main.Base.convert(Main.Base.Int32, 7)
    const TABLET_PAD = const GDK_SOURCE_TABLET_PAD = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GdkInputMode
    const DISABLED = const GDK_MODE_DISABLED = Main.Base.convert(Main.Base.Int32, 0)
    const SCREEN = const GDK_MODE_SCREEN = Main.Base.convert(Main.Base.Int32, 1)
    const WINDOW = const GDK_MODE_WINDOW = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDeviceType
    const MASTER = const GDK_DEVICE_TYPE_MASTER = Main.Base.convert(Main.Base.Int32, 0)
    const SLAVE = const GDK_DEVICE_TYPE_SLAVE = Main.Base.convert(Main.Base.Int32, 1)
    const FLOATING = const GDK_DEVICE_TYPE_FLOATING = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDragAction
    const DEFAULT = const GDK_ACTION_DEFAULT = Main.Base.convert(Main.Base.Int32, 1)
    const COPY = const GDK_ACTION_COPY = Main.Base.convert(Main.Base.Int32, 2)
    const MOVE = const GDK_ACTION_MOVE = Main.Base.convert(Main.Base.Int32, 4)
    const LINK = const GDK_ACTION_LINK = Main.Base.convert(Main.Base.Int32, 8)
    const PRIVATE = const GDK_ACTION_PRIVATE = Main.Base.convert(Main.Base.Int32, 16)
    const ASK = const GDK_ACTION_ASK = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDragCancelReason
    const NO_TARGET = const GDK_DRAG_CANCEL_NO_TARGET = Main.Base.convert(Main.Base.Int32, 0)
    const USER_CANCELLED = const GDK_DRAG_CANCEL_USER_CANCELLED = Main.Base.convert(Main.Base.Int32, 1)
    const ERROR = const GDK_DRAG_CANCEL_ERROR = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDragProtocol
    const NONE = const GDK_DRAG_PROTO_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const MOTIF = const GDK_DRAG_PROTO_MOTIF = Main.Base.convert(Main.Base.Int32, 1)
    const XDND = const GDK_DRAG_PROTO_XDND = Main.Base.convert(Main.Base.Int32, 2)
    const ROOTWIN = const GDK_DRAG_PROTO_ROOTWIN = Main.Base.convert(Main.Base.Int32, 3)
    const WIN32_DROPFILES = const GDK_DRAG_PROTO_WIN32_DROPFILES = Main.Base.convert(Main.Base.Int32, 4)
    const OLE2 = const GDK_DRAG_PROTO_OLE2 = Main.Base.convert(Main.Base.Int32, 5)
    const LOCAL = const GDK_DRAG_PROTO_LOCAL = Main.Base.convert(Main.Base.Int32, 6)
    const WAYLAND = const GDK_DRAG_PROTO_WAYLAND = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDeviceToolType
    const UNKNOWN = const GDK_DEVICE_TOOL_TYPE_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const PEN = const GDK_DEVICE_TOOL_TYPE_PEN = Main.Base.convert(Main.Base.Int32, 1)
    const ERASER = const GDK_DEVICE_TOOL_TYPE_ERASER = Main.Base.convert(Main.Base.Int32, 2)
    const BRUSH = const GDK_DEVICE_TOOL_TYPE_BRUSH = Main.Base.convert(Main.Base.Int32, 3)
    const PENCIL = const GDK_DEVICE_TOOL_TYPE_PENCIL = Main.Base.convert(Main.Base.Int32, 4)
    const AIRBRUSH = const GDK_DEVICE_TOOL_TYPE_AIRBRUSH = Main.Base.convert(Main.Base.Int32, 5)
    const MOUSE = const GDK_DEVICE_TOOL_TYPE_MOUSE = Main.Base.convert(Main.Base.Int32, 6)
    const LENS = const GDK_DEVICE_TOOL_TYPE_LENS = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GdkFilterReturn
    const CONTINUE = const GDK_FILTER_CONTINUE = Main.Base.convert(Main.Base.Int32, 0)
    const TRANSLATE = const GDK_FILTER_TRANSLATE = Main.Base.convert(Main.Base.Int32, 1)
    const REMOVE = const GDK_FILTER_REMOVE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkEventType
    const NOTHING = const GDK_NOTHING = Main.Base.convert(Main.Base.Int32, -1)
    const DELETE = const GDK_DELETE = Main.Base.convert(Main.Base.Int32, 0)
    const DESTROY = const GDK_DESTROY = Main.Base.convert(Main.Base.Int32, 1)
    const EXPOSE = const GDK_EXPOSE = Main.Base.convert(Main.Base.Int32, 2)
    const MOTION_NOTIFY = const GDK_MOTION_NOTIFY = Main.Base.convert(Main.Base.Int32, 3)
    const BUTTON_PRESS = const GDK_BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 4)
    const GDK_2BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 5)
    const DOUBLE_BUTTON_PRESS = const GDK_DOUBLE_BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 5)
    const GDK_3BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 6)
    const TRIPLE_BUTTON_PRESS = const GDK_TRIPLE_BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 6)
    const BUTTON_RELEASE = const GDK_BUTTON_RELEASE = Main.Base.convert(Main.Base.Int32, 7)
    const KEY_PRESS = const GDK_KEY_PRESS = Main.Base.convert(Main.Base.Int32, 8)
    const KEY_RELEASE = const GDK_KEY_RELEASE = Main.Base.convert(Main.Base.Int32, 9)
    const ENTER_NOTIFY = const GDK_ENTER_NOTIFY = Main.Base.convert(Main.Base.Int32, 10)
    const LEAVE_NOTIFY = const GDK_LEAVE_NOTIFY = Main.Base.convert(Main.Base.Int32, 11)
    const FOCUS_CHANGE = const GDK_FOCUS_CHANGE = Main.Base.convert(Main.Base.Int32, 12)
    const CONFIGURE = const GDK_CONFIGURE = Main.Base.convert(Main.Base.Int32, 13)
    const MAP = const GDK_MAP = Main.Base.convert(Main.Base.Int32, 14)
    const UNMAP = const GDK_UNMAP = Main.Base.convert(Main.Base.Int32, 15)
    const PROPERTY_NOTIFY = const GDK_PROPERTY_NOTIFY = Main.Base.convert(Main.Base.Int32, 16)
    const SELECTION_CLEAR = const GDK_SELECTION_CLEAR = Main.Base.convert(Main.Base.Int32, 17)
    const SELECTION_REQUEST = const GDK_SELECTION_REQUEST = Main.Base.convert(Main.Base.Int32, 18)
    const SELECTION_NOTIFY = const GDK_SELECTION_NOTIFY = Main.Base.convert(Main.Base.Int32, 19)
    const PROXIMITY_IN = const GDK_PROXIMITY_IN = Main.Base.convert(Main.Base.Int32, 20)
    const PROXIMITY_OUT = const GDK_PROXIMITY_OUT = Main.Base.convert(Main.Base.Int32, 21)
    const DRAG_ENTER = const GDK_DRAG_ENTER = Main.Base.convert(Main.Base.Int32, 22)
    const DRAG_LEAVE = const GDK_DRAG_LEAVE = Main.Base.convert(Main.Base.Int32, 23)
    const DRAG_MOTION = const GDK_DRAG_MOTION = Main.Base.convert(Main.Base.Int32, 24)
    const DRAG_STATUS = const GDK_DRAG_STATUS = Main.Base.convert(Main.Base.Int32, 25)
    const DROP_START = const GDK_DROP_START = Main.Base.convert(Main.Base.Int32, 26)
    const DROP_FINISHED = const GDK_DROP_FINISHED = Main.Base.convert(Main.Base.Int32, 27)
    const CLIENT_EVENT = const GDK_CLIENT_EVENT = Main.Base.convert(Main.Base.Int32, 28)
    const VISIBILITY_NOTIFY = const GDK_VISIBILITY_NOTIFY = Main.Base.convert(Main.Base.Int32, 29)
    const SCROLL = const GDK_SCROLL = Main.Base.convert(Main.Base.Int32, 31)
    const WINDOW_STATE = const GDK_WINDOW_STATE = Main.Base.convert(Main.Base.Int32, 32)
    const SETTING = const GDK_SETTING = Main.Base.convert(Main.Base.Int32, 33)
    const OWNER_CHANGE = const GDK_OWNER_CHANGE = Main.Base.convert(Main.Base.Int32, 34)
    const GRAB_BROKEN = const GDK_GRAB_BROKEN = Main.Base.convert(Main.Base.Int32, 35)
    const DAMAGE = const GDK_DAMAGE = Main.Base.convert(Main.Base.Int32, 36)
    const TOUCH_BEGIN = const GDK_TOUCH_BEGIN = Main.Base.convert(Main.Base.Int32, 37)
    const TOUCH_UPDATE = const GDK_TOUCH_UPDATE = Main.Base.convert(Main.Base.Int32, 38)
    const TOUCH_END = const GDK_TOUCH_END = Main.Base.convert(Main.Base.Int32, 39)
    const TOUCH_CANCEL = const GDK_TOUCH_CANCEL = Main.Base.convert(Main.Base.Int32, 40)
    const TOUCHPAD_SWIPE = const GDK_TOUCHPAD_SWIPE = Main.Base.convert(Main.Base.Int32, 41)
    const TOUCHPAD_PINCH = const GDK_TOUCHPAD_PINCH = Main.Base.convert(Main.Base.Int32, 42)
    const PAD_BUTTON_PRESS = const GDK_PAD_BUTTON_PRESS = Main.Base.convert(Main.Base.Int32, 43)
    const PAD_BUTTON_RELEASE = const GDK_PAD_BUTTON_RELEASE = Main.Base.convert(Main.Base.Int32, 44)
    const PAD_RING = const GDK_PAD_RING = Main.Base.convert(Main.Base.Int32, 45)
    const PAD_STRIP = const GDK_PAD_STRIP = Main.Base.convert(Main.Base.Int32, 46)
    const PAD_GROUP_MODE = const GDK_PAD_GROUP_MODE = Main.Base.convert(Main.Base.Int32, 47)
    const EVENT_LAST = const GDK_EVENT_LAST = Main.Base.convert(Main.Base.Int32, 48)
    end)))
    $(Expr(:toplevel, :(baremodule GdkVisibilityState
    const UNOBSCURED = const GDK_VISIBILITY_UNOBSCURED = Main.Base.convert(Main.Base.Int32, 0)
    const PARTIAL = const GDK_VISIBILITY_PARTIAL = Main.Base.convert(Main.Base.Int32, 1)
    const FULLY_OBSCURED = const GDK_VISIBILITY_FULLY_OBSCURED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkTouchpadGesturePhase
    const BEGIN = const GDK_TOUCHPAD_GESTURE_PHASE_BEGIN = Main.Base.convert(Main.Base.Int32, 0)
    const UPDATE = const GDK_TOUCHPAD_GESTURE_PHASE_UPDATE = Main.Base.convert(Main.Base.Int32, 1)
    const END = const GDK_TOUCHPAD_GESTURE_PHASE_END = Main.Base.convert(Main.Base.Int32, 2)
    const CANCEL = const GDK_TOUCHPAD_GESTURE_PHASE_CANCEL = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GdkScrollDirection
    const UP = const GDK_SCROLL_UP = Main.Base.convert(Main.Base.Int32, 0)
    const DOWN = const GDK_SCROLL_DOWN = Main.Base.convert(Main.Base.Int32, 1)
    const LEFT = const GDK_SCROLL_LEFT = Main.Base.convert(Main.Base.Int32, 2)
    const RIGHT = const GDK_SCROLL_RIGHT = Main.Base.convert(Main.Base.Int32, 3)
    const SMOOTH = const GDK_SCROLL_SMOOTH = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GdkNotifyType
    const ANCESTOR = const GDK_NOTIFY_ANCESTOR = Main.Base.convert(Main.Base.Int32, 0)
    const VIRTUAL = const GDK_NOTIFY_VIRTUAL = Main.Base.convert(Main.Base.Int32, 1)
    const INFERIOR = const GDK_NOTIFY_INFERIOR = Main.Base.convert(Main.Base.Int32, 2)
    const NONLINEAR = const GDK_NOTIFY_NONLINEAR = Main.Base.convert(Main.Base.Int32, 3)
    const NONLINEAR_VIRTUAL = const GDK_NOTIFY_NONLINEAR_VIRTUAL = Main.Base.convert(Main.Base.Int32, 4)
    const UNKNOWN = const GDK_NOTIFY_UNKNOWN = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GdkCrossingMode
    const NORMAL = const GDK_CROSSING_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const GRAB = const GDK_CROSSING_GRAB = Main.Base.convert(Main.Base.Int32, 1)
    const UNGRAB = const GDK_CROSSING_UNGRAB = Main.Base.convert(Main.Base.Int32, 2)
    const GTK_GRAB = const GDK_CROSSING_GTK_GRAB = Main.Base.convert(Main.Base.Int32, 3)
    const GTK_UNGRAB = const GDK_CROSSING_GTK_UNGRAB = Main.Base.convert(Main.Base.Int32, 4)
    const STATE_CHANGED = const GDK_CROSSING_STATE_CHANGED = Main.Base.convert(Main.Base.Int32, 5)
    const TOUCH_BEGIN = const GDK_CROSSING_TOUCH_BEGIN = Main.Base.convert(Main.Base.Int32, 6)
    const TOUCH_END = const GDK_CROSSING_TOUCH_END = Main.Base.convert(Main.Base.Int32, 7)
    const DEVICE_SWITCH = const GDK_CROSSING_DEVICE_SWITCH = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GdkPropertyState
    const NEW_VALUE = const GDK_PROPERTY_NEW_VALUE = Main.Base.convert(Main.Base.Int32, 0)
    const DELETE = const GDK_PROPERTY_DELETE = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowState
    const WITHDRAWN = const GDK_WINDOW_STATE_WITHDRAWN = Main.Base.convert(Main.Base.Int32, 1)
    const ICONIFIED = const GDK_WINDOW_STATE_ICONIFIED = Main.Base.convert(Main.Base.Int32, 2)
    const MAXIMIZED = const GDK_WINDOW_STATE_MAXIMIZED = Main.Base.convert(Main.Base.Int32, 4)
    const STICKY = const GDK_WINDOW_STATE_STICKY = Main.Base.convert(Main.Base.Int32, 8)
    const FULLSCREEN = const GDK_WINDOW_STATE_FULLSCREEN = Main.Base.convert(Main.Base.Int32, 16)
    const ABOVE = const GDK_WINDOW_STATE_ABOVE = Main.Base.convert(Main.Base.Int32, 32)
    const BELOW = const GDK_WINDOW_STATE_BELOW = Main.Base.convert(Main.Base.Int32, 64)
    const FOCUSED = const GDK_WINDOW_STATE_FOCUSED = Main.Base.convert(Main.Base.Int32, 128)
    const TILED = const GDK_WINDOW_STATE_TILED = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GdkSettingAction
    const NEW = const GDK_SETTING_ACTION_NEW = Main.Base.convert(Main.Base.Int32, 0)
    const CHANGED = const GDK_SETTING_ACTION_CHANGED = Main.Base.convert(Main.Base.Int32, 1)
    const DELETED = const GDK_SETTING_ACTION_DELETED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkOwnerChange
    const NEW_OWNER = const GDK_OWNER_CHANGE_NEW_OWNER = Main.Base.convert(Main.Base.Int32, 0)
    const DESTROY = const GDK_OWNER_CHANGE_DESTROY = Main.Base.convert(Main.Base.Int32, 1)
    const CLOSE = const GDK_OWNER_CHANGE_CLOSE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkFrameClockPhase
    const NONE = const GDK_FRAME_CLOCK_PHASE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const FLUSH_EVENTS = const GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = Main.Base.convert(Main.Base.Int32, 1)
    const BEFORE_PAINT = const GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = Main.Base.convert(Main.Base.Int32, 2)
    const UPDATE = const GDK_FRAME_CLOCK_PHASE_UPDATE = Main.Base.convert(Main.Base.Int32, 4)
    const LAYOUT = const GDK_FRAME_CLOCK_PHASE_LAYOUT = Main.Base.convert(Main.Base.Int32, 8)
    const PAINT = const GDK_FRAME_CLOCK_PHASE_PAINT = Main.Base.convert(Main.Base.Int32, 16)
    const RESUME_EVENTS = const GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = Main.Base.convert(Main.Base.Int32, 32)
    const AFTER_PAINT = const GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = Main.Base.convert(Main.Base.Int32, 64)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowWindowClass
    const OUTPUT = const GDK_INPUT_OUTPUT = Main.Base.convert(Main.Base.Int32, 0)
    const ONLY = const GDK_INPUT_ONLY = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowType
    const ROOT = const GDK_WINDOW_ROOT = Main.Base.convert(Main.Base.Int32, 0)
    const TOPLEVEL = const GDK_WINDOW_TOPLEVEL = Main.Base.convert(Main.Base.Int32, 1)
    const CHILD = const GDK_WINDOW_CHILD = Main.Base.convert(Main.Base.Int32, 2)
    const TEMP = const GDK_WINDOW_TEMP = Main.Base.convert(Main.Base.Int32, 3)
    const FOREIGN = const GDK_WINDOW_FOREIGN = Main.Base.convert(Main.Base.Int32, 4)
    const OFFSCREEN = const GDK_WINDOW_OFFSCREEN = Main.Base.convert(Main.Base.Int32, 5)
    const SUBSURFACE = const GDK_WINDOW_SUBSURFACE = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowAttributesType
    const TITLE = const GDK_WA_TITLE = Main.Base.convert(Main.Base.Int32, 2)
    const X = const GDK_WA_X = Main.Base.convert(Main.Base.Int32, 4)
    const Y = const GDK_WA_Y = Main.Base.convert(Main.Base.Int32, 8)
    const CURSOR = const GDK_WA_CURSOR = Main.Base.convert(Main.Base.Int32, 16)
    const VISUAL = const GDK_WA_VISUAL = Main.Base.convert(Main.Base.Int32, 32)
    const WMCLASS = const GDK_WA_WMCLASS = Main.Base.convert(Main.Base.Int32, 64)
    const NOREDIR = const GDK_WA_NOREDIR = Main.Base.convert(Main.Base.Int32, 128)
    const TYPE_HINT = const GDK_WA_TYPE_HINT = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowHints
    const POS = const GDK_HINT_POS = Main.Base.convert(Main.Base.Int32, 1)
    const MIN_SIZE = const GDK_HINT_MIN_SIZE = Main.Base.convert(Main.Base.Int32, 2)
    const MAX_SIZE = const GDK_HINT_MAX_SIZE = Main.Base.convert(Main.Base.Int32, 4)
    const BASE_SIZE = const GDK_HINT_BASE_SIZE = Main.Base.convert(Main.Base.Int32, 8)
    const ASPECT = const GDK_HINT_ASPECT = Main.Base.convert(Main.Base.Int32, 16)
    const RESIZE_INC = const GDK_HINT_RESIZE_INC = Main.Base.convert(Main.Base.Int32, 32)
    const WIN_GRAVITY = const GDK_HINT_WIN_GRAVITY = Main.Base.convert(Main.Base.Int32, 64)
    const USER_POS = const GDK_HINT_USER_POS = Main.Base.convert(Main.Base.Int32, 128)
    const USER_SIZE = const GDK_HINT_USER_SIZE = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWMDecoration
    const ALL = const GDK_DECOR_ALL = Main.Base.convert(Main.Base.Int32, 1)
    const BORDER = const GDK_DECOR_BORDER = Main.Base.convert(Main.Base.Int32, 2)
    const RESIZEH = const GDK_DECOR_RESIZEH = Main.Base.convert(Main.Base.Int32, 4)
    const TITLE = const GDK_DECOR_TITLE = Main.Base.convert(Main.Base.Int32, 8)
    const MENU = const GDK_DECOR_MENU = Main.Base.convert(Main.Base.Int32, 16)
    const MINIMIZE = const GDK_DECOR_MINIMIZE = Main.Base.convert(Main.Base.Int32, 32)
    const MAXIMIZE = const GDK_DECOR_MAXIMIZE = Main.Base.convert(Main.Base.Int32, 64)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWMFunction
    const ALL = const GDK_FUNC_ALL = Main.Base.convert(Main.Base.Int32, 1)
    const RESIZE = const GDK_FUNC_RESIZE = Main.Base.convert(Main.Base.Int32, 2)
    const MOVE = const GDK_FUNC_MOVE = Main.Base.convert(Main.Base.Int32, 4)
    const MINIMIZE = const GDK_FUNC_MINIMIZE = Main.Base.convert(Main.Base.Int32, 8)
    const MAXIMIZE = const GDK_FUNC_MAXIMIZE = Main.Base.convert(Main.Base.Int32, 16)
    const CLOSE = const GDK_FUNC_CLOSE = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GdkGravity
    const NORTH_WEST = const GDK_GRAVITY_NORTH_WEST = Main.Base.convert(Main.Base.Int32, 1)
    const NORTH = const GDK_GRAVITY_NORTH = Main.Base.convert(Main.Base.Int32, 2)
    const NORTH_EAST = const GDK_GRAVITY_NORTH_EAST = Main.Base.convert(Main.Base.Int32, 3)
    const WEST = const GDK_GRAVITY_WEST = Main.Base.convert(Main.Base.Int32, 4)
    const CENTER = const GDK_GRAVITY_CENTER = Main.Base.convert(Main.Base.Int32, 5)
    const EAST = const GDK_GRAVITY_EAST = Main.Base.convert(Main.Base.Int32, 6)
    const SOUTH_WEST = const GDK_GRAVITY_SOUTH_WEST = Main.Base.convert(Main.Base.Int32, 7)
    const SOUTH = const GDK_GRAVITY_SOUTH = Main.Base.convert(Main.Base.Int32, 8)
    const SOUTH_EAST = const GDK_GRAVITY_SOUTH_EAST = Main.Base.convert(Main.Base.Int32, 9)
    const STATIC = const GDK_GRAVITY_STATIC = Main.Base.convert(Main.Base.Int32, 10)
    end)))
    $(Expr(:toplevel, :(baremodule GdkAnchorHints
    const FLIP_X = const GDK_ANCHOR_FLIP_X = Main.Base.convert(Main.Base.Int32, 1)
    const FLIP_Y = const GDK_ANCHOR_FLIP_Y = Main.Base.convert(Main.Base.Int32, 2)
    const SLIDE_X = const GDK_ANCHOR_SLIDE_X = Main.Base.convert(Main.Base.Int32, 4)
    const SLIDE_Y = const GDK_ANCHOR_SLIDE_Y = Main.Base.convert(Main.Base.Int32, 8)
    const RESIZE_X = const GDK_ANCHOR_RESIZE_X = Main.Base.convert(Main.Base.Int32, 16)
    const RESIZE_Y = const GDK_ANCHOR_RESIZE_Y = Main.Base.convert(Main.Base.Int32, 32)
    const FLIP = const GDK_ANCHOR_FLIP = Main.Base.convert(Main.Base.Int32, 3)
    const SLIDE = const GDK_ANCHOR_SLIDE = Main.Base.convert(Main.Base.Int32, 12)
    const RESIZE = const GDK_ANCHOR_RESIZE = Main.Base.convert(Main.Base.Int32, 48)
    end)))
    $(Expr(:toplevel, :(baremodule GdkWindowEdge
    const NORTH_WEST = const GDK_WINDOW_EDGE_NORTH_WEST = Main.Base.convert(Main.Base.Int32, 0)
    const NORTH = const GDK_WINDOW_EDGE_NORTH = Main.Base.convert(Main.Base.Int32, 1)
    const NORTH_EAST = const GDK_WINDOW_EDGE_NORTH_EAST = Main.Base.convert(Main.Base.Int32, 2)
    const WEST = const GDK_WINDOW_EDGE_WEST = Main.Base.convert(Main.Base.Int32, 3)
    const EAST = const GDK_WINDOW_EDGE_EAST = Main.Base.convert(Main.Base.Int32, 4)
    const SOUTH_WEST = const GDK_WINDOW_EDGE_SOUTH_WEST = Main.Base.convert(Main.Base.Int32, 5)
    const SOUTH = const GDK_WINDOW_EDGE_SOUTH = Main.Base.convert(Main.Base.Int32, 6)
    const SOUTH_EAST = const GDK_WINDOW_EDGE_SOUTH_EAST = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GdkFullscreenMode
    const CURRENT_MONITOR = const GDK_FULLSCREEN_ON_CURRENT_MONITOR = Main.Base.convert(Main.Base.Int32, 0)
    const ALL_MONITORS = const GDK_FULLSCREEN_ON_ALL_MONITORS = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkSeatCapabilities
    const NONE = const GDK_SEAT_CAPABILITY_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const POINTER = const GDK_SEAT_CAPABILITY_POINTER = Main.Base.convert(Main.Base.Int32, 1)
    const TOUCH = const GDK_SEAT_CAPABILITY_TOUCH = Main.Base.convert(Main.Base.Int32, 2)
    const TABLET_STYLUS = const GDK_SEAT_CAPABILITY_TABLET_STYLUS = Main.Base.convert(Main.Base.Int32, 4)
    const KEYBOARD = const GDK_SEAT_CAPABILITY_KEYBOARD = Main.Base.convert(Main.Base.Int32, 8)
    const ALL_POINTING = const GDK_SEAT_CAPABILITY_ALL_POINTING = Main.Base.convert(Main.Base.Int32, 7)
    const ALL = const GDK_SEAT_CAPABILITY_ALL = Main.Base.convert(Main.Base.Int32, 15)
    end)))
    $(Expr(:toplevel, :(baremodule GdkSubpixelLayout
    const UNKNOWN = const GDK_SUBPIXEL_LAYOUT_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const NONE = const GDK_SUBPIXEL_LAYOUT_NONE = Main.Base.convert(Main.Base.Int32, 1)
    const HORIZONTAL_RGB = const GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB = Main.Base.convert(Main.Base.Int32, 2)
    const HORIZONTAL_BGR = const GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR = Main.Base.convert(Main.Base.Int32, 3)
    const VERTICAL_RGB = const GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB = Main.Base.convert(Main.Base.Int32, 4)
    const VERTICAL_BGR = const GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GdkPixbufAlphaMode
    const BILEVEL = const GDK_PIXBUF_ALPHA_BILEVEL = Main.Base.convert(Main.Base.Int32, 0)
    const FULL = const GDK_PIXBUF_ALPHA_FULL = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkColorspace
    const RGB = const GDK_COLORSPACE_RGB = Main.Base.convert(Main.Base.Int32, 0)
    end)))
    $(Expr(:toplevel, :(baremodule GdkPixbufError
    const CORRUPT_IMAGE = const GDK_PIXBUF_ERROR_CORRUPT_IMAGE = Main.Base.convert(Main.Base.Int32, 0)
    const INSUFFICIENT_MEMORY = const GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = Main.Base.convert(Main.Base.Int32, 1)
    const BAD_OPTION = const GDK_PIXBUF_ERROR_BAD_OPTION = Main.Base.convert(Main.Base.Int32, 2)
    const UNKNOWN_TYPE = const GDK_PIXBUF_ERROR_UNKNOWN_TYPE = Main.Base.convert(Main.Base.Int32, 3)
    const UNSUPPORTED_OPERATION = const GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = Main.Base.convert(Main.Base.Int32, 4)
    const FAILED = const GDK_PIXBUF_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 5)
    const INCOMPLETE_ANIMATION = const GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GdkInterpType
    const NEAREST = const GDK_INTERP_NEAREST = Main.Base.convert(Main.Base.Int32, 0)
    const TILES = const GDK_INTERP_TILES = Main.Base.convert(Main.Base.Int32, 1)
    const BILINEAR = const GDK_INTERP_BILINEAR = Main.Base.convert(Main.Base.Int32, 2)
    const HYPER = const GDK_INTERP_HYPER = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GdkPixbufRotation
    const NONE = const GDK_PIXBUF_ROTATE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const COUNTERCLOCKWISE = const GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = Main.Base.convert(Main.Base.Int32, 90)
    const UPSIDEDOWN = const GDK_PIXBUF_ROTATE_UPSIDEDOWN = Main.Base.convert(Main.Base.Int32, 180)
    const CLOCKWISE = const GDK_PIXBUF_ROTATE_CLOCKWISE = Main.Base.convert(Main.Base.Int32, 270)
    end)))
    $(Expr(:toplevel, :(baremodule GdkCursorType
    const X_CURSOR = const GDK_X_CURSOR = Main.Base.convert(Main.Base.Int32, 0)
    const ARROW = const GDK_ARROW = Main.Base.convert(Main.Base.Int32, 2)
    const BASED_ARROW_DOWN = const GDK_BASED_ARROW_DOWN = Main.Base.convert(Main.Base.Int32, 4)
    const BASED_ARROW_UP = const GDK_BASED_ARROW_UP = Main.Base.convert(Main.Base.Int32, 6)
    const BOAT = const GDK_BOAT = Main.Base.convert(Main.Base.Int32, 8)
    const BOGOSITY = const GDK_BOGOSITY = Main.Base.convert(Main.Base.Int32, 10)
    const BOTTOM_LEFT_CORNER = const GDK_BOTTOM_LEFT_CORNER = Main.Base.convert(Main.Base.Int32, 12)
    const BOTTOM_RIGHT_CORNER = const GDK_BOTTOM_RIGHT_CORNER = Main.Base.convert(Main.Base.Int32, 14)
    const BOTTOM_SIDE = const GDK_BOTTOM_SIDE = Main.Base.convert(Main.Base.Int32, 16)
    const BOTTOM_TEE = const GDK_BOTTOM_TEE = Main.Base.convert(Main.Base.Int32, 18)
    const BOX_SPIRAL = const GDK_BOX_SPIRAL = Main.Base.convert(Main.Base.Int32, 20)
    const CENTER_PTR = const GDK_CENTER_PTR = Main.Base.convert(Main.Base.Int32, 22)
    const CIRCLE = const GDK_CIRCLE = Main.Base.convert(Main.Base.Int32, 24)
    const CLOCK = const GDK_CLOCK = Main.Base.convert(Main.Base.Int32, 26)
    const COFFEE_MUG = const GDK_COFFEE_MUG = Main.Base.convert(Main.Base.Int32, 28)
    const CROSS = const GDK_CROSS = Main.Base.convert(Main.Base.Int32, 30)
    const CROSS_REVERSE = const GDK_CROSS_REVERSE = Main.Base.convert(Main.Base.Int32, 32)
    const CROSSHAIR = const GDK_CROSSHAIR = Main.Base.convert(Main.Base.Int32, 34)
    const DIAMOND_CROSS = const GDK_DIAMOND_CROSS = Main.Base.convert(Main.Base.Int32, 36)
    const DOT = const GDK_DOT = Main.Base.convert(Main.Base.Int32, 38)
    const DOTBOX = const GDK_DOTBOX = Main.Base.convert(Main.Base.Int32, 40)
    const DOUBLE_ARROW = const GDK_DOUBLE_ARROW = Main.Base.convert(Main.Base.Int32, 42)
    const DRAFT_LARGE = const GDK_DRAFT_LARGE = Main.Base.convert(Main.Base.Int32, 44)
    const DRAFT_SMALL = const GDK_DRAFT_SMALL = Main.Base.convert(Main.Base.Int32, 46)
    const DRAPED_BOX = const GDK_DRAPED_BOX = Main.Base.convert(Main.Base.Int32, 48)
    const EXCHANGE = const GDK_EXCHANGE = Main.Base.convert(Main.Base.Int32, 50)
    const FLEUR = const GDK_FLEUR = Main.Base.convert(Main.Base.Int32, 52)
    const GOBBLER = const GDK_GOBBLER = Main.Base.convert(Main.Base.Int32, 54)
    const GUMBY = const GDK_GUMBY = Main.Base.convert(Main.Base.Int32, 56)
    const HAND1 = const GDK_HAND1 = Main.Base.convert(Main.Base.Int32, 58)
    const HAND2 = const GDK_HAND2 = Main.Base.convert(Main.Base.Int32, 60)
    const HEART = const GDK_HEART = Main.Base.convert(Main.Base.Int32, 62)
    const ICON = const GDK_ICON = Main.Base.convert(Main.Base.Int32, 64)
    const IRON_CROSS = const GDK_IRON_CROSS = Main.Base.convert(Main.Base.Int32, 66)
    const LEFT_PTR = const GDK_LEFT_PTR = Main.Base.convert(Main.Base.Int32, 68)
    const LEFT_SIDE = const GDK_LEFT_SIDE = Main.Base.convert(Main.Base.Int32, 70)
    const LEFT_TEE = const GDK_LEFT_TEE = Main.Base.convert(Main.Base.Int32, 72)
    const LEFTBUTTON = const GDK_LEFTBUTTON = Main.Base.convert(Main.Base.Int32, 74)
    const LL_ANGLE = const GDK_LL_ANGLE = Main.Base.convert(Main.Base.Int32, 76)
    const LR_ANGLE = const GDK_LR_ANGLE = Main.Base.convert(Main.Base.Int32, 78)
    const MAN = const GDK_MAN = Main.Base.convert(Main.Base.Int32, 80)
    const MIDDLEBUTTON = const GDK_MIDDLEBUTTON = Main.Base.convert(Main.Base.Int32, 82)
    const MOUSE = const GDK_MOUSE = Main.Base.convert(Main.Base.Int32, 84)
    const PENCIL = const GDK_PENCIL = Main.Base.convert(Main.Base.Int32, 86)
    const PIRATE = const GDK_PIRATE = Main.Base.convert(Main.Base.Int32, 88)
    const PLUS = const GDK_PLUS = Main.Base.convert(Main.Base.Int32, 90)
    const QUESTION_ARROW = const GDK_QUESTION_ARROW = Main.Base.convert(Main.Base.Int32, 92)
    const RIGHT_PTR = const GDK_RIGHT_PTR = Main.Base.convert(Main.Base.Int32, 94)
    const RIGHT_SIDE = const GDK_RIGHT_SIDE = Main.Base.convert(Main.Base.Int32, 96)
    const RIGHT_TEE = const GDK_RIGHT_TEE = Main.Base.convert(Main.Base.Int32, 98)
    const RIGHTBUTTON = const GDK_RIGHTBUTTON = Main.Base.convert(Main.Base.Int32, 100)
    const RTL_LOGO = const GDK_RTL_LOGO = Main.Base.convert(Main.Base.Int32, 102)
    const SAILBOAT = const GDK_SAILBOAT = Main.Base.convert(Main.Base.Int32, 104)
    const SB_DOWN_ARROW = const GDK_SB_DOWN_ARROW = Main.Base.convert(Main.Base.Int32, 106)
    const SB_H_DOUBLE_ARROW = const GDK_SB_H_DOUBLE_ARROW = Main.Base.convert(Main.Base.Int32, 108)
    const SB_LEFT_ARROW = const GDK_SB_LEFT_ARROW = Main.Base.convert(Main.Base.Int32, 110)
    const SB_RIGHT_ARROW = const GDK_SB_RIGHT_ARROW = Main.Base.convert(Main.Base.Int32, 112)
    const SB_UP_ARROW = const GDK_SB_UP_ARROW = Main.Base.convert(Main.Base.Int32, 114)
    const SB_V_DOUBLE_ARROW = const GDK_SB_V_DOUBLE_ARROW = Main.Base.convert(Main.Base.Int32, 116)
    const SHUTTLE = const GDK_SHUTTLE = Main.Base.convert(Main.Base.Int32, 118)
    const SIZING = const GDK_SIZING = Main.Base.convert(Main.Base.Int32, 120)
    const SPIDER = const GDK_SPIDER = Main.Base.convert(Main.Base.Int32, 122)
    const SPRAYCAN = const GDK_SPRAYCAN = Main.Base.convert(Main.Base.Int32, 124)
    const STAR = const GDK_STAR = Main.Base.convert(Main.Base.Int32, 126)
    const TARGET = const GDK_TARGET = Main.Base.convert(Main.Base.Int32, 128)
    const TCROSS = const GDK_TCROSS = Main.Base.convert(Main.Base.Int32, 130)
    const TOP_LEFT_ARROW = const GDK_TOP_LEFT_ARROW = Main.Base.convert(Main.Base.Int32, 132)
    const TOP_LEFT_CORNER = const GDK_TOP_LEFT_CORNER = Main.Base.convert(Main.Base.Int32, 134)
    const TOP_RIGHT_CORNER = const GDK_TOP_RIGHT_CORNER = Main.Base.convert(Main.Base.Int32, 136)
    const TOP_SIDE = const GDK_TOP_SIDE = Main.Base.convert(Main.Base.Int32, 138)
    const TOP_TEE = const GDK_TOP_TEE = Main.Base.convert(Main.Base.Int32, 140)
    const TREK = const GDK_TREK = Main.Base.convert(Main.Base.Int32, 142)
    const UL_ANGLE = const GDK_UL_ANGLE = Main.Base.convert(Main.Base.Int32, 144)
    const UMBRELLA = const GDK_UMBRELLA = Main.Base.convert(Main.Base.Int32, 146)
    const UR_ANGLE = const GDK_UR_ANGLE = Main.Base.convert(Main.Base.Int32, 148)
    const WATCH = const GDK_WATCH = Main.Base.convert(Main.Base.Int32, 150)
    const XTERM = const GDK_XTERM = Main.Base.convert(Main.Base.Int32, 152)
    const LAST_CURSOR = const GDK_LAST_CURSOR = Main.Base.convert(Main.Base.Int32, 153)
    const BLANK_CURSOR = const GDK_BLANK_CURSOR = Main.Base.convert(Main.Base.Int32, -2)
    const CURSOR_IS_PIXMAP = const GDK_CURSOR_IS_PIXMAP = Main.Base.convert(Main.Base.Int32, -1)
    end)))
    $(Expr(:toplevel, :(baremodule GdkDevicePadFeature
    const BUTTON = const GDK_DEVICE_PAD_FEATURE_BUTTON = Main.Base.convert(Main.Base.Int32, 0)
    const RING = const GDK_DEVICE_PAD_FEATURE_RING = Main.Base.convert(Main.Base.Int32, 1)
    const STRIP = const GDK_DEVICE_PAD_FEATURE_STRIP = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkPropMode
    const REPLACE = const GDK_PROP_MODE_REPLACE = Main.Base.convert(Main.Base.Int32, 0)
    const PREPEND = const GDK_PROP_MODE_PREPEND = Main.Base.convert(Main.Base.Int32, 1)
    const APPEND = const GDK_PROP_MODE_APPEND = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GdkVisualType
    const STATIC_GRAY = const GDK_VISUAL_STATIC_GRAY = Main.Base.convert(Main.Base.Int32, 0)
    const GRAYSCALE = const GDK_VISUAL_GRAYSCALE = Main.Base.convert(Main.Base.Int32, 1)
    const STATIC_COLOR = const GDK_VISUAL_STATIC_COLOR = Main.Base.convert(Main.Base.Int32, 2)
    const PSEUDO_COLOR = const GDK_VISUAL_PSEUDO_COLOR = Main.Base.convert(Main.Base.Int32, 3)
    const TRUE_COLOR = const GDK_VISUAL_TRUE_COLOR = Main.Base.convert(Main.Base.Int32, 4)
    const DIRECT_COLOR = const GDK_VISUAL_DIRECT_COLOR = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkAlign
    const FILL = const GTK_ALIGN_FILL = Main.Base.convert(Main.Base.Int32, 0)
    const START = const GTK_ALIGN_START = Main.Base.convert(Main.Base.Int32, 1)
    const END = const GTK_ALIGN_END = Main.Base.convert(Main.Base.Int32, 2)
    const CENTER = const GTK_ALIGN_CENTER = Main.Base.convert(Main.Base.Int32, 3)
    const BASELINE = const GTK_ALIGN_BASELINE = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkArrowType
    const UP = const GTK_ARROW_UP = Main.Base.convert(Main.Base.Int32, 0)
    const DOWN = const GTK_ARROW_DOWN = Main.Base.convert(Main.Base.Int32, 1)
    const LEFT = const GTK_ARROW_LEFT = Main.Base.convert(Main.Base.Int32, 2)
    const RIGHT = const GTK_ARROW_RIGHT = Main.Base.convert(Main.Base.Int32, 3)
    const NONE = const GTK_ARROW_NONE = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkBaselinePosition
    const TOP = const GTK_BASELINE_POSITION_TOP = Main.Base.convert(Main.Base.Int32, 0)
    const CENTER = const GTK_BASELINE_POSITION_CENTER = Main.Base.convert(Main.Base.Int32, 1)
    const BOTTOM = const GTK_BASELINE_POSITION_BOTTOM = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDeleteType
    const CHARS = const GTK_DELETE_CHARS = Main.Base.convert(Main.Base.Int32, 0)
    const WORD_ENDS = const GTK_DELETE_WORD_ENDS = Main.Base.convert(Main.Base.Int32, 1)
    const WORDS = const GTK_DELETE_WORDS = Main.Base.convert(Main.Base.Int32, 2)
    const DISPLAY_LINES = const GTK_DELETE_DISPLAY_LINES = Main.Base.convert(Main.Base.Int32, 3)
    const DISPLAY_LINE_ENDS = const GTK_DELETE_DISPLAY_LINE_ENDS = Main.Base.convert(Main.Base.Int32, 4)
    const PARAGRAPH_ENDS = const GTK_DELETE_PARAGRAPH_ENDS = Main.Base.convert(Main.Base.Int32, 5)
    const PARAGRAPHS = const GTK_DELETE_PARAGRAPHS = Main.Base.convert(Main.Base.Int32, 6)
    const WHITESPACE = const GTK_DELETE_WHITESPACE = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDirectionType
    const TAB_FORWARD = const GTK_DIR_TAB_FORWARD = Main.Base.convert(Main.Base.Int32, 0)
    const TAB_BACKWARD = const GTK_DIR_TAB_BACKWARD = Main.Base.convert(Main.Base.Int32, 1)
    const UP = const GTK_DIR_UP = Main.Base.convert(Main.Base.Int32, 2)
    const DOWN = const GTK_DIR_DOWN = Main.Base.convert(Main.Base.Int32, 3)
    const LEFT = const GTK_DIR_LEFT = Main.Base.convert(Main.Base.Int32, 4)
    const RIGHT = const GTK_DIR_RIGHT = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIconSize
    const INVALID = const GTK_ICON_SIZE_INVALID = Main.Base.convert(Main.Base.Int32, 0)
    const MENU = const GTK_ICON_SIZE_MENU = Main.Base.convert(Main.Base.Int32, 1)
    const SMALL_TOOLBAR = const GTK_ICON_SIZE_SMALL_TOOLBAR = Main.Base.convert(Main.Base.Int32, 2)
    const LARGE_TOOLBAR = const GTK_ICON_SIZE_LARGE_TOOLBAR = Main.Base.convert(Main.Base.Int32, 3)
    const BUTTON = const GTK_ICON_SIZE_BUTTON = Main.Base.convert(Main.Base.Int32, 4)
    const DND = const GTK_ICON_SIZE_DND = Main.Base.convert(Main.Base.Int32, 5)
    const DIALOG = const GTK_ICON_SIZE_DIALOG = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSensitivityType
    const AUTO = const GTK_SENSITIVITY_AUTO = Main.Base.convert(Main.Base.Int32, 0)
    const ON = const GTK_SENSITIVITY_ON = Main.Base.convert(Main.Base.Int32, 1)
    const OFF = const GTK_SENSITIVITY_OFF = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextDirection
    const NONE = const GTK_TEXT_DIR_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const LTR = const GTK_TEXT_DIR_LTR = Main.Base.convert(Main.Base.Int32, 1)
    const RTL = const GTK_TEXT_DIR_RTL = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkJustification
    const LEFT = const GTK_JUSTIFY_LEFT = Main.Base.convert(Main.Base.Int32, 0)
    const RIGHT = const GTK_JUSTIFY_RIGHT = Main.Base.convert(Main.Base.Int32, 1)
    const CENTER = const GTK_JUSTIFY_CENTER = Main.Base.convert(Main.Base.Int32, 2)
    const FILL = const GTK_JUSTIFY_FILL = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkMenuDirectionType
    const PARENT = const GTK_MENU_DIR_PARENT = Main.Base.convert(Main.Base.Int32, 0)
    const CHILD = const GTK_MENU_DIR_CHILD = Main.Base.convert(Main.Base.Int32, 1)
    const NEXT = const GTK_MENU_DIR_NEXT = Main.Base.convert(Main.Base.Int32, 2)
    const PREV = const GTK_MENU_DIR_PREV = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkMessageType
    const INFO = const GTK_MESSAGE_INFO = Main.Base.convert(Main.Base.Int32, 0)
    const WARNING = const GTK_MESSAGE_WARNING = Main.Base.convert(Main.Base.Int32, 1)
    const QUESTION = const GTK_MESSAGE_QUESTION = Main.Base.convert(Main.Base.Int32, 2)
    const ERROR = const GTK_MESSAGE_ERROR = Main.Base.convert(Main.Base.Int32, 3)
    const OTHER = const GTK_MESSAGE_OTHER = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkMovementStep
    const LOGICAL_POSITIONS = const GTK_MOVEMENT_LOGICAL_POSITIONS = Main.Base.convert(Main.Base.Int32, 0)
    const VISUAL_POSITIONS = const GTK_MOVEMENT_VISUAL_POSITIONS = Main.Base.convert(Main.Base.Int32, 1)
    const WORDS = const GTK_MOVEMENT_WORDS = Main.Base.convert(Main.Base.Int32, 2)
    const DISPLAY_LINES = const GTK_MOVEMENT_DISPLAY_LINES = Main.Base.convert(Main.Base.Int32, 3)
    const DISPLAY_LINE_ENDS = const GTK_MOVEMENT_DISPLAY_LINE_ENDS = Main.Base.convert(Main.Base.Int32, 4)
    const PARAGRAPHS = const GTK_MOVEMENT_PARAGRAPHS = Main.Base.convert(Main.Base.Int32, 5)
    const PARAGRAPH_ENDS = const GTK_MOVEMENT_PARAGRAPH_ENDS = Main.Base.convert(Main.Base.Int32, 6)
    const PAGES = const GTK_MOVEMENT_PAGES = Main.Base.convert(Main.Base.Int32, 7)
    const BUFFER_ENDS = const GTK_MOVEMENT_BUFFER_ENDS = Main.Base.convert(Main.Base.Int32, 8)
    const HORIZONTAL_PAGES = const GTK_MOVEMENT_HORIZONTAL_PAGES = Main.Base.convert(Main.Base.Int32, 9)
    end)))
    $(Expr(:toplevel, :(baremodule GtkScrollStep
    const STEPS = const GTK_SCROLL_STEPS = Main.Base.convert(Main.Base.Int32, 0)
    const PAGES = const GTK_SCROLL_PAGES = Main.Base.convert(Main.Base.Int32, 1)
    const ENDS = const GTK_SCROLL_ENDS = Main.Base.convert(Main.Base.Int32, 2)
    const HORIZONTAL_STEPS = const GTK_SCROLL_HORIZONTAL_STEPS = Main.Base.convert(Main.Base.Int32, 3)
    const HORIZONTAL_PAGES = const GTK_SCROLL_HORIZONTAL_PAGES = Main.Base.convert(Main.Base.Int32, 4)
    const HORIZONTAL_ENDS = const GTK_SCROLL_HORIZONTAL_ENDS = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkOrientation
    const HORIZONTAL = const GTK_ORIENTATION_HORIZONTAL = Main.Base.convert(Main.Base.Int32, 0)
    const VERTICAL = const GTK_ORIENTATION_VERTICAL = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPackType
    const START = const GTK_PACK_START = Main.Base.convert(Main.Base.Int32, 0)
    const END = const GTK_PACK_END = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPositionType
    const LEFT = const GTK_POS_LEFT = Main.Base.convert(Main.Base.Int32, 0)
    const RIGHT = const GTK_POS_RIGHT = Main.Base.convert(Main.Base.Int32, 1)
    const TOP = const GTK_POS_TOP = Main.Base.convert(Main.Base.Int32, 2)
    const BOTTOM = const GTK_POS_BOTTOM = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkReliefStyle
    const NORMAL = const GTK_RELIEF_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const HALF = const GTK_RELIEF_HALF = Main.Base.convert(Main.Base.Int32, 1)
    const NONE = const GTK_RELIEF_NONE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkScrollType
    const NONE = const GTK_SCROLL_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const JUMP = const GTK_SCROLL_JUMP = Main.Base.convert(Main.Base.Int32, 1)
    const STEP_BACKWARD = const GTK_SCROLL_STEP_BACKWARD = Main.Base.convert(Main.Base.Int32, 2)
    const STEP_FORWARD = const GTK_SCROLL_STEP_FORWARD = Main.Base.convert(Main.Base.Int32, 3)
    const PAGE_BACKWARD = const GTK_SCROLL_PAGE_BACKWARD = Main.Base.convert(Main.Base.Int32, 4)
    const PAGE_FORWARD = const GTK_SCROLL_PAGE_FORWARD = Main.Base.convert(Main.Base.Int32, 5)
    const STEP_UP = const GTK_SCROLL_STEP_UP = Main.Base.convert(Main.Base.Int32, 6)
    const STEP_DOWN = const GTK_SCROLL_STEP_DOWN = Main.Base.convert(Main.Base.Int32, 7)
    const PAGE_UP = const GTK_SCROLL_PAGE_UP = Main.Base.convert(Main.Base.Int32, 8)
    const PAGE_DOWN = const GTK_SCROLL_PAGE_DOWN = Main.Base.convert(Main.Base.Int32, 9)
    const STEP_LEFT = const GTK_SCROLL_STEP_LEFT = Main.Base.convert(Main.Base.Int32, 10)
    const STEP_RIGHT = const GTK_SCROLL_STEP_RIGHT = Main.Base.convert(Main.Base.Int32, 11)
    const PAGE_LEFT = const GTK_SCROLL_PAGE_LEFT = Main.Base.convert(Main.Base.Int32, 12)
    const PAGE_RIGHT = const GTK_SCROLL_PAGE_RIGHT = Main.Base.convert(Main.Base.Int32, 13)
    const START = const GTK_SCROLL_START = Main.Base.convert(Main.Base.Int32, 14)
    const END = const GTK_SCROLL_END = Main.Base.convert(Main.Base.Int32, 15)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSelectionMode
    const NONE = const GTK_SELECTION_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const SINGLE = const GTK_SELECTION_SINGLE = Main.Base.convert(Main.Base.Int32, 1)
    const BROWSE = const GTK_SELECTION_BROWSE = Main.Base.convert(Main.Base.Int32, 2)
    const MULTIPLE = const GTK_SELECTION_MULTIPLE = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkShadowType
    const NONE = const GTK_SHADOW_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const IN = const GTK_SHADOW_IN = Main.Base.convert(Main.Base.Int32, 1)
    const OUT = const GTK_SHADOW_OUT = Main.Base.convert(Main.Base.Int32, 2)
    const ETCHED_IN = const GTK_SHADOW_ETCHED_IN = Main.Base.convert(Main.Base.Int32, 3)
    const ETCHED_OUT = const GTK_SHADOW_ETCHED_OUT = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkStateType
    const NORMAL = const GTK_STATE_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const ACTIVE = const GTK_STATE_ACTIVE = Main.Base.convert(Main.Base.Int32, 1)
    const PRELIGHT = const GTK_STATE_PRELIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const SELECTED = const GTK_STATE_SELECTED = Main.Base.convert(Main.Base.Int32, 3)
    const INSENSITIVE = const GTK_STATE_INSENSITIVE = Main.Base.convert(Main.Base.Int32, 4)
    const INCONSISTENT = const GTK_STATE_INCONSISTENT = Main.Base.convert(Main.Base.Int32, 5)
    const FOCUSED = const GTK_STATE_FOCUSED = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkToolbarStyle
    const ICONS = const GTK_TOOLBAR_ICONS = Main.Base.convert(Main.Base.Int32, 0)
    const TEXT = const GTK_TOOLBAR_TEXT = Main.Base.convert(Main.Base.Int32, 1)
    const BOTH = const GTK_TOOLBAR_BOTH = Main.Base.convert(Main.Base.Int32, 2)
    const BOTH_HORIZ = const GTK_TOOLBAR_BOTH_HORIZ = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkWrapMode
    const NONE = const GTK_WRAP_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CHAR = const GTK_WRAP_CHAR = Main.Base.convert(Main.Base.Int32, 1)
    const WORD = const GTK_WRAP_WORD = Main.Base.convert(Main.Base.Int32, 2)
    const WORD_CHAR = const GTK_WRAP_WORD_CHAR = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSortType
    const ASCENDING = const GTK_SORT_ASCENDING = Main.Base.convert(Main.Base.Int32, 0)
    const DESCENDING = const GTK_SORT_DESCENDING = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIMPreeditStyle
    const NOTHING = const GTK_IM_PREEDIT_NOTHING = Main.Base.convert(Main.Base.Int32, 0)
    const CALLBACK = const GTK_IM_PREEDIT_CALLBACK = Main.Base.convert(Main.Base.Int32, 1)
    const NONE = const GTK_IM_PREEDIT_NONE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIMStatusStyle
    const NOTHING = const GTK_IM_STATUS_NOTHING = Main.Base.convert(Main.Base.Int32, 0)
    const CALLBACK = const GTK_IM_STATUS_CALLBACK = Main.Base.convert(Main.Base.Int32, 1)
    const NONE = const GTK_IM_STATUS_NONE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPackDirection
    const LTR = const GTK_PACK_DIRECTION_LTR = Main.Base.convert(Main.Base.Int32, 0)
    const RTL = const GTK_PACK_DIRECTION_RTL = Main.Base.convert(Main.Base.Int32, 1)
    const TTB = const GTK_PACK_DIRECTION_TTB = Main.Base.convert(Main.Base.Int32, 2)
    const BTT = const GTK_PACK_DIRECTION_BTT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintPages
    const ALL = const GTK_PRINT_PAGES_ALL = Main.Base.convert(Main.Base.Int32, 0)
    const CURRENT = const GTK_PRINT_PAGES_CURRENT = Main.Base.convert(Main.Base.Int32, 1)
    const RANGES = const GTK_PRINT_PAGES_RANGES = Main.Base.convert(Main.Base.Int32, 2)
    const SELECTION = const GTK_PRINT_PAGES_SELECTION = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPageSet
    const ALL = const GTK_PAGE_SET_ALL = Main.Base.convert(Main.Base.Int32, 0)
    const EVEN = const GTK_PAGE_SET_EVEN = Main.Base.convert(Main.Base.Int32, 1)
    const ODD = const GTK_PAGE_SET_ODD = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkNumberUpLayout
    const LEFT_TO_RIGHT_TOP_TO_BOTTOM = const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = Main.Base.convert(Main.Base.Int32, 0)
    const LEFT_TO_RIGHT_BOTTOM_TO_TOP = const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = Main.Base.convert(Main.Base.Int32, 1)
    const RIGHT_TO_LEFT_TOP_TO_BOTTOM = const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = Main.Base.convert(Main.Base.Int32, 2)
    const RIGHT_TO_LEFT_BOTTOM_TO_TOP = const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = Main.Base.convert(Main.Base.Int32, 3)
    const TOP_TO_BOTTOM_LEFT_TO_RIGHT = const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = Main.Base.convert(Main.Base.Int32, 4)
    const TOP_TO_BOTTOM_RIGHT_TO_LEFT = const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = Main.Base.convert(Main.Base.Int32, 5)
    const BOTTOM_TO_TOP_LEFT_TO_RIGHT = const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = Main.Base.convert(Main.Base.Int32, 6)
    const BOTTOM_TO_TOP_RIGHT_TO_LEFT = const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPageOrientation
    const PORTRAIT = const GTK_PAGE_ORIENTATION_PORTRAIT = Main.Base.convert(Main.Base.Int32, 0)
    const LANDSCAPE = const GTK_PAGE_ORIENTATION_LANDSCAPE = Main.Base.convert(Main.Base.Int32, 1)
    const REVERSE_PORTRAIT = const GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = Main.Base.convert(Main.Base.Int32, 2)
    const REVERSE_LANDSCAPE = const GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintQuality
    const LOW = const GTK_PRINT_QUALITY_LOW = Main.Base.convert(Main.Base.Int32, 0)
    const NORMAL = const GTK_PRINT_QUALITY_NORMAL = Main.Base.convert(Main.Base.Int32, 1)
    const HIGH = const GTK_PRINT_QUALITY_HIGH = Main.Base.convert(Main.Base.Int32, 2)
    const DRAFT = const GTK_PRINT_QUALITY_DRAFT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintDuplex
    const SIMPLEX = const GTK_PRINT_DUPLEX_SIMPLEX = Main.Base.convert(Main.Base.Int32, 0)
    const HORIZONTAL = const GTK_PRINT_DUPLEX_HORIZONTAL = Main.Base.convert(Main.Base.Int32, 1)
    const VERTICAL = const GTK_PRINT_DUPLEX_VERTICAL = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkUnit
    const NONE = const GTK_UNIT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const POINTS = const GTK_UNIT_POINTS = Main.Base.convert(Main.Base.Int32, 1)
    const INCH = const GTK_UNIT_INCH = Main.Base.convert(Main.Base.Int32, 2)
    const MM = const GTK_UNIT_MM = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTreeViewGridLines
    const NONE = const GTK_TREE_VIEW_GRID_LINES_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const HORIZONTAL = const GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = Main.Base.convert(Main.Base.Int32, 1)
    const VERTICAL = const GTK_TREE_VIEW_GRID_LINES_VERTICAL = Main.Base.convert(Main.Base.Int32, 2)
    const BOTH = const GTK_TREE_VIEW_GRID_LINES_BOTH = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDragResult
    const SUCCESS = const GTK_DRAG_RESULT_SUCCESS = Main.Base.convert(Main.Base.Int32, 0)
    const NO_TARGET = const GTK_DRAG_RESULT_NO_TARGET = Main.Base.convert(Main.Base.Int32, 1)
    const USER_CANCELLED = const GTK_DRAG_RESULT_USER_CANCELLED = Main.Base.convert(Main.Base.Int32, 2)
    const TIMEOUT_EXPIRED = const GTK_DRAG_RESULT_TIMEOUT_EXPIRED = Main.Base.convert(Main.Base.Int32, 3)
    const GRAB_BROKEN = const GTK_DRAG_RESULT_GRAB_BROKEN = Main.Base.convert(Main.Base.Int32, 4)
    const ERROR = const GTK_DRAG_RESULT_ERROR = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSizeGroupMode
    const NONE = const GTK_SIZE_GROUP_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const HORIZONTAL = const GTK_SIZE_GROUP_HORIZONTAL = Main.Base.convert(Main.Base.Int32, 1)
    const VERTICAL = const GTK_SIZE_GROUP_VERTICAL = Main.Base.convert(Main.Base.Int32, 2)
    const BOTH = const GTK_SIZE_GROUP_BOTH = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSizeRequestMode
    const HEIGHT_FOR_WIDTH = const GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = Main.Base.convert(Main.Base.Int32, 0)
    const WIDTH_FOR_HEIGHT = const GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = Main.Base.convert(Main.Base.Int32, 1)
    const CONSTANT_SIZE = const GTK_SIZE_REQUEST_CONSTANT_SIZE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkScrollablePolicy
    const MINIMUM = const GTK_SCROLL_MINIMUM = Main.Base.convert(Main.Base.Int32, 0)
    const NATURAL = const GTK_SCROLL_NATURAL = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkStateFlags
    const NORMAL = const GTK_STATE_FLAG_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const ACTIVE = const GTK_STATE_FLAG_ACTIVE = Main.Base.convert(Main.Base.Int32, 1)
    const PRELIGHT = const GTK_STATE_FLAG_PRELIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const SELECTED = const GTK_STATE_FLAG_SELECTED = Main.Base.convert(Main.Base.Int32, 4)
    const INSENSITIVE = const GTK_STATE_FLAG_INSENSITIVE = Main.Base.convert(Main.Base.Int32, 8)
    const INCONSISTENT = const GTK_STATE_FLAG_INCONSISTENT = Main.Base.convert(Main.Base.Int32, 16)
    const FOCUSED = const GTK_STATE_FLAG_FOCUSED = Main.Base.convert(Main.Base.Int32, 32)
    const BACKDROP = const GTK_STATE_FLAG_BACKDROP = Main.Base.convert(Main.Base.Int32, 64)
    const DIR_LTR = const GTK_STATE_FLAG_DIR_LTR = Main.Base.convert(Main.Base.Int32, 128)
    const DIR_RTL = const GTK_STATE_FLAG_DIR_RTL = Main.Base.convert(Main.Base.Int32, 256)
    const LINK = const GTK_STATE_FLAG_LINK = Main.Base.convert(Main.Base.Int32, 512)
    const VISITED = const GTK_STATE_FLAG_VISITED = Main.Base.convert(Main.Base.Int32, 1024)
    const CHECKED = const GTK_STATE_FLAG_CHECKED = Main.Base.convert(Main.Base.Int32, 2048)
    const DROP_ACTIVE = const GTK_STATE_FLAG_DROP_ACTIVE = Main.Base.convert(Main.Base.Int32, 4096)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRegionFlags
    const EVEN = const GTK_REGION_EVEN = Main.Base.convert(Main.Base.Int32, 1)
    const ODD = const GTK_REGION_ODD = Main.Base.convert(Main.Base.Int32, 2)
    const FIRST = const GTK_REGION_FIRST = Main.Base.convert(Main.Base.Int32, 4)
    const LAST = const GTK_REGION_LAST = Main.Base.convert(Main.Base.Int32, 8)
    const ONLY = const GTK_REGION_ONLY = Main.Base.convert(Main.Base.Int32, 16)
    const SORTED = const GTK_REGION_SORTED = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GtkJunctionSides
    const NONE = const GTK_JUNCTION_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CORNER_TOPLEFT = const GTK_JUNCTION_CORNER_TOPLEFT = Main.Base.convert(Main.Base.Int32, 1)
    const CORNER_TOPRIGHT = const GTK_JUNCTION_CORNER_TOPRIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const CORNER_BOTTOMLEFT = const GTK_JUNCTION_CORNER_BOTTOMLEFT = Main.Base.convert(Main.Base.Int32, 4)
    const CORNER_BOTTOMRIGHT = const GTK_JUNCTION_CORNER_BOTTOMRIGHT = Main.Base.convert(Main.Base.Int32, 8)
    const TOP = const GTK_JUNCTION_TOP = Main.Base.convert(Main.Base.Int32, 3)
    const BOTTOM = const GTK_JUNCTION_BOTTOM = Main.Base.convert(Main.Base.Int32, 12)
    const LEFT = const GTK_JUNCTION_LEFT = Main.Base.convert(Main.Base.Int32, 5)
    const RIGHT = const GTK_JUNCTION_RIGHT = Main.Base.convert(Main.Base.Int32, 10)
    end)))
    $(Expr(:toplevel, :(baremodule GtkBorderStyle
    const NONE = const GTK_BORDER_STYLE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const SOLID = const GTK_BORDER_STYLE_SOLID = Main.Base.convert(Main.Base.Int32, 1)
    const INSET = const GTK_BORDER_STYLE_INSET = Main.Base.convert(Main.Base.Int32, 2)
    const OUTSET = const GTK_BORDER_STYLE_OUTSET = Main.Base.convert(Main.Base.Int32, 3)
    const HIDDEN = const GTK_BORDER_STYLE_HIDDEN = Main.Base.convert(Main.Base.Int32, 4)
    const DOTTED = const GTK_BORDER_STYLE_DOTTED = Main.Base.convert(Main.Base.Int32, 5)
    const DASHED = const GTK_BORDER_STYLE_DASHED = Main.Base.convert(Main.Base.Int32, 6)
    const DOUBLE = const GTK_BORDER_STYLE_DOUBLE = Main.Base.convert(Main.Base.Int32, 7)
    const GROOVE = const GTK_BORDER_STYLE_GROOVE = Main.Base.convert(Main.Base.Int32, 8)
    const RIDGE = const GTK_BORDER_STYLE_RIDGE = Main.Base.convert(Main.Base.Int32, 9)
    end)))
    $(Expr(:toplevel, :(baremodule GtkLevelBarMode
    const CONTINUOUS = const GTK_LEVEL_BAR_MODE_CONTINUOUS = Main.Base.convert(Main.Base.Int32, 0)
    const DISCRETE = const GTK_LEVEL_BAR_MODE_DISCRETE = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkInputPurpose
    const FREE_FORM = const GTK_INPUT_PURPOSE_FREE_FORM = Main.Base.convert(Main.Base.Int32, 0)
    const ALPHA = const GTK_INPUT_PURPOSE_ALPHA = Main.Base.convert(Main.Base.Int32, 1)
    const DIGITS = const GTK_INPUT_PURPOSE_DIGITS = Main.Base.convert(Main.Base.Int32, 2)
    const NUMBER = const GTK_INPUT_PURPOSE_NUMBER = Main.Base.convert(Main.Base.Int32, 3)
    const PHONE = const GTK_INPUT_PURPOSE_PHONE = Main.Base.convert(Main.Base.Int32, 4)
    const URL = const GTK_INPUT_PURPOSE_URL = Main.Base.convert(Main.Base.Int32, 5)
    const EMAIL = const GTK_INPUT_PURPOSE_EMAIL = Main.Base.convert(Main.Base.Int32, 6)
    const NAME = const GTK_INPUT_PURPOSE_NAME = Main.Base.convert(Main.Base.Int32, 7)
    const PASSWORD = const GTK_INPUT_PURPOSE_PASSWORD = Main.Base.convert(Main.Base.Int32, 8)
    const PIN = const GTK_INPUT_PURPOSE_PIN = Main.Base.convert(Main.Base.Int32, 9)
    end)))
    $(Expr(:toplevel, :(baremodule GtkInputHints
    const NONE = const GTK_INPUT_HINT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const SPELLCHECK = const GTK_INPUT_HINT_SPELLCHECK = Main.Base.convert(Main.Base.Int32, 1)
    const NO_SPELLCHECK = const GTK_INPUT_HINT_NO_SPELLCHECK = Main.Base.convert(Main.Base.Int32, 2)
    const WORD_COMPLETION = const GTK_INPUT_HINT_WORD_COMPLETION = Main.Base.convert(Main.Base.Int32, 4)
    const LOWERCASE = const GTK_INPUT_HINT_LOWERCASE = Main.Base.convert(Main.Base.Int32, 8)
    const UPPERCASE_CHARS = const GTK_INPUT_HINT_UPPERCASE_CHARS = Main.Base.convert(Main.Base.Int32, 16)
    const UPPERCASE_WORDS = const GTK_INPUT_HINT_UPPERCASE_WORDS = Main.Base.convert(Main.Base.Int32, 32)
    const UPPERCASE_SENTENCES = const GTK_INPUT_HINT_UPPERCASE_SENTENCES = Main.Base.convert(Main.Base.Int32, 64)
    const INHIBIT_OSK = const GTK_INPUT_HINT_INHIBIT_OSK = Main.Base.convert(Main.Base.Int32, 128)
    const VERTICAL_WRITING = const GTK_INPUT_HINT_VERTICAL_WRITING = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPropagationPhase
    const NONE = const GTK_PHASE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CAPTURE = const GTK_PHASE_CAPTURE = Main.Base.convert(Main.Base.Int32, 1)
    const BUBBLE = const GTK_PHASE_BUBBLE = Main.Base.convert(Main.Base.Int32, 2)
    const TARGET = const GTK_PHASE_TARGET = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkEventSequenceState
    const NONE = const GTK_EVENT_SEQUENCE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CLAIMED = const GTK_EVENT_SEQUENCE_CLAIMED = Main.Base.convert(Main.Base.Int32, 1)
    const DENIED = const GTK_EVENT_SEQUENCE_DENIED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPanDirection
    const LEFT = const GTK_PAN_DIRECTION_LEFT = Main.Base.convert(Main.Base.Int32, 0)
    const RIGHT = const GTK_PAN_DIRECTION_RIGHT = Main.Base.convert(Main.Base.Int32, 1)
    const UP = const GTK_PAN_DIRECTION_UP = Main.Base.convert(Main.Base.Int32, 2)
    const DOWN = const GTK_PAN_DIRECTION_DOWN = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPopoverConstraint
    const NONE = const GTK_POPOVER_CONSTRAINT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const WINDOW = const GTK_POPOVER_CONSTRAINT_WINDOW = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkAccelFlags
    const VISIBLE = const GTK_ACCEL_VISIBLE = Main.Base.convert(Main.Base.Int32, 1)
    const LOCKED = const GTK_ACCEL_LOCKED = Main.Base.convert(Main.Base.Int32, 2)
    const MASK = const GTK_ACCEL_MASK = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkWidgetHelpType
    const TOOLTIP = const GTK_WIDGET_HELP_TOOLTIP = Main.Base.convert(Main.Base.Int32, 0)
    const WHATS_THIS = const GTK_WIDGET_HELP_WHATS_THIS = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkApplicationInhibitFlags
    const LOGOUT = const GTK_APPLICATION_INHIBIT_LOGOUT = Main.Base.convert(Main.Base.Int32, 1)
    const SWITCH = const GTK_APPLICATION_INHIBIT_SWITCH = Main.Base.convert(Main.Base.Int32, 2)
    const SUSPEND = const GTK_APPLICATION_INHIBIT_SUSPEND = Main.Base.convert(Main.Base.Int32, 4)
    const IDLE = const GTK_APPLICATION_INHIBIT_IDLE = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkResizeMode
    const PARENT = const GTK_RESIZE_PARENT = Main.Base.convert(Main.Base.Int32, 0)
    const QUEUE = const GTK_RESIZE_QUEUE = Main.Base.convert(Main.Base.Int32, 1)
    const IMMEDIATE = const GTK_RESIZE_IMMEDIATE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkWindowType
    const TOPLEVEL = const GTK_WINDOW_TOPLEVEL = Main.Base.convert(Main.Base.Int32, 0)
    const POPUP = const GTK_WINDOW_POPUP = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkWindowPosition
    const NONE = const GTK_WIN_POS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CENTER = const GTK_WIN_POS_CENTER = Main.Base.convert(Main.Base.Int32, 1)
    const MOUSE = const GTK_WIN_POS_MOUSE = Main.Base.convert(Main.Base.Int32, 2)
    const CENTER_ALWAYS = const GTK_WIN_POS_CENTER_ALWAYS = Main.Base.convert(Main.Base.Int32, 3)
    const CENTER_ON_PARENT = const GTK_WIN_POS_CENTER_ON_PARENT = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDialogFlags
    const MODAL = const GTK_DIALOG_MODAL = Main.Base.convert(Main.Base.Int32, 1)
    const DESTROY_WITH_PARENT = const GTK_DIALOG_DESTROY_WITH_PARENT = Main.Base.convert(Main.Base.Int32, 2)
    const USE_HEADER_BAR = const GTK_DIALOG_USE_HEADER_BAR = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkResponseType
    const NONE = const GTK_RESPONSE_NONE = Main.Base.convert(Main.Base.Int32, -1)
    const REJECT = const GTK_RESPONSE_REJECT = Main.Base.convert(Main.Base.Int32, -2)
    const ACCEPT = const GTK_RESPONSE_ACCEPT = Main.Base.convert(Main.Base.Int32, -3)
    const DELETE_EVENT = const GTK_RESPONSE_DELETE_EVENT = Main.Base.convert(Main.Base.Int32, -4)
    const OK = const GTK_RESPONSE_OK = Main.Base.convert(Main.Base.Int32, -5)
    const CANCEL = const GTK_RESPONSE_CANCEL = Main.Base.convert(Main.Base.Int32, -6)
    const CLOSE = const GTK_RESPONSE_CLOSE = Main.Base.convert(Main.Base.Int32, -7)
    const YES = const GTK_RESPONSE_YES = Main.Base.convert(Main.Base.Int32, -8)
    const NO = const GTK_RESPONSE_NO = Main.Base.convert(Main.Base.Int32, -9)
    const APPLY = const GTK_RESPONSE_APPLY = Main.Base.convert(Main.Base.Int32, -10)
    const HELP = const GTK_RESPONSE_HELP = Main.Base.convert(Main.Base.Int32, -11)
    end)))
    $(Expr(:toplevel, :(baremodule GtkLicense
    const UNKNOWN = const GTK_LICENSE_UNKNOWN = Main.Base.convert(Main.Base.Int32, 0)
    const CUSTOM = const GTK_LICENSE_CUSTOM = Main.Base.convert(Main.Base.Int32, 1)
    const GPL_2_0 = const GTK_LICENSE_GPL_2_0 = Main.Base.convert(Main.Base.Int32, 2)
    const GPL_3_0 = const GTK_LICENSE_GPL_3_0 = Main.Base.convert(Main.Base.Int32, 3)
    const LGPL_2_1 = const GTK_LICENSE_LGPL_2_1 = Main.Base.convert(Main.Base.Int32, 4)
    const LGPL_3_0 = const GTK_LICENSE_LGPL_3_0 = Main.Base.convert(Main.Base.Int32, 5)
    const BSD = const GTK_LICENSE_BSD = Main.Base.convert(Main.Base.Int32, 6)
    const MIT_X11 = const GTK_LICENSE_MIT_X11 = Main.Base.convert(Main.Base.Int32, 7)
    const ARTISTIC = const GTK_LICENSE_ARTISTIC = Main.Base.convert(Main.Base.Int32, 8)
    const GPL_2_0_ONLY = const GTK_LICENSE_GPL_2_0_ONLY = Main.Base.convert(Main.Base.Int32, 9)
    const GPL_3_0_ONLY = const GTK_LICENSE_GPL_3_0_ONLY = Main.Base.convert(Main.Base.Int32, 10)
    const LGPL_2_1_ONLY = const GTK_LICENSE_LGPL_2_1_ONLY = Main.Base.convert(Main.Base.Int32, 11)
    const LGPL_3_0_ONLY = const GTK_LICENSE_LGPL_3_0_ONLY = Main.Base.convert(Main.Base.Int32, 12)
    const AGPL_3_0 = const GTK_LICENSE_AGPL_3_0 = Main.Base.convert(Main.Base.Int32, 13)
    end)))
    $(Expr(:toplevel, :(baremodule GtkArrowPlacement
    const BOTH = const GTK_ARROWS_BOTH = Main.Base.convert(Main.Base.Int32, 0)
    const START = const GTK_ARROWS_START = Main.Base.convert(Main.Base.Int32, 1)
    const END = const GTK_ARROWS_END = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTreeModelFlags
    const ITERS_PERSIST = const GTK_TREE_MODEL_ITERS_PERSIST = Main.Base.convert(Main.Base.Int32, 1)
    const LIST_ONLY = const GTK_TREE_MODEL_LIST_ONLY = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCellRendererState
    const SELECTED = const GTK_CELL_RENDERER_SELECTED = Main.Base.convert(Main.Base.Int32, 1)
    const PRELIT = const GTK_CELL_RENDERER_PRELIT = Main.Base.convert(Main.Base.Int32, 2)
    const INSENSITIVE = const GTK_CELL_RENDERER_INSENSITIVE = Main.Base.convert(Main.Base.Int32, 4)
    const SORTED = const GTK_CELL_RENDERER_SORTED = Main.Base.convert(Main.Base.Int32, 8)
    const FOCUSED = const GTK_CELL_RENDERER_FOCUSED = Main.Base.convert(Main.Base.Int32, 16)
    const EXPANDABLE = const GTK_CELL_RENDERER_EXPANDABLE = Main.Base.convert(Main.Base.Int32, 32)
    const EXPANDED = const GTK_CELL_RENDERER_EXPANDED = Main.Base.convert(Main.Base.Int32, 64)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCellRendererMode
    const INERT = const GTK_CELL_RENDERER_MODE_INERT = Main.Base.convert(Main.Base.Int32, 0)
    const ACTIVATABLE = const GTK_CELL_RENDERER_MODE_ACTIVATABLE = Main.Base.convert(Main.Base.Int32, 1)
    const EDITABLE = const GTK_CELL_RENDERER_MODE_EDITABLE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTreeViewColumnSizing
    const GROW_ONLY = const GTK_TREE_VIEW_COLUMN_GROW_ONLY = Main.Base.convert(Main.Base.Int32, 0)
    const AUTOSIZE = const GTK_TREE_VIEW_COLUMN_AUTOSIZE = Main.Base.convert(Main.Base.Int32, 1)
    const FIXED = const GTK_TREE_VIEW_COLUMN_FIXED = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextSearchFlags
    const VISIBLE_ONLY = const GTK_TEXT_SEARCH_VISIBLE_ONLY = Main.Base.convert(Main.Base.Int32, 1)
    const TEXT_ONLY = const GTK_TEXT_SEARCH_TEXT_ONLY = Main.Base.convert(Main.Base.Int32, 2)
    const CASE_INSENSITIVE = const GTK_TEXT_SEARCH_CASE_INSENSITIVE = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTargetFlags
    const SAME_APP = const GTK_TARGET_SAME_APP = Main.Base.convert(Main.Base.Int32, 1)
    const SAME_WIDGET = const GTK_TARGET_SAME_WIDGET = Main.Base.convert(Main.Base.Int32, 2)
    const OTHER_APP = const GTK_TARGET_OTHER_APP = Main.Base.convert(Main.Base.Int32, 4)
    const OTHER_WIDGET = const GTK_TARGET_OTHER_WIDGET = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkImageType
    const EMPTY = const GTK_IMAGE_EMPTY = Main.Base.convert(Main.Base.Int32, 0)
    const PIXBUF = const GTK_IMAGE_PIXBUF = Main.Base.convert(Main.Base.Int32, 1)
    const STOCK = const GTK_IMAGE_STOCK = Main.Base.convert(Main.Base.Int32, 2)
    const ICON_SET = const GTK_IMAGE_ICON_SET = Main.Base.convert(Main.Base.Int32, 3)
    const ANIMATION = const GTK_IMAGE_ANIMATION = Main.Base.convert(Main.Base.Int32, 4)
    const ICON_NAME = const GTK_IMAGE_ICON_NAME = Main.Base.convert(Main.Base.Int32, 5)
    const GICON = const GTK_IMAGE_GICON = Main.Base.convert(Main.Base.Int32, 6)
    const SURFACE = const GTK_IMAGE_SURFACE = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkEntryIconPosition
    const PRIMARY = const GTK_ENTRY_ICON_PRIMARY = Main.Base.convert(Main.Base.Int32, 0)
    const SECONDARY = const GTK_ENTRY_ICON_SECONDARY = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTreeViewDropPosition
    const BEFORE = const GTK_TREE_VIEW_DROP_BEFORE = Main.Base.convert(Main.Base.Int32, 0)
    const AFTER = const GTK_TREE_VIEW_DROP_AFTER = Main.Base.convert(Main.Base.Int32, 1)
    const INTO_OR_BEFORE = const GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = Main.Base.convert(Main.Base.Int32, 2)
    const INTO_OR_AFTER = const GTK_TREE_VIEW_DROP_INTO_OR_AFTER = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkAssistantPageType
    const CONTENT = const GTK_ASSISTANT_PAGE_CONTENT = Main.Base.convert(Main.Base.Int32, 0)
    const INTRO = const GTK_ASSISTANT_PAGE_INTRO = Main.Base.convert(Main.Base.Int32, 1)
    const CONFIRM = const GTK_ASSISTANT_PAGE_CONFIRM = Main.Base.convert(Main.Base.Int32, 2)
    const SUMMARY = const GTK_ASSISTANT_PAGE_SUMMARY = Main.Base.convert(Main.Base.Int32, 3)
    const PROGRESS = const GTK_ASSISTANT_PAGE_PROGRESS = Main.Base.convert(Main.Base.Int32, 4)
    const CUSTOM = const GTK_ASSISTANT_PAGE_CUSTOM = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkButtonBoxStyle
    const SPREAD = const GTK_BUTTONBOX_SPREAD = Main.Base.convert(Main.Base.Int32, 1)
    const EDGE = const GTK_BUTTONBOX_EDGE = Main.Base.convert(Main.Base.Int32, 2)
    const START = const GTK_BUTTONBOX_START = Main.Base.convert(Main.Base.Int32, 3)
    const END = const GTK_BUTTONBOX_END = Main.Base.convert(Main.Base.Int32, 4)
    const CENTER = const GTK_BUTTONBOX_CENTER = Main.Base.convert(Main.Base.Int32, 5)
    const EXPAND = const GTK_BUTTONBOX_EXPAND = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkBuilderError
    const INVALID_TYPE_FUNCTION = const GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = Main.Base.convert(Main.Base.Int32, 0)
    const UNHANDLED_TAG = const GTK_BUILDER_ERROR_UNHANDLED_TAG = Main.Base.convert(Main.Base.Int32, 1)
    const MISSING_ATTRIBUTE = const GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = Main.Base.convert(Main.Base.Int32, 2)
    const INVALID_ATTRIBUTE = const GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = Main.Base.convert(Main.Base.Int32, 3)
    const INVALID_TAG = const GTK_BUILDER_ERROR_INVALID_TAG = Main.Base.convert(Main.Base.Int32, 4)
    const MISSING_PROPERTY_VALUE = const GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = Main.Base.convert(Main.Base.Int32, 5)
    const INVALID_VALUE = const GTK_BUILDER_ERROR_INVALID_VALUE = Main.Base.convert(Main.Base.Int32, 6)
    const VERSION_MISMATCH = const GTK_BUILDER_ERROR_VERSION_MISMATCH = Main.Base.convert(Main.Base.Int32, 7)
    const DUPLICATE_ID = const GTK_BUILDER_ERROR_DUPLICATE_ID = Main.Base.convert(Main.Base.Int32, 8)
    const OBJECT_TYPE_REFUSED = const GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED = Main.Base.convert(Main.Base.Int32, 9)
    const TEMPLATE_MISMATCH = const GTK_BUILDER_ERROR_TEMPLATE_MISMATCH = Main.Base.convert(Main.Base.Int32, 10)
    const INVALID_PROPERTY = const GTK_BUILDER_ERROR_INVALID_PROPERTY = Main.Base.convert(Main.Base.Int32, 11)
    const INVALID_SIGNAL = const GTK_BUILDER_ERROR_INVALID_SIGNAL = Main.Base.convert(Main.Base.Int32, 12)
    const INVALID_ID = const GTK_BUILDER_ERROR_INVALID_ID = Main.Base.convert(Main.Base.Int32, 13)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCalendarDisplayOptions
    const SHOW_HEADING = const GTK_CALENDAR_SHOW_HEADING = Main.Base.convert(Main.Base.Int32, 1)
    const SHOW_DAY_NAMES = const GTK_CALENDAR_SHOW_DAY_NAMES = Main.Base.convert(Main.Base.Int32, 2)
    const NO_MONTH_CHANGE = const GTK_CALENDAR_NO_MONTH_CHANGE = Main.Base.convert(Main.Base.Int32, 4)
    const SHOW_WEEK_NUMBERS = const GTK_CALENDAR_SHOW_WEEK_NUMBERS = Main.Base.convert(Main.Base.Int32, 8)
    const SHOW_DETAILS = const GTK_CALENDAR_SHOW_DETAILS = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCellRendererAccelMode
    const GTK = const GTK_CELL_RENDERER_ACCEL_MODE_GTK = Main.Base.convert(Main.Base.Int32, 0)
    const OTHER = const GTK_CELL_RENDERER_ACCEL_MODE_OTHER = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCssSectionType
    const DOCUMENT = const GTK_CSS_SECTION_DOCUMENT = Main.Base.convert(Main.Base.Int32, 0)
    const IMPORT = const GTK_CSS_SECTION_IMPORT = Main.Base.convert(Main.Base.Int32, 1)
    const COLOR_DEFINITION = const GTK_CSS_SECTION_COLOR_DEFINITION = Main.Base.convert(Main.Base.Int32, 2)
    const BINDING_SET = const GTK_CSS_SECTION_BINDING_SET = Main.Base.convert(Main.Base.Int32, 3)
    const RULESET = const GTK_CSS_SECTION_RULESET = Main.Base.convert(Main.Base.Int32, 4)
    const SELECTOR = const GTK_CSS_SECTION_SELECTOR = Main.Base.convert(Main.Base.Int32, 5)
    const DECLARATION = const GTK_CSS_SECTION_DECLARATION = Main.Base.convert(Main.Base.Int32, 6)
    const VALUE = const GTK_CSS_SECTION_VALUE = Main.Base.convert(Main.Base.Int32, 7)
    const KEYFRAMES = const GTK_CSS_SECTION_KEYFRAMES = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCssProviderError
    const FAILED = const GTK_CSS_PROVIDER_ERROR_FAILED = Main.Base.convert(Main.Base.Int32, 0)
    const SYNTAX = const GTK_CSS_PROVIDER_ERROR_SYNTAX = Main.Base.convert(Main.Base.Int32, 1)
    const IMPORT = const GTK_CSS_PROVIDER_ERROR_IMPORT = Main.Base.convert(Main.Base.Int32, 2)
    const NAME = const GTK_CSS_PROVIDER_ERROR_NAME = Main.Base.convert(Main.Base.Int32, 3)
    const DEPRECATED = const GTK_CSS_PROVIDER_ERROR_DEPRECATED = Main.Base.convert(Main.Base.Int32, 4)
    const UNKNOWN_VALUE = const GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDebugFlag
    const MISC = const GTK_DEBUG_MISC = Main.Base.convert(Main.Base.Int32, 1)
    const PLUGSOCKET = const GTK_DEBUG_PLUGSOCKET = Main.Base.convert(Main.Base.Int32, 2)
    const TEXT = const GTK_DEBUG_TEXT = Main.Base.convert(Main.Base.Int32, 4)
    const TREE = const GTK_DEBUG_TREE = Main.Base.convert(Main.Base.Int32, 8)
    const UPDATES = const GTK_DEBUG_UPDATES = Main.Base.convert(Main.Base.Int32, 16)
    const KEYBINDINGS = const GTK_DEBUG_KEYBINDINGS = Main.Base.convert(Main.Base.Int32, 32)
    const MULTIHEAD = const GTK_DEBUG_MULTIHEAD = Main.Base.convert(Main.Base.Int32, 64)
    const MODULES = const GTK_DEBUG_MODULES = Main.Base.convert(Main.Base.Int32, 128)
    const GEOMETRY = const GTK_DEBUG_GEOMETRY = Main.Base.convert(Main.Base.Int32, 256)
    const ICONTHEME = const GTK_DEBUG_ICONTHEME = Main.Base.convert(Main.Base.Int32, 512)
    const PRINTING = const GTK_DEBUG_PRINTING = Main.Base.convert(Main.Base.Int32, 1024)
    const BUILDER = const GTK_DEBUG_BUILDER = Main.Base.convert(Main.Base.Int32, 2048)
    const SIZE_REQUEST = const GTK_DEBUG_SIZE_REQUEST = Main.Base.convert(Main.Base.Int32, 4096)
    const NO_CSS_CACHE = const GTK_DEBUG_NO_CSS_CACHE = Main.Base.convert(Main.Base.Int32, 8192)
    const BASELINES = const GTK_DEBUG_BASELINES = Main.Base.convert(Main.Base.Int32, 16384)
    const PIXEL_CACHE = const GTK_DEBUG_PIXEL_CACHE = Main.Base.convert(Main.Base.Int32, 32768)
    const NO_PIXEL_CACHE = const GTK_DEBUG_NO_PIXEL_CACHE = Main.Base.convert(Main.Base.Int32, 65536)
    const INTERACTIVE = const GTK_DEBUG_INTERACTIVE = Main.Base.convert(Main.Base.Int32, 131072)
    const TOUCHSCREEN = const GTK_DEBUG_TOUCHSCREEN = Main.Base.convert(Main.Base.Int32, 262144)
    const ACTIONS = const GTK_DEBUG_ACTIONS = Main.Base.convert(Main.Base.Int32, 524288)
    const RESIZE = const GTK_DEBUG_RESIZE = Main.Base.convert(Main.Base.Int32, 1048576)
    const LAYOUT = const GTK_DEBUG_LAYOUT = Main.Base.convert(Main.Base.Int32, 2097152)
    end)))
    $(Expr(:toplevel, :(baremodule GtkDestDefaults
    const MOTION = const GTK_DEST_DEFAULT_MOTION = Main.Base.convert(Main.Base.Int32, 1)
    const HIGHLIGHT = const GTK_DEST_DEFAULT_HIGHLIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const DROP = const GTK_DEST_DEFAULT_DROP = Main.Base.convert(Main.Base.Int32, 4)
    const ALL = const GTK_DEST_DEFAULT_ALL = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkFileFilterFlags
    const FILENAME = const GTK_FILE_FILTER_FILENAME = Main.Base.convert(Main.Base.Int32, 1)
    const URI = const GTK_FILE_FILTER_URI = Main.Base.convert(Main.Base.Int32, 2)
    const DISPLAY_NAME = const GTK_FILE_FILTER_DISPLAY_NAME = Main.Base.convert(Main.Base.Int32, 4)
    const MIME_TYPE = const GTK_FILE_FILTER_MIME_TYPE = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkFileChooserAction
    const OPEN = const GTK_FILE_CHOOSER_ACTION_OPEN = Main.Base.convert(Main.Base.Int32, 0)
    const SAVE = const GTK_FILE_CHOOSER_ACTION_SAVE = Main.Base.convert(Main.Base.Int32, 1)
    const SELECT_FOLDER = const GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = Main.Base.convert(Main.Base.Int32, 2)
    const CREATE_FOLDER = const GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkFileChooserConfirmation
    const CONFIRM = const GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM = Main.Base.convert(Main.Base.Int32, 0)
    const ACCEPT_FILENAME = const GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = Main.Base.convert(Main.Base.Int32, 1)
    const SELECT_AGAIN = const GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkFileChooserError
    const NONEXISTENT = const GTK_FILE_CHOOSER_ERROR_NONEXISTENT = Main.Base.convert(Main.Base.Int32, 0)
    const BAD_FILENAME = const GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = Main.Base.convert(Main.Base.Int32, 1)
    const ALREADY_EXISTS = const GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = Main.Base.convert(Main.Base.Int32, 2)
    const INCOMPLETE_HOSTNAME = const GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkStyleContextPrintFlags
    const NONE = const GTK_STYLE_CONTEXT_PRINT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const RECURSE = const GTK_STYLE_CONTEXT_PRINT_RECURSE = Main.Base.convert(Main.Base.Int32, 1)
    const SHOW_STYLE = const GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIconLookupFlags
    const NO_SVG = const GTK_ICON_LOOKUP_NO_SVG = Main.Base.convert(Main.Base.Int32, 1)
    const FORCE_SVG = const GTK_ICON_LOOKUP_FORCE_SVG = Main.Base.convert(Main.Base.Int32, 2)
    const USE_BUILTIN = const GTK_ICON_LOOKUP_USE_BUILTIN = Main.Base.convert(Main.Base.Int32, 4)
    const GENERIC_FALLBACK = const GTK_ICON_LOOKUP_GENERIC_FALLBACK = Main.Base.convert(Main.Base.Int32, 8)
    const FORCE_SIZE = const GTK_ICON_LOOKUP_FORCE_SIZE = Main.Base.convert(Main.Base.Int32, 16)
    const FORCE_REGULAR = const GTK_ICON_LOOKUP_FORCE_REGULAR = Main.Base.convert(Main.Base.Int32, 32)
    const FORCE_SYMBOLIC = const GTK_ICON_LOOKUP_FORCE_SYMBOLIC = Main.Base.convert(Main.Base.Int32, 64)
    const DIR_LTR = const GTK_ICON_LOOKUP_DIR_LTR = Main.Base.convert(Main.Base.Int32, 128)
    const DIR_RTL = const GTK_ICON_LOOKUP_DIR_RTL = Main.Base.convert(Main.Base.Int32, 256)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIconThemeError
    const NOT_FOUND = const GTK_ICON_THEME_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 0)
    const FAILED = const GTK_ICON_THEME_FAILED = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkIconViewDropPosition
    const NO_DROP = const GTK_ICON_VIEW_NO_DROP = Main.Base.convert(Main.Base.Int32, 0)
    const DROP_INTO = const GTK_ICON_VIEW_DROP_INTO = Main.Base.convert(Main.Base.Int32, 1)
    const DROP_LEFT = const GTK_ICON_VIEW_DROP_LEFT = Main.Base.convert(Main.Base.Int32, 2)
    const DROP_RIGHT = const GTK_ICON_VIEW_DROP_RIGHT = Main.Base.convert(Main.Base.Int32, 3)
    const DROP_ABOVE = const GTK_ICON_VIEW_DROP_ABOVE = Main.Base.convert(Main.Base.Int32, 4)
    const DROP_BELOW = const GTK_ICON_VIEW_DROP_BELOW = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkButtonsType
    const NONE = const GTK_BUTTONS_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const OK = const GTK_BUTTONS_OK = Main.Base.convert(Main.Base.Int32, 1)
    const CLOSE = const GTK_BUTTONS_CLOSE = Main.Base.convert(Main.Base.Int32, 2)
    const CANCEL = const GTK_BUTTONS_CANCEL = Main.Base.convert(Main.Base.Int32, 3)
    const YES_NO = const GTK_BUTTONS_YES_NO = Main.Base.convert(Main.Base.Int32, 4)
    const OK_CANCEL = const GTK_BUTTONS_OK_CANCEL = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkButtonRole
    const NORMAL = const GTK_BUTTON_ROLE_NORMAL = Main.Base.convert(Main.Base.Int32, 0)
    const CHECK = const GTK_BUTTON_ROLE_CHECK = Main.Base.convert(Main.Base.Int32, 1)
    const RADIO = const GTK_BUTTON_ROLE_RADIO = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkNotebookTab
    const FIRST = const GTK_NOTEBOOK_TAB_FIRST = Main.Base.convert(Main.Base.Int32, 0)
    const LAST = const GTK_NOTEBOOK_TAB_LAST = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPadActionType
    const BUTTON = const GTK_PAD_ACTION_BUTTON = Main.Base.convert(Main.Base.Int32, 0)
    const RING = const GTK_PAD_ACTION_RING = Main.Base.convert(Main.Base.Int32, 1)
    const STRIP = const GTK_PAD_ACTION_STRIP = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPlacesOpenFlags
    const NORMAL = const GTK_PLACES_OPEN_NORMAL = Main.Base.convert(Main.Base.Int32, 1)
    const NEW_TAB = const GTK_PLACES_OPEN_NEW_TAB = Main.Base.convert(Main.Base.Int32, 2)
    const NEW_WINDOW = const GTK_PLACES_OPEN_NEW_WINDOW = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintStatus
    const INITIAL = const GTK_PRINT_STATUS_INITIAL = Main.Base.convert(Main.Base.Int32, 0)
    const PREPARING = const GTK_PRINT_STATUS_PREPARING = Main.Base.convert(Main.Base.Int32, 1)
    const GENERATING_DATA = const GTK_PRINT_STATUS_GENERATING_DATA = Main.Base.convert(Main.Base.Int32, 2)
    const SENDING_DATA = const GTK_PRINT_STATUS_SENDING_DATA = Main.Base.convert(Main.Base.Int32, 3)
    const PENDING = const GTK_PRINT_STATUS_PENDING = Main.Base.convert(Main.Base.Int32, 4)
    const PENDING_ISSUE = const GTK_PRINT_STATUS_PENDING_ISSUE = Main.Base.convert(Main.Base.Int32, 5)
    const PRINTING = const GTK_PRINT_STATUS_PRINTING = Main.Base.convert(Main.Base.Int32, 6)
    const FINISHED = const GTK_PRINT_STATUS_FINISHED = Main.Base.convert(Main.Base.Int32, 7)
    const FINISHED_ABORTED = const GTK_PRINT_STATUS_FINISHED_ABORTED = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintOperationResult
    const ERROR = const GTK_PRINT_OPERATION_RESULT_ERROR = Main.Base.convert(Main.Base.Int32, 0)
    const APPLY = const GTK_PRINT_OPERATION_RESULT_APPLY = Main.Base.convert(Main.Base.Int32, 1)
    const CANCEL = const GTK_PRINT_OPERATION_RESULT_CANCEL = Main.Base.convert(Main.Base.Int32, 2)
    const IN_PROGRESS = const GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintOperationAction
    const PRINT_DIALOG = const GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = Main.Base.convert(Main.Base.Int32, 0)
    const PRINT = const GTK_PRINT_OPERATION_ACTION_PRINT = Main.Base.convert(Main.Base.Int32, 1)
    const PREVIEW = const GTK_PRINT_OPERATION_ACTION_PREVIEW = Main.Base.convert(Main.Base.Int32, 2)
    const EXPORT = const GTK_PRINT_OPERATION_ACTION_EXPORT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPrintError
    const GENERAL = const GTK_PRINT_ERROR_GENERAL = Main.Base.convert(Main.Base.Int32, 0)
    const INTERNAL_ERROR = const GTK_PRINT_ERROR_INTERNAL_ERROR = Main.Base.convert(Main.Base.Int32, 1)
    const NOMEM = const GTK_PRINT_ERROR_NOMEM = Main.Base.convert(Main.Base.Int32, 2)
    const INVALID_FILE = const GTK_PRINT_ERROR_INVALID_FILE = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRecentManagerError
    const NOT_FOUND = const GTK_RECENT_MANAGER_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 0)
    const INVALID_URI = const GTK_RECENT_MANAGER_ERROR_INVALID_URI = Main.Base.convert(Main.Base.Int32, 1)
    const INVALID_ENCODING = const GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = Main.Base.convert(Main.Base.Int32, 2)
    const NOT_REGISTERED = const GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = Main.Base.convert(Main.Base.Int32, 3)
    const READ = const GTK_RECENT_MANAGER_ERROR_READ = Main.Base.convert(Main.Base.Int32, 4)
    const WRITE = const GTK_RECENT_MANAGER_ERROR_WRITE = Main.Base.convert(Main.Base.Int32, 5)
    const UNKNOWN = const GTK_RECENT_MANAGER_ERROR_UNKNOWN = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRecentFilterFlags
    const URI = const GTK_RECENT_FILTER_URI = Main.Base.convert(Main.Base.Int32, 1)
    const DISPLAY_NAME = const GTK_RECENT_FILTER_DISPLAY_NAME = Main.Base.convert(Main.Base.Int32, 2)
    const MIME_TYPE = const GTK_RECENT_FILTER_MIME_TYPE = Main.Base.convert(Main.Base.Int32, 4)
    const APPLICATION = const GTK_RECENT_FILTER_APPLICATION = Main.Base.convert(Main.Base.Int32, 8)
    const GROUP = const GTK_RECENT_FILTER_GROUP = Main.Base.convert(Main.Base.Int32, 16)
    const AGE = const GTK_RECENT_FILTER_AGE = Main.Base.convert(Main.Base.Int32, 32)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRecentSortType
    const NONE = const GTK_RECENT_SORT_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const MRU = const GTK_RECENT_SORT_MRU = Main.Base.convert(Main.Base.Int32, 1)
    const LRU = const GTK_RECENT_SORT_LRU = Main.Base.convert(Main.Base.Int32, 2)
    const CUSTOM = const GTK_RECENT_SORT_CUSTOM = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRecentChooserError
    const NOT_FOUND = const GTK_RECENT_CHOOSER_ERROR_NOT_FOUND = Main.Base.convert(Main.Base.Int32, 0)
    const INVALID_URI = const GTK_RECENT_CHOOSER_ERROR_INVALID_URI = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRevealerTransitionType
    const NONE = const GTK_REVEALER_TRANSITION_TYPE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CROSSFADE = const GTK_REVEALER_TRANSITION_TYPE_CROSSFADE = Main.Base.convert(Main.Base.Int32, 1)
    const SLIDE_RIGHT = const GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const SLIDE_LEFT = const GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT = Main.Base.convert(Main.Base.Int32, 3)
    const SLIDE_UP = const GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP = Main.Base.convert(Main.Base.Int32, 4)
    const SLIDE_DOWN = const GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN = Main.Base.convert(Main.Base.Int32, 5)
    end)))
    $(Expr(:toplevel, :(baremodule GtkCornerType
    const TOP_LEFT = const GTK_CORNER_TOP_LEFT = Main.Base.convert(Main.Base.Int32, 0)
    const BOTTOM_LEFT = const GTK_CORNER_BOTTOM_LEFT = Main.Base.convert(Main.Base.Int32, 1)
    const TOP_RIGHT = const GTK_CORNER_TOP_RIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const BOTTOM_RIGHT = const GTK_CORNER_BOTTOM_RIGHT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPolicyType
    const ALWAYS = const GTK_POLICY_ALWAYS = Main.Base.convert(Main.Base.Int32, 0)
    const AUTOMATIC = const GTK_POLICY_AUTOMATIC = Main.Base.convert(Main.Base.Int32, 1)
    const NEVER = const GTK_POLICY_NEVER = Main.Base.convert(Main.Base.Int32, 2)
    const EXTERNAL = const GTK_POLICY_EXTERNAL = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkShortcutType
    const ACCELERATOR = const GTK_SHORTCUT_ACCELERATOR = Main.Base.convert(Main.Base.Int32, 0)
    const GESTURE_PINCH = const GTK_SHORTCUT_GESTURE_PINCH = Main.Base.convert(Main.Base.Int32, 1)
    const GESTURE_STRETCH = const GTK_SHORTCUT_GESTURE_STRETCH = Main.Base.convert(Main.Base.Int32, 2)
    const GESTURE_ROTATE_CLOCKWISE = const GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE = Main.Base.convert(Main.Base.Int32, 3)
    const GESTURE_ROTATE_COUNTERCLOCKWISE = const GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE = Main.Base.convert(Main.Base.Int32, 4)
    const GESTURE_TWO_FINGER_SWIPE_LEFT = const GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT = Main.Base.convert(Main.Base.Int32, 5)
    const GESTURE_TWO_FINGER_SWIPE_RIGHT = const GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT = Main.Base.convert(Main.Base.Int32, 6)
    const GESTURE = const GTK_SHORTCUT_GESTURE = Main.Base.convert(Main.Base.Int32, 7)
    end)))
    $(Expr(:toplevel, :(baremodule GtkStackTransitionType
    const NONE = const GTK_STACK_TRANSITION_TYPE_NONE = Main.Base.convert(Main.Base.Int32, 0)
    const CROSSFADE = const GTK_STACK_TRANSITION_TYPE_CROSSFADE = Main.Base.convert(Main.Base.Int32, 1)
    const SLIDE_RIGHT = const GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT = Main.Base.convert(Main.Base.Int32, 2)
    const SLIDE_LEFT = const GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT = Main.Base.convert(Main.Base.Int32, 3)
    const SLIDE_UP = const GTK_STACK_TRANSITION_TYPE_SLIDE_UP = Main.Base.convert(Main.Base.Int32, 4)
    const SLIDE_DOWN = const GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN = Main.Base.convert(Main.Base.Int32, 5)
    const SLIDE_LEFT_RIGHT = const GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT = Main.Base.convert(Main.Base.Int32, 6)
    const SLIDE_UP_DOWN = const GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN = Main.Base.convert(Main.Base.Int32, 7)
    const OVER_UP = const GTK_STACK_TRANSITION_TYPE_OVER_UP = Main.Base.convert(Main.Base.Int32, 8)
    const OVER_DOWN = const GTK_STACK_TRANSITION_TYPE_OVER_DOWN = Main.Base.convert(Main.Base.Int32, 9)
    const OVER_LEFT = const GTK_STACK_TRANSITION_TYPE_OVER_LEFT = Main.Base.convert(Main.Base.Int32, 10)
    const OVER_RIGHT = const GTK_STACK_TRANSITION_TYPE_OVER_RIGHT = Main.Base.convert(Main.Base.Int32, 11)
    const UNDER_UP = const GTK_STACK_TRANSITION_TYPE_UNDER_UP = Main.Base.convert(Main.Base.Int32, 12)
    const UNDER_DOWN = const GTK_STACK_TRANSITION_TYPE_UNDER_DOWN = Main.Base.convert(Main.Base.Int32, 13)
    const UNDER_LEFT = const GTK_STACK_TRANSITION_TYPE_UNDER_LEFT = Main.Base.convert(Main.Base.Int32, 14)
    const UNDER_RIGHT = const GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT = Main.Base.convert(Main.Base.Int32, 15)
    const OVER_UP_DOWN = const GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN = Main.Base.convert(Main.Base.Int32, 16)
    const OVER_DOWN_UP = const GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP = Main.Base.convert(Main.Base.Int32, 17)
    const OVER_LEFT_RIGHT = const GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT = Main.Base.convert(Main.Base.Int32, 18)
    const OVER_RIGHT_LEFT = const GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT = Main.Base.convert(Main.Base.Int32, 19)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSpinButtonUpdatePolicy
    const ALWAYS = const GTK_UPDATE_ALWAYS = Main.Base.convert(Main.Base.Int32, 0)
    const IF_VALID = const GTK_UPDATE_IF_VALID = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkSpinType
    const STEP_FORWARD = const GTK_SPIN_STEP_FORWARD = Main.Base.convert(Main.Base.Int32, 0)
    const STEP_BACKWARD = const GTK_SPIN_STEP_BACKWARD = Main.Base.convert(Main.Base.Int32, 1)
    const PAGE_FORWARD = const GTK_SPIN_PAGE_FORWARD = Main.Base.convert(Main.Base.Int32, 2)
    const PAGE_BACKWARD = const GTK_SPIN_PAGE_BACKWARD = Main.Base.convert(Main.Base.Int32, 3)
    const HOME = const GTK_SPIN_HOME = Main.Base.convert(Main.Base.Int32, 4)
    const END = const GTK_SPIN_END = Main.Base.convert(Main.Base.Int32, 5)
    const USER_DEFINED = const GTK_SPIN_USER_DEFINED = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextBufferTargetInfo
    const BUFFER_CONTENTS = const GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = Main.Base.convert(Main.Base.Int32, -1)
    const RICH_TEXT = const GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = Main.Base.convert(Main.Base.Int32, -2)
    const TEXT = const GTK_TEXT_BUFFER_TARGET_INFO_TEXT = Main.Base.convert(Main.Base.Int32, -3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextWindowType
    const PRIVATE = const GTK_TEXT_WINDOW_PRIVATE = Main.Base.convert(Main.Base.Int32, 0)
    const WIDGET = const GTK_TEXT_WINDOW_WIDGET = Main.Base.convert(Main.Base.Int32, 1)
    const TEXT = const GTK_TEXT_WINDOW_TEXT = Main.Base.convert(Main.Base.Int32, 2)
    const LEFT = const GTK_TEXT_WINDOW_LEFT = Main.Base.convert(Main.Base.Int32, 3)
    const RIGHT = const GTK_TEXT_WINDOW_RIGHT = Main.Base.convert(Main.Base.Int32, 4)
    const TOP = const GTK_TEXT_WINDOW_TOP = Main.Base.convert(Main.Base.Int32, 5)
    const BOTTOM = const GTK_TEXT_WINDOW_BOTTOM = Main.Base.convert(Main.Base.Int32, 6)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextViewLayer
    const BELOW = const GTK_TEXT_VIEW_LAYER_BELOW = Main.Base.convert(Main.Base.Int32, 0)
    const ABOVE = const GTK_TEXT_VIEW_LAYER_ABOVE = Main.Base.convert(Main.Base.Int32, 1)
    const BELOW_TEXT = const GTK_TEXT_VIEW_LAYER_BELOW_TEXT = Main.Base.convert(Main.Base.Int32, 2)
    const ABOVE_TEXT = const GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkTextExtendSelection
    const WORD = const GTK_TEXT_EXTEND_SELECTION_WORD = Main.Base.convert(Main.Base.Int32, 0)
    const LINE = const GTK_TEXT_EXTEND_SELECTION_LINE = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkToolbarSpaceStyle
    const EMPTY = const GTK_TOOLBAR_SPACE_EMPTY = Main.Base.convert(Main.Base.Int32, 0)
    const LINE = const GTK_TOOLBAR_SPACE_LINE = Main.Base.convert(Main.Base.Int32, 1)
    end)))
    $(Expr(:toplevel, :(baremodule GtkToolPaletteDragTargets
    const ITEMS = const GTK_TOOL_PALETTE_DRAG_ITEMS = Main.Base.convert(Main.Base.Int32, 1)
    const GROUPS = const GTK_TOOL_PALETTE_DRAG_GROUPS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRcFlags
    const FG = const GTK_RC_FG = Main.Base.convert(Main.Base.Int32, 1)
    const BG = const GTK_RC_BG = Main.Base.convert(Main.Base.Int32, 2)
    const TEXT = const GTK_RC_TEXT = Main.Base.convert(Main.Base.Int32, 4)
    const BASE = const GTK_RC_BASE = Main.Base.convert(Main.Base.Int32, 8)
    end)))
    $(Expr(:toplevel, :(baremodule GtkRcTokenType
    const INVALID = const GTK_RC_TOKEN_INVALID = Main.Base.convert(Main.Base.Int32, 270)
    const INCLUDE = const GTK_RC_TOKEN_INCLUDE = Main.Base.convert(Main.Base.Int32, 271)
    const NORMAL = const GTK_RC_TOKEN_NORMAL = Main.Base.convert(Main.Base.Int32, 272)
    const ACTIVE = const GTK_RC_TOKEN_ACTIVE = Main.Base.convert(Main.Base.Int32, 273)
    const PRELIGHT = const GTK_RC_TOKEN_PRELIGHT = Main.Base.convert(Main.Base.Int32, 274)
    const SELECTED = const GTK_RC_TOKEN_SELECTED = Main.Base.convert(Main.Base.Int32, 275)
    const INSENSITIVE = const GTK_RC_TOKEN_INSENSITIVE = Main.Base.convert(Main.Base.Int32, 276)
    const FG = const GTK_RC_TOKEN_FG = Main.Base.convert(Main.Base.Int32, 277)
    const BG = const GTK_RC_TOKEN_BG = Main.Base.convert(Main.Base.Int32, 278)
    const TEXT = const GTK_RC_TOKEN_TEXT = Main.Base.convert(Main.Base.Int32, 279)
    const BASE = const GTK_RC_TOKEN_BASE = Main.Base.convert(Main.Base.Int32, 280)
    const XTHICKNESS = const GTK_RC_TOKEN_XTHICKNESS = Main.Base.convert(Main.Base.Int32, 281)
    const YTHICKNESS = const GTK_RC_TOKEN_YTHICKNESS = Main.Base.convert(Main.Base.Int32, 282)
    const FONT = const GTK_RC_TOKEN_FONT = Main.Base.convert(Main.Base.Int32, 283)
    const FONTSET = const GTK_RC_TOKEN_FONTSET = Main.Base.convert(Main.Base.Int32, 284)
    const FONT_NAME = const GTK_RC_TOKEN_FONT_NAME = Main.Base.convert(Main.Base.Int32, 285)
    const BG_PIXMAP = const GTK_RC_TOKEN_BG_PIXMAP = Main.Base.convert(Main.Base.Int32, 286)
    const PIXMAP_PATH = const GTK_RC_TOKEN_PIXMAP_PATH = Main.Base.convert(Main.Base.Int32, 287)
    const STYLE = const GTK_RC_TOKEN_STYLE = Main.Base.convert(Main.Base.Int32, 288)
    const BINDING = const GTK_RC_TOKEN_BINDING = Main.Base.convert(Main.Base.Int32, 289)
    const BIND = const GTK_RC_TOKEN_BIND = Main.Base.convert(Main.Base.Int32, 290)
    const WIDGET = const GTK_RC_TOKEN_WIDGET = Main.Base.convert(Main.Base.Int32, 291)
    const WIDGET_CLASS = const GTK_RC_TOKEN_WIDGET_CLASS = Main.Base.convert(Main.Base.Int32, 292)
    const CLASS = const GTK_RC_TOKEN_CLASS = Main.Base.convert(Main.Base.Int32, 293)
    const LOWEST = const GTK_RC_TOKEN_LOWEST = Main.Base.convert(Main.Base.Int32, 294)
    const GTK = const GTK_RC_TOKEN_GTK = Main.Base.convert(Main.Base.Int32, 295)
    const APPLICATION = const GTK_RC_TOKEN_APPLICATION = Main.Base.convert(Main.Base.Int32, 296)
    const THEME = const GTK_RC_TOKEN_THEME = Main.Base.convert(Main.Base.Int32, 297)
    const RC = const GTK_RC_TOKEN_RC = Main.Base.convert(Main.Base.Int32, 298)
    const HIGHEST = const GTK_RC_TOKEN_HIGHEST = Main.Base.convert(Main.Base.Int32, 299)
    const ENGINE = const GTK_RC_TOKEN_ENGINE = Main.Base.convert(Main.Base.Int32, 300)
    const MODULE_PATH = const GTK_RC_TOKEN_MODULE_PATH = Main.Base.convert(Main.Base.Int32, 301)
    const IM_MODULE_PATH = const GTK_RC_TOKEN_IM_MODULE_PATH = Main.Base.convert(Main.Base.Int32, 302)
    const IM_MODULE_FILE = const GTK_RC_TOKEN_IM_MODULE_FILE = Main.Base.convert(Main.Base.Int32, 303)
    const STOCK = const GTK_RC_TOKEN_STOCK = Main.Base.convert(Main.Base.Int32, 304)
    const LTR = const GTK_RC_TOKEN_LTR = Main.Base.convert(Main.Base.Int32, 305)
    const RTL = const GTK_RC_TOKEN_RTL = Main.Base.convert(Main.Base.Int32, 306)
    const COLOR = const GTK_RC_TOKEN_COLOR = Main.Base.convert(Main.Base.Int32, 307)
    const UNBIND = const GTK_RC_TOKEN_UNBIND = Main.Base.convert(Main.Base.Int32, 308)
    const LAST = const GTK_RC_TOKEN_LAST = Main.Base.convert(Main.Base.Int32, 309)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPathPriorityType
    const LOWEST = const GTK_PATH_PRIO_LOWEST = Main.Base.convert(Main.Base.Int32, 0)
    const GTK = const GTK_PATH_PRIO_GTK = Main.Base.convert(Main.Base.Int32, 4)
    const APPLICATION = const GTK_PATH_PRIO_APPLICATION = Main.Base.convert(Main.Base.Int32, 8)
    const THEME = const GTK_PATH_PRIO_THEME = Main.Base.convert(Main.Base.Int32, 10)
    const RC = const GTK_PATH_PRIO_RC = Main.Base.convert(Main.Base.Int32, 12)
    const HIGHEST = const GTK_PATH_PRIO_HIGHEST = Main.Base.convert(Main.Base.Int32, 15)
    end)))
    $(Expr(:toplevel, :(baremodule GtkPathType
    const WIDGET = const GTK_PATH_WIDGET = Main.Base.convert(Main.Base.Int32, 0)
    const WIDGET_CLASS = const GTK_PATH_WIDGET_CLASS = Main.Base.convert(Main.Base.Int32, 1)
    const CLASS = const GTK_PATH_CLASS = Main.Base.convert(Main.Base.Int32, 2)
    end)))
    $(Expr(:toplevel, :(baremodule GtkExpanderStyle
    const COLLAPSED = const GTK_EXPANDER_COLLAPSED = Main.Base.convert(Main.Base.Int32, 0)
    const SEMI_COLLAPSED = const GTK_EXPANDER_SEMI_COLLAPSED = Main.Base.convert(Main.Base.Int32, 1)
    const SEMI_EXPANDED = const GTK_EXPANDER_SEMI_EXPANDED = Main.Base.convert(Main.Base.Int32, 2)
    const EXPANDED = const GTK_EXPANDER_EXPANDED = Main.Base.convert(Main.Base.Int32, 3)
    end)))
    $(Expr(:toplevel, :(baremodule GtkAttachOptions
    const EXPAND = const GTK_EXPAND = Main.Base.convert(Main.Base.Int32, 1)
    const SHRINK = const GTK_SHRINK = Main.Base.convert(Main.Base.Int32, 2)
    const FILL = const GTK_FILL = Main.Base.convert(Main.Base.Int32, 4)
    end)))
    $(Expr(:toplevel, :(baremodule GtkUIManagerItemType
    const AUTO = const GTK_UI_MANAGER_AUTO = Main.Base.convert(Main.Base.Int32, 0)
    const MENUBAR = const GTK_UI_MANAGER_MENUBAR = Main.Base.convert(Main.Base.Int32, 1)
    const MENU = const GTK_UI_MANAGER_MENU = Main.Base.convert(Main.Base.Int32, 2)
    const TOOLBAR = const GTK_UI_MANAGER_TOOLBAR = Main.Base.convert(Main.Base.Int32, 4)
    const PLACEHOLDER = const GTK_UI_MANAGER_PLACEHOLDER = Main.Base.convert(Main.Base.Int32, 8)
    const POPUP = const GTK_UI_MANAGER_POPUP = Main.Base.convert(Main.Base.Int32, 16)
    const MENUITEM = const GTK_UI_MANAGER_MENUITEM = Main.Base.convert(Main.Base.Int32, 32)
    const TOOLITEM = const GTK_UI_MANAGER_TOOLITEM = Main.Base.convert(Main.Base.Int32, 64)
    const SEPARATOR = const GTK_UI_MANAGER_SEPARATOR = Main.Base.convert(Main.Base.Int32, 128)
    const ACCELERATOR = const GTK_UI_MANAGER_ACCELERATOR = Main.Base.convert(Main.Base.Int32, 256)
    const POPUP_WITH_ACCELS = const GTK_UI_MANAGER_POPUP_WITH_ACCELS = Main.Base.convert(Main.Base.Int32, 512)
    end)))
    const G_GNUC_FUNCTION = ""
    const G_GNUC_PRETTY_FUNCTION = ""
    const G_ANALYZER_ANALYZING = 0
    const G_GINT16_MODIFIER = "h"
    const G_GINT16_FORMAT = "hi"
    const G_GUINT16_FORMAT = "hu"
    const G_GINT32_MODIFIER = ""
    const G_GINT32_FORMAT = "i"
    const G_GUINT32_FORMAT = "u"
    const G_GINT64_MODIFIER = "l"
    const G_GINT64_FORMAT = "li"
    const G_GUINT64_FORMAT = "lu"
    const GLIB_SIZEOF_VOID_P = 8
    const GLIB_SIZEOF_LONG = 8
    const GLIB_SIZEOF_SIZE_T = 8
    const GLIB_SIZEOF_SSIZE_T = 8
    const G_GSIZE_MODIFIER = "l"
    const G_GSSIZE_MODIFIER = "l"
    const G_GSIZE_FORMAT = "lu"
    const G_GSSIZE_FORMAT = "li"
    const G_POLLFD_FORMAT = "%d"
    const G_GINTPTR_MODIFIER = "l"
    const G_GINTPTR_FORMAT = "li"
    const G_GUINTPTR_FORMAT = "lu"
    const GLIB_MAJOR_VERSION = 2
    const GLIB_MINOR_VERSION = 50
    const GLIB_MICRO_VERSION = 3
    const G_VA_COPY_AS_ARRAY = 1
    const G_HAVE_ISO_VARARGS = 1
    const G_HAVE_GNUC_VARARGS = 1
    const G_HAVE_GROWING_STACK = 0
    const G_HAVE_GNUC_VISIBILITY = 1
    const G_MODULE_SUFFIX = "so"
    const G_PID_FORMAT = "i"
    const GLIB_SYSDEF_AF_UNIX = 1
    const GLIB_SYSDEF_AF_INET = 2
    const GLIB_SYSDEF_MSG_OOB = 1
    const GLIB_SYSDEF_MSG_PEEK = 2
    const GLIB_SYSDEF_MSG_DONTROUTE = 4
    const G_E = 2.718281828459045
    const G_PI = 3.141592653589793
    const G_LITTLE_ENDIAN = 1234
    const G_BIG_ENDIAN = 4321
    const G_PDP_ENDIAN = 3412
    const G_DATALIST_FLAGS_MASK = 0x03
    const G_DATE_BAD_JULIAN = UInt32(0)
    const G_DATE_BAD_DAY = UInt32(0)
    const G_DATE_BAD_YEAR = UInt32(0)
    const G_DIR_SEPARATOR = '/'
    const G_DIR_SEPARATOR_S = "/"
    const G_SEARCHPATH_SEPARATOR = ':'
    const G_SEARCHPATH_SEPARATOR_S = ":"
    const G_PRIORITY_DEFAULT = 0
    const G_PRIORITY_HIGH_IDLE = 100
    const G_PRIORITY_DEFAULT_IDLE = 200
    const G_PRIORITY_LOW = 300
    const G_UNICHAR_MAX_DECOMPOSITION_LENGTH = 18
    const G_KEY_FILE_DESKTOP_GROUP = "Desktop Entry"
    const G_KEY_FILE_DESKTOP_KEY_TYPE = "Type"
    const G_KEY_FILE_DESKTOP_KEY_VERSION = "Version"
    const G_KEY_FILE_DESKTOP_KEY_NAME = "Name"
    const G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = "GenericName"
    const G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = "NoDisplay"
    const G_KEY_FILE_DESKTOP_KEY_COMMENT = "Comment"
    const G_KEY_FILE_DESKTOP_KEY_ICON = "Icon"
    const G_KEY_FILE_DESKTOP_KEY_HIDDEN = "Hidden"
    const G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = "OnlyShowIn"
    const G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = "NotShowIn"
    const G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = "TryExec"
    const G_KEY_FILE_DESKTOP_KEY_EXEC = "Exec"
    const G_KEY_FILE_DESKTOP_KEY_PATH = "Path"
    const G_KEY_FILE_DESKTOP_KEY_TERMINAL = "Terminal"
    const G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = "MimeType"
    const G_KEY_FILE_DESKTOP_KEY_CATEGORIES = "Categories"
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = "StartupNotify"
    const G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = "StartupWMClass"
    const G_KEY_FILE_DESKTOP_KEY_URL = "URL"
    const G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = "DBusActivatable"
    const G_KEY_FILE_DESKTOP_KEY_ACTIONS = "Actions"
    const G_KEY_FILE_DESKTOP_KEY_GETTEXT_DOMAIN = "X-GNOME-Gettext-Domain"
    const G_KEY_FILE_DESKTOP_KEY_FULLNAME = "X-GNOME-FullName"
    const G_KEY_FILE_DESKTOP_KEY_KEYWORDS = "Keywords"
    const G_KEY_FILE_DESKTOP_TYPE_APPLICATION = "Application"
    const G_KEY_FILE_DESKTOP_TYPE_LINK = "Link"
    const G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = "Directory"
    const G_OPTION_REMAINING = ""
    const G_CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    const G_CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz"
    const G_CSET_DIGITS = "0123456789"
    const G_STR_DELIMITERS = "_-|> <."
    const G_USEC_PER_SEC = 1000000
    const G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ":/?#[]@"
    const G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = "!\$&'()*+,;="
    const G_ALLOC_ONLY = 1
    const G_ALLOC_AND_FREE = 2
    const G_ALLOCATOR_LIST = 1
    const G_ALLOCATOR_SLIST = 2
    const G_ALLOCATOR_NODE = 3
    const G_SIGNAL_FLAGS_MASK = Float32(0x1f)
    const G_SIGNAL_MATCH_MASK = Float32(0x03)
    const G_FILE_ATTRIBUTE_STANDARD_TYPE = "standard::type"
    const G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = "standard::is-hidden"
    const G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP = "standard::is-backup"
    const G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = "standard::is-symlink"
    const G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = "standard::is-virtual"
    const G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE = "standard::is-volatile"
    const G_FILE_ATTRIBUTE_STANDARD_NAME = "standard::name"
    const G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = "standard::display-name"
    const G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME = "standard::edit-name"
    const G_FILE_ATTRIBUTE_STANDARD_COPY_NAME = "standard::copy-name"
    const G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION = "standard::description"
    const G_FILE_ATTRIBUTE_STANDARD_ICON = "standard::icon"
    const G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = "standard::symbolic-icon"
    const G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = "standard::content-type"
    const G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = "standard::fast-content-type"
    const G_FILE_ATTRIBUTE_STANDARD_SIZE = "standard::size"
    const G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = "standard::allocated-size"
    const G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = "standard::symlink-target"
    const G_FILE_ATTRIBUTE_STANDARD_TARGET_URI = "standard::target-uri"
    const G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER = "standard::sort-order"
    const G_FILE_ATTRIBUTE_ETAG_VALUE = "etag::value"
    const G_FILE_ATTRIBUTE_ID_FILE = "id::file"
    const G_FILE_ATTRIBUTE_ID_FILESYSTEM = "id::filesystem"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_READ = "access::can-read"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE = "access::can-write"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = "access::can-execute"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE = "access::can-delete"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH = "access::can-trash"
    const G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME = "access::can-rename"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = "mountable::can-mount"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = "mountable::can-unmount"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = "mountable::can-eject"
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = "mountable::unix-device"
    const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = "mountable::unix-device-file"
    const G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = "mountable::hal-udi"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START = "mountable::can-start"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = "mountable::can-start-degraded"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = "mountable::can-stop"
    const G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = "mountable::start-stop-type"
    const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = "mountable::can-poll"
    const G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = "mountable::is-media-check-automatic"
    const G_FILE_ATTRIBUTE_TIME_MODIFIED = "time::modified"
    const G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC = "time::modified-usec"
    const G_FILE_ATTRIBUTE_TIME_ACCESS = "time::access"
    const G_FILE_ATTRIBUTE_TIME_ACCESS_USEC = "time::access-usec"
    const G_FILE_ATTRIBUTE_TIME_CHANGED = "time::changed"
    const G_FILE_ATTRIBUTE_TIME_CHANGED_USEC = "time::changed-usec"
    const G_FILE_ATTRIBUTE_TIME_CREATED = "time::created"
    const G_FILE_ATTRIBUTE_TIME_CREATED_USEC = "time::created-usec"
    const G_FILE_ATTRIBUTE_UNIX_DEVICE = "unix::device"
    const G_FILE_ATTRIBUTE_UNIX_INODE = "unix::inode"
    const G_FILE_ATTRIBUTE_UNIX_MODE = "unix::mode"
    const G_FILE_ATTRIBUTE_UNIX_NLINK = "unix::nlink"
    const G_FILE_ATTRIBUTE_UNIX_UID = "unix::uid"
    const G_FILE_ATTRIBUTE_UNIX_GID = "unix::gid"
    const G_FILE_ATTRIBUTE_UNIX_RDEV = "unix::rdev"
    const G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = "unix::block-size"
    const G_FILE_ATTRIBUTE_UNIX_BLOCKS = "unix::blocks"
    const G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = "unix::is-mountpoint"
    const G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE = "dos::is-archive"
    const G_FILE_ATTRIBUTE_DOS_IS_SYSTEM = "dos::is-system"
    const G_FILE_ATTRIBUTE_OWNER_USER = "owner::user"
    const G_FILE_ATTRIBUTE_OWNER_USER_REAL = "owner::user-real"
    const G_FILE_ATTRIBUTE_OWNER_GROUP = "owner::group"
    const G_FILE_ATTRIBUTE_THUMBNAIL_PATH = "thumbnail::path"
    const G_FILE_ATTRIBUTE_THUMBNAILING_FAILED = "thumbnail::failed"
    const G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID = "thumbnail::is-valid"
    const G_FILE_ATTRIBUTE_PREVIEW_ICON = "preview::icon"
    const G_FILE_ATTRIBUTE_FILESYSTEM_SIZE = "filesystem::size"
    const G_FILE_ATTRIBUTE_FILESYSTEM_FREE = "filesystem::free"
    const G_FILE_ATTRIBUTE_FILESYSTEM_USED = "filesystem::used"
    const G_FILE_ATTRIBUTE_FILESYSTEM_TYPE = "filesystem::type"
    const G_FILE_ATTRIBUTE_FILESYSTEM_READONLY = "filesystem::readonly"
    const G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = "filesystem::use-preview"
    const G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE = "filesystem::remote"
    const G_FILE_ATTRIBUTE_GVFS_BACKEND = "gvfs::backend"
    const G_FILE_ATTRIBUTE_SELINUX_CONTEXT = "selinux::context"
    const G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT = "trash::item-count"
    const G_FILE_ATTRIBUTE_TRASH_ORIG_PATH = "trash::orig-path"
    const G_FILE_ATTRIBUTE_TRASH_DELETION_DATE = "trash::deletion-date"
    const G_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-volume-monitor"
    const G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = "gio-native-volume-monitor"
    const G_NETWORK_MONITOR_EXTENSION_POINT_NAME = "gio-network-monitor"
    const G_PROXY_EXTENSION_POINT_NAME = "gio-proxy"
    const G_PROXY_RESOLVER_EXTENSION_POINT_NAME = "gio-proxy-resolver"
    const G_TLS_BACKEND_EXTENSION_POINT_NAME = "gio-tls-backend"
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = "1.3.6.1.5.5.7.3.1"
    const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = "1.3.6.1.5.5.7.3.2"
    const G_VFS_EXTENSION_POINT_NAME = "gio-vfs"
    const G_VOLUME_IDENTIFIER_KIND_HAL_UDI = "hal-udi"
    const G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = "unix-device"
    const G_VOLUME_IDENTIFIER_KIND_LABEL = "label"
    const G_VOLUME_IDENTIFIER_KIND_UUID = "uuid"
    const G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT = "nfs-mount"
    const G_VOLUME_IDENTIFIER_KIND_CLASS = "class"
    const G_MENU_ATTRIBUTE_ACTION = "action"
    const G_MENU_ATTRIBUTE_ACTION_NAMESPACE = "action-namespace"
    const G_MENU_ATTRIBUTE_TARGET = "target"
    const G_MENU_ATTRIBUTE_LABEL = "label"
    const G_MENU_ATTRIBUTE_ICON = "icon"
    const G_MENU_LINK_SUBMENU = "submenu"
    const G_MENU_LINK_SECTION = "section"
    const GDK_CURRENT_TIME = Int32(0)
    const GDK_PARENT_RELATIVE = Int32(1)
    const GDK_MAX_TIMECOORD_AXES = 128
    const GDK_PIXBUF_FEATURES_H = 1
    const GDK_PIXBUF_VERSION = "2.36.5"
    const GDK_KEY_VoidSymbol = Float32(0x000fffff)
    const GDK_KEY_BackSpace = 0xff08
    const GDK_KEY_Tab = 0xff09
    const GDK_KEY_Linefeed = 0xff0a
    const GDK_KEY_Clear = 0xff0b
    const GDK_KEY_Return = 0xff0d
    const GDK_KEY_Pause = 0xff13
    const GDK_KEY_Scroll_Lock = 0xff14
    const GDK_KEY_Sys_Req = 0xff15
    const GDK_KEY_Escape = 0xff1b
    const GDK_KEY_Delete = Float32(0x0fff)
    const GDK_KEY_Multi_key = 0xff20
    const GDK_KEY_Codeinput = 0xff37
    const GDK_KEY_SingleCandidate = 0xff3c
    const GDK_KEY_MultipleCandidate = 0xff3d
    const GDK_KEY_PreviousCandidate = 0xff3e
    const GDK_KEY_Kanji = 0xff21
    const GDK_KEY_Muhenkan = 0xff22
    const GDK_KEY_Henkan_Mode = 0xff23
    const GDK_KEY_Henkan = 0xff23
    const GDK_KEY_Romaji = 0xff24
    const GDK_KEY_Hiragana = 0xff25
    const GDK_KEY_Katakana = 0xff26
    const GDK_KEY_Hiragana_Katakana = 0xff27
    const GDK_KEY_Zenkaku = 0xff28
    const GDK_KEY_Hankaku = 0xff29
    const GDK_KEY_Zenkaku_Hankaku = 0xff2a
    const GDK_KEY_Touroku = 0xff2b
    const GDK_KEY_Massyo = 0xff2c
    const GDK_KEY_Kana_Lock = 0xff2d
    const GDK_KEY_Kana_Shift = 0xff2e
    const GDK_KEY_Eisu_Shift = Float32(0x0ff2)
    const GDK_KEY_Eisu_toggle = 0xff30
    const GDK_KEY_Kanji_Bangou = 0xff37
    const GDK_KEY_Zen_Koho = 0xff3d
    const GDK_KEY_Mae_Koho = 0xff3e
    const GDK_KEY_Home = 0xff50
    const GDK_KEY_Left = 0xff51
    const GDK_KEY_Up = 0xff52
    const GDK_KEY_Right = 0xff53
    const GDK_KEY_Down = 0xff54
    const GDK_KEY_Prior = 0xff55
    const GDK_KEY_Page_Up = 0xff55
    const GDK_KEY_Next = 0xff56
    const GDK_KEY_Page_Down = 0xff56
    const GDK_KEY_End = 0xff57
    const GDK_KEY_Begin = 0xff58
    const GDK_KEY_Select = 0xff60
    const GDK_KEY_Print = 0xff61
    const GDK_KEY_Execute = 0xff62
    const GDK_KEY_Insert = 0xff63
    const GDK_KEY_Undo = 0xff65
    const GDK_KEY_Redo = 0xff66
    const GDK_KEY_Menu = 0xff67
    const GDK_KEY_Find = 0xff68
    const GDK_KEY_Cancel = 0xff69
    const GDK_KEY_Help = 0xff6a
    const GDK_KEY_Break = 0xff6b
    const GDK_KEY_Mode_switch = 0xff7e
    const GDK_KEY_script_switch = 0xff7e
    const GDK_KEY_Num_Lock = Float32(0x0ff7)
    const GDK_KEY_KP_Space = 0xff80
    const GDK_KEY_KP_Tab = 0xff89
    const GDK_KEY_KP_Enter = 0xff8d
    const GDK_KEY_KP_Home = 0xff95
    const GDK_KEY_KP_Left = 0xff96
    const GDK_KEY_KP_Up = 0xff97
    const GDK_KEY_KP_Right = 0xff98
    const GDK_KEY_KP_Down = 0xff99
    const GDK_KEY_KP_Prior = 0xff9a
    const GDK_KEY_KP_Page_Up = 0xff9a
    const GDK_KEY_KP_Next = 0xff9b
    const GDK_KEY_KP_Page_Down = 0xff9b
    const GDK_KEY_KP_End = 0xff9c
    const GDK_KEY_KP_Begin = 0xff9d
    const GDK_KEY_KP_Insert = 0xff9e
    const GDK_KEY_KP_Delete = Float32(0x0ff9)
    const GDK_KEY_KP_Equal = 0xffbd
    const GDK_KEY_KP_Multiply = 0xffaa
    const GDK_KEY_KP_Add = 0xffab
    const GDK_KEY_KP_Separator = 0xffac
    const GDK_KEY_KP_Subtract = 0xffad
    const GDK_KEY_KP_Decimal = 0xffae
    const GDK_KEY_KP_Divide = Float32(0x0ffa)
    const GDK_KEY_Shift_L = 0xffe1
    const GDK_KEY_Shift_R = 0xffe2
    const GDK_KEY_Control_L = 0xffe3
    const GDK_KEY_Control_R = 0xffe4
    const GDK_KEY_Caps_Lock = 0xffe5
    const GDK_KEY_Shift_Lock = 0xffe6
    const GDK_KEY_Meta_L = 0xffe7
    const GDK_KEY_Meta_R = 0xffe8
    const GDK_KEY_Alt_L = 0xffe9
    const GDK_KEY_Alt_R = 0xffea
    const GDK_KEY_Super_L = 0xffeb
    const GDK_KEY_Super_R = 0xffec
    const GDK_KEY_Hyper_L = 0xffed
    const GDK_KEY_Hyper_R = 0xffee
    const GDK_KEY_ISO_Lock = 0xfe01
    const GDK_KEY_ISO_Level2_Latch = 0xfe02
    const GDK_KEY_ISO_Level3_Shift = 0xfe03
    const GDK_KEY_ISO_Level3_Latch = 0xfe04
    const GDK_KEY_ISO_Level3_Lock = 0xfe05
    const GDK_KEY_ISO_Level5_Shift = 0xfe11
    const GDK_KEY_ISO_Level5_Latch = 0xfe12
    const GDK_KEY_ISO_Level5_Lock = 0xfe13
    const GDK_KEY_ISO_Group_Shift = 0xff7e
    const GDK_KEY_ISO_Group_Latch = 0xfe06
    const GDK_KEY_ISO_Group_Lock = 0xfe07
    const GDK_KEY_ISO_Next_Group = 0xfe08
    const GDK_KEY_ISO_Next_Group_Lock = 0xfe09
    const GDK_KEY_ISO_Prev_Group = 0xfe0a
    const GDK_KEY_ISO_Prev_Group_Lock = 0xfe0b
    const GDK_KEY_ISO_First_Group = 0xfe0c
    const GDK_KEY_ISO_First_Group_Lock = 0xfe0d
    const GDK_KEY_ISO_Last_Group = 0xfe0e
    const GDK_KEY_ISO_Last_Group_Lock = Float32(0x0fe0)
    const GDK_KEY_ISO_Left_Tab = 0xfe20
    const GDK_KEY_ISO_Move_Line_Up = 0xfe21
    const GDK_KEY_ISO_Move_Line_Down = 0xfe22
    const GDK_KEY_ISO_Partial_Line_Up = 0xfe23
    const GDK_KEY_ISO_Partial_Line_Down = 0xfe24
    const GDK_KEY_ISO_Partial_Space_Left = 0xfe25
    const GDK_KEY_ISO_Partial_Space_Right = 0xfe26
    const GDK_KEY_ISO_Set_Margin_Left = 0xfe27
    const GDK_KEY_ISO_Set_Margin_Right = 0xfe28
    const GDK_KEY_ISO_Release_Margin_Left = 0xfe29
    const GDK_KEY_ISO_Release_Margin_Right = 0xfe2a
    const GDK_KEY_ISO_Release_Both_Margins = 0xfe2b
    const GDK_KEY_ISO_Fast_Cursor_Left = 0xfe2c
    const GDK_KEY_ISO_Fast_Cursor_Right = 0xfe2d
    const GDK_KEY_ISO_Fast_Cursor_Up = 0xfe2e
    const GDK_KEY_ISO_Fast_Cursor_Down = Float32(0x0fe2)
    const GDK_KEY_ISO_Continuous_Underline = 0xfe30
    const GDK_KEY_ISO_Discontinuous_Underline = 0xfe31
    const GDK_KEY_ISO_Emphasize = 0xfe32
    const GDK_KEY_ISO_Center_Object = 0xfe33
    const GDK_KEY_ISO_Enter = 0xfe34
    const GDK_KEY_dead_grave = 0xfe50
    const GDK_KEY_dead_acute = 0xfe51
    const GDK_KEY_dead_circumflex = 0xfe52
    const GDK_KEY_dead_tilde = 0xfe53
    const GDK_KEY_dead_perispomeni = 0xfe53
    const GDK_KEY_dead_macron = 0xfe54
    const GDK_KEY_dead_breve = 0xfe55
    const GDK_KEY_dead_abovedot = 0xfe56
    const GDK_KEY_dead_diaeresis = 0xfe57
    const GDK_KEY_dead_abovering = 0xfe58
    const GDK_KEY_dead_doubleacute = 0xfe59
    const GDK_KEY_dead_caron = 0xfe5a
    const GDK_KEY_dead_cedilla = 0xfe5b
    const GDK_KEY_dead_ogonek = 0xfe5c
    const GDK_KEY_dead_iota = 0xfe5d
    const GDK_KEY_dead_voiced_sound = 0xfe5e
    const GDK_KEY_dead_semivoiced_sound = Float32(0x0fe5)
    const GDK_KEY_dead_belowdot = 0xfe60
    const GDK_KEY_dead_hook = 0xfe61
    const GDK_KEY_dead_horn = 0xfe62
    const GDK_KEY_dead_stroke = 0xfe63
    const GDK_KEY_dead_abovecomma = 0xfe64
    const GDK_KEY_dead_psili = 0xfe64
    const GDK_KEY_dead_abovereversedcomma = 0xfe65
    const GDK_KEY_dead_dasia = 0xfe65
    const GDK_KEY_dead_doublegrave = 0xfe66
    const GDK_KEY_dead_belowring = 0xfe67
    const GDK_KEY_dead_belowmacron = 0xfe68
    const GDK_KEY_dead_belowcircumflex = 0xfe69
    const GDK_KEY_dead_belowtilde = 0xfe6a
    const GDK_KEY_dead_belowbreve = 0xfe6b
    const GDK_KEY_dead_belowdiaeresis = 0xfe6c
    const GDK_KEY_dead_invertedbreve = 0xfe6d
    const GDK_KEY_dead_belowcomma = 0xfe6e
    const GDK_KEY_dead_currency = Float32(0x0fe6)
    const GDK_KEY_dead_a = 0xfe80
    const GDK_KEY_dead_A = 0xfe81
    const GDK_KEY_dead_e = 0xfe82
    const GDK_KEY_dead_E = 0xfe83
    const GDK_KEY_dead_i = 0xfe84
    const GDK_KEY_dead_I = 0xfe85
    const GDK_KEY_dead_o = 0xfe86
    const GDK_KEY_dead_O = 0xfe87
    const GDK_KEY_dead_u = 0xfe88
    const GDK_KEY_dead_U = 0xfe89
    const GDK_KEY_dead_small_schwa = 0xfe8a
    const GDK_KEY_dead_capital_schwa = 0xfe8b
    const GDK_KEY_dead_greek = 0xfe8c
    const GDK_KEY_First_Virtual_Screen = 0xfed0
    const GDK_KEY_Prev_Virtual_Screen = 0xfed1
    const GDK_KEY_Next_Virtual_Screen = 0xfed2
    const GDK_KEY_Last_Virtual_Screen = 0xfed4
    const GDK_KEY_Terminate_Server = 0xfed5
    const GDK_KEY_AccessX_Enable = 0xfe70
    const GDK_KEY_AccessX_Feedback_Enable = 0xfe71
    const GDK_KEY_RepeatKeys_Enable = 0xfe72
    const GDK_KEY_SlowKeys_Enable = 0xfe73
    const GDK_KEY_BounceKeys_Enable = 0xfe74
    const GDK_KEY_StickyKeys_Enable = 0xfe75
    const GDK_KEY_MouseKeys_Enable = 0xfe76
    const GDK_KEY_MouseKeys_Accel_Enable = 0xfe77
    const GDK_KEY_Overlay1_Enable = 0xfe78
    const GDK_KEY_Overlay2_Enable = 0xfe79
    const GDK_KEY_AudibleBell_Enable = 0xfe7a
    const GDK_KEY_Pointer_Left = 0xfee0
    const GDK_KEY_Pointer_Right = 0xfee1
    const GDK_KEY_Pointer_Up = 0xfee2
    const GDK_KEY_Pointer_Down = 0xfee3
    const GDK_KEY_Pointer_UpLeft = 0xfee4
    const GDK_KEY_Pointer_UpRight = 0xfee5
    const GDK_KEY_Pointer_DownLeft = 0xfee6
    const GDK_KEY_Pointer_DownRight = 0xfee7
    const GDK_KEY_Pointer_Button_Dflt = 0xfee8
    const GDK_KEY_Pointer_DblClick_Dflt = 0xfeee
    const GDK_KEY_Pointer_Drag_Dflt = 0xfef4
    const GDK_KEY_Pointer_EnableKeys = 0xfef9
    const GDK_KEY_Pointer_Accelerate = 0xfefa
    const GDK_KEY_Pointer_DfltBtnNext = 0xfefb
    const GDK_KEY_Pointer_DfltBtnPrev = 0xfefc
    const GDK_KEY_ch = 0xfea0
    const GDK_KEY_Ch = 0xfea1
    const GDK_KEY_CH = 0xfea2
    const GDK_KEY_c_h = 0xfea3
    const GDK_KEY_C_h = 0xfea4
    const GDK_KEY_C_H = 0xfea5
    const GDK_KEY_3270_Duplicate = 0xfd01
    const GDK_KEY_3270_FieldMark = 0xfd02
    const GDK_KEY_3270_BackTab = 0xfd05
    const GDK_KEY_3270_EraseEOF = 0xfd06
    const GDK_KEY_3270_EraseInput = 0xfd07
    const GDK_KEY_3270_Reset = 0xfd08
    const GDK_KEY_3270_Quit = 0xfd09
    const GDK_KEY_3270_Test = 0xfd0d
    const GDK_KEY_3270_Attn = 0xfd0e
    const GDK_KEY_3270_CursorBlink = Float32(0x0fd0)
    const GDK_KEY_3270_AltCursor = 0xfd10
    const GDK_KEY_3270_KeyClick = 0xfd11
    const GDK_KEY_3270_Jump = 0xfd12
    const GDK_KEY_3270_Ident = 0xfd13
    const GDK_KEY_3270_Rule = 0xfd14
    const GDK_KEY_3270_Copy = 0xfd15
    const GDK_KEY_3270_Play = 0xfd16
    const GDK_KEY_3270_Setup = 0xfd17
    const GDK_KEY_3270_Record = 0xfd18
    const GDK_KEY_3270_ChangeScreen = 0xfd19
    const GDK_KEY_3270_DeleteWord = 0xfd1a
    const GDK_KEY_3270_ExSelect = 0xfd1b
    const GDK_KEY_3270_CursorSelect = 0xfd1c
    const GDK_KEY_3270_PrintScreen = 0xfd1d
    const GDK_KEY_3270_Enter = 0xfd1e
    const GDK_KEY_space = 0x0020
    const GDK_KEY_exclam = 0x0021
    const GDK_KEY_quotedbl = 0x0022
    const GDK_KEY_numbersign = 0x0023
    const GDK_KEY_dollar = 0x0024
    const GDK_KEY_percent = 0x0025
    const GDK_KEY_ampersand = 0x0026
    const GDK_KEY_apostrophe = 0x0027
    const GDK_KEY_quoteright = 0x0027
    const GDK_KEY_parenleft = 0x0028
    const GDK_KEY_parenright = 0x0029
    const GDK_KEY_asterisk = 0x002a
    const GDK_KEY_plus = 0x002b
    const GDK_KEY_comma = 0x002c
    const GDK_KEY_minus = 0x002d
    const GDK_KEY_period = 0x002e
    const GDK_KEY_slash = Float32(0x02)
    const GDK_KEY_colon = 0x003a
    const GDK_KEY_semicolon = 0x003b
    const GDK_KEY_less = 0x003c
    const GDK_KEY_equal = 0x003d
    const GDK_KEY_greater = 0x003e
    const GDK_KEY_question = Float32(0x03)
    const GDK_KEY_at = 0x0040
    const GDK_KEY_A = 0x0041
    const GDK_KEY_B = 0x0042
    const GDK_KEY_C = 0x0043
    const GDK_KEY_D = 0x0044
    const GDK_KEY_E = 0x0045
    const GDK_KEY_F = 0x0046
    const GDK_KEY_G = 0x0047
    const GDK_KEY_H = 0x0048
    const GDK_KEY_I = 0x0049
    const GDK_KEY_J = 0x004a
    const GDK_KEY_K = 0x004b
    const GDK_KEY_L = 0x004c
    const GDK_KEY_M = 0x004d
    const GDK_KEY_N = 0x004e
    const GDK_KEY_O = Float32(0x04)
    const GDK_KEY_P = 0x0050
    const GDK_KEY_Q = 0x0051
    const GDK_KEY_R = 0x0052
    const GDK_KEY_S = 0x0053
    const GDK_KEY_T = 0x0054
    const GDK_KEY_U = 0x0055
    const GDK_KEY_V = 0x0056
    const GDK_KEY_W = 0x0057
    const GDK_KEY_X = 0x0058
    const GDK_KEY_Y = 0x0059
    const GDK_KEY_Z = 0x005a
    const GDK_KEY_bracketleft = 0x005b
    const GDK_KEY_backslash = 0x005c
    const GDK_KEY_bracketright = 0x005d
    const GDK_KEY_asciicircum = 0x005e
    const GDK_KEY_underscore = Float32(0x05)
    const GDK_KEY_grave = 0x0060
    const GDK_KEY_quoteleft = 0x0060
    const GDK_KEY_a = 0x0061
    const GDK_KEY_b = 0x0062
    const GDK_KEY_c = 0x0063
    const GDK_KEY_d = 0x0064
    const GDK_KEY_e = 0x0065
    const GDK_KEY_f = 0x0066
    const GDK_KEY_g = 0x0067
    const GDK_KEY_h = 0x0068
    const GDK_KEY_i = 0x0069
    const GDK_KEY_j = 0x006a
    const GDK_KEY_k = 0x006b
    const GDK_KEY_l = 0x006c
    const GDK_KEY_m = 0x006d
    const GDK_KEY_n = 0x006e
    const GDK_KEY_o = Float32(0x06)
    const GDK_KEY_p = 0x0070
    const GDK_KEY_q = 0x0071
    const GDK_KEY_r = 0x0072
    const GDK_KEY_s = 0x0073
    const GDK_KEY_t = 0x0074
    const GDK_KEY_u = 0x0075
    const GDK_KEY_v = 0x0076
    const GDK_KEY_w = 0x0077
    const GDK_KEY_x = 0x0078
    const GDK_KEY_y = 0x0079
    const GDK_KEY_z = 0x007a
    const GDK_KEY_braceleft = 0x007b
    const GDK_KEY_bar = 0x007c
    const GDK_KEY_braceright = 0x007d
    const GDK_KEY_asciitilde = 0x007e
    const GDK_KEY_nobreakspace = 0x00a0
    const GDK_KEY_exclamdown = 0x00a1
    const GDK_KEY_cent = 0x00a2
    const GDK_KEY_sterling = 0x00a3
    const GDK_KEY_currency = 0x00a4
    const GDK_KEY_yen = 0x00a5
    const GDK_KEY_brokenbar = 0x00a6
    const GDK_KEY_section = 0x00a7
    const GDK_KEY_diaeresis = 0x00a8
    const GDK_KEY_copyright = 0x00a9
    const GDK_KEY_ordfeminine = 0x00aa
    const GDK_KEY_guillemotleft = 0x00ab
    const GDK_KEY_notsign = 0x00ac
    const GDK_KEY_hyphen = 0x00ad
    const GDK_KEY_registered = 0x00ae
    const GDK_KEY_macron = Float32(0x0a)
    const GDK_KEY_degree = 0x00b0
    const GDK_KEY_plusminus = 0x00b1
    const GDK_KEY_twosuperior = 0x00b2
    const GDK_KEY_threesuperior = 0x00b3
    const GDK_KEY_acute = 0x00b4
    const GDK_KEY_mu = 0x00b5
    const GDK_KEY_paragraph = 0x00b6
    const GDK_KEY_periodcentered = 0x00b7
    const GDK_KEY_cedilla = 0x00b8
    const GDK_KEY_onesuperior = 0x00b9
    const GDK_KEY_masculine = 0x00ba
    const GDK_KEY_guillemotright = 0x00bb
    const GDK_KEY_onequarter = 0x00bc
    const GDK_KEY_onehalf = 0x00bd
    const GDK_KEY_threequarters = 0x00be
    const GDK_KEY_questiondown = Float32(0x0b)
    const GDK_KEY_Agrave = 0x00c0
    const GDK_KEY_Aacute = 0x00c1
    const GDK_KEY_Acircumflex = 0x00c2
    const GDK_KEY_Atilde = 0x00c3
    const GDK_KEY_Adiaeresis = 0x00c4
    const GDK_KEY_Aring = 0x00c5
    const GDK_KEY_AE = 0x00c6
    const GDK_KEY_Ccedilla = 0x00c7
    const GDK_KEY_Egrave = 0x00c8
    const GDK_KEY_Eacute = 0x00c9
    const GDK_KEY_Ecircumflex = 0x00ca
    const GDK_KEY_Ediaeresis = 0x00cb
    const GDK_KEY_Igrave = 0x00cc
    const GDK_KEY_Iacute = 0x00cd
    const GDK_KEY_Icircumflex = 0x00ce
    const GDK_KEY_Idiaeresis = Float32(0x0c)
    const GDK_KEY_ETH = 0x00d0
    const GDK_KEY_Eth = 0x00d0
    const GDK_KEY_Ntilde = 0x00d1
    const GDK_KEY_Ograve = 0x00d2
    const GDK_KEY_Oacute = 0x00d3
    const GDK_KEY_Ocircumflex = 0x00d4
    const GDK_KEY_Otilde = 0x00d5
    const GDK_KEY_Odiaeresis = 0x00d6
    const GDK_KEY_multiply = 0x00d7
    const GDK_KEY_Oslash = 0x00d8
    const GDK_KEY_Ooblique = 0x00d8
    const GDK_KEY_Ugrave = 0x00d9
    const GDK_KEY_Uacute = 0x00da
    const GDK_KEY_Ucircumflex = 0x00db
    const GDK_KEY_Udiaeresis = 0x00dc
    const GDK_KEY_Yacute = 0x00dd
    const GDK_KEY_THORN = 0x00de
    const GDK_KEY_Thorn = 0x00de
    const GDK_KEY_ssharp = Float32(0x0d)
    const GDK_KEY_agrave = 0x00e0
    const GDK_KEY_aacute = 0x00e1
    const GDK_KEY_acircumflex = 0x00e2
    const GDK_KEY_atilde = 0x00e3
    const GDK_KEY_adiaeresis = 0x00e4
    const GDK_KEY_aring = 0x00e5
    const GDK_KEY_ae = 0x00e6
    const GDK_KEY_ccedilla = 0x00e7
    const GDK_KEY_egrave = 0x00e8
    const GDK_KEY_eacute = 0x00e9
    const GDK_KEY_ecircumflex = 0x00ea
    const GDK_KEY_ediaeresis = 0x00eb
    const GDK_KEY_igrave = 0x00ec
    const GDK_KEY_iacute = 0x00ed
    const GDK_KEY_icircumflex = 0x00ee
    const GDK_KEY_idiaeresis = Float32(0x0e)
    const GDK_KEY_eth = 0x00f0
    const GDK_KEY_ntilde = 0x00f1
    const GDK_KEY_ograve = 0x00f2
    const GDK_KEY_oacute = 0x00f3
    const GDK_KEY_ocircumflex = 0x00f4
    const GDK_KEY_otilde = 0x00f5
    const GDK_KEY_odiaeresis = 0x00f6
    const GDK_KEY_division = 0x00f7
    const GDK_KEY_oslash = 0x00f8
    const GDK_KEY_ooblique = 0x00f8
    const GDK_KEY_ugrave = 0x00f9
    const GDK_KEY_uacute = 0x00fa
    const GDK_KEY_ucircumflex = 0x00fb
    const GDK_KEY_udiaeresis = 0x00fc
    const GDK_KEY_yacute = 0x00fd
    const GDK_KEY_thorn = 0x00fe
    const GDK_KEY_ydiaeresis = Float32(0x0f)
    const GDK_KEY_Aogonek = 0x01a1
    const GDK_KEY_breve = 0x01a2
    const GDK_KEY_Lstroke = 0x01a3
    const GDK_KEY_Lcaron = 0x01a5
    const GDK_KEY_Sacute = 0x01a6
    const GDK_KEY_Scaron = 0x01a9
    const GDK_KEY_Scedilla = 0x01aa
    const GDK_KEY_Tcaron = 0x01ab
    const GDK_KEY_Zacute = 0x01ac
    const GDK_KEY_Zcaron = 0x01ae
    const GDK_KEY_Zabovedot = Float32(0x1a)
    const GDK_KEY_aogonek = 0x01b1
    const GDK_KEY_ogonek = 0x01b2
    const GDK_KEY_lstroke = 0x01b3
    const GDK_KEY_lcaron = 0x01b5
    const GDK_KEY_sacute = 0x01b6
    const GDK_KEY_caron = 0x01b7
    const GDK_KEY_scaron = 0x01b9
    const GDK_KEY_scedilla = 0x01ba
    const GDK_KEY_tcaron = 0x01bb
    const GDK_KEY_zacute = 0x01bc
    const GDK_KEY_doubleacute = 0x01bd
    const GDK_KEY_zcaron = 0x01be
    const GDK_KEY_zabovedot = Float32(0x1b)
    const GDK_KEY_Racute = 0x01c0
    const GDK_KEY_Abreve = 0x01c3
    const GDK_KEY_Lacute = 0x01c5
    const GDK_KEY_Cacute = 0x01c6
    const GDK_KEY_Ccaron = 0x01c8
    const GDK_KEY_Eogonek = 0x01ca
    const GDK_KEY_Ecaron = 0x01cc
    const GDK_KEY_Dcaron = Float32(0x1c)
    const GDK_KEY_Dstroke = 0x01d0
    const GDK_KEY_Nacute = 0x01d1
    const GDK_KEY_Ncaron = 0x01d2
    const GDK_KEY_Odoubleacute = 0x01d5
    const GDK_KEY_Rcaron = 0x01d8
    const GDK_KEY_Uring = 0x01d9
    const GDK_KEY_Udoubleacute = 0x01db
    const GDK_KEY_Tcedilla = 0x01de
    const GDK_KEY_racute = 0x01e0
    const GDK_KEY_abreve = 0x01e3
    const GDK_KEY_lacute = 0x01e5
    const GDK_KEY_cacute = 0x01e6
    const GDK_KEY_ccaron = 0x01e8
    const GDK_KEY_eogonek = 0x01ea
    const GDK_KEY_ecaron = 0x01ec
    const GDK_KEY_dcaron = Float32(0x1e)
    const GDK_KEY_dstroke = 0x01f0
    const GDK_KEY_nacute = 0x01f1
    const GDK_KEY_ncaron = 0x01f2
    const GDK_KEY_odoubleacute = 0x01f5
    const GDK_KEY_rcaron = 0x01f8
    const GDK_KEY_uring = 0x01f9
    const GDK_KEY_udoubleacute = 0x01fb
    const GDK_KEY_tcedilla = 0x01fe
    const GDK_KEY_abovedot = Float32(0x1f)
    const GDK_KEY_Hstroke = 0x02a1
    const GDK_KEY_Hcircumflex = 0x02a6
    const GDK_KEY_Iabovedot = 0x02a9
    const GDK_KEY_Gbreve = 0x02ab
    const GDK_KEY_Jcircumflex = 0x02ac
    const GDK_KEY_hstroke = 0x02b1
    const GDK_KEY_hcircumflex = 0x02b6
    const GDK_KEY_idotless = 0x02b9
    const GDK_KEY_gbreve = 0x02bb
    const GDK_KEY_jcircumflex = 0x02bc
    const GDK_KEY_Cabovedot = 0x02c5
    const GDK_KEY_Ccircumflex = 0x02c6
    const GDK_KEY_Gabovedot = 0x02d5
    const GDK_KEY_Gcircumflex = 0x02d8
    const GDK_KEY_Ubreve = 0x02dd
    const GDK_KEY_Scircumflex = 0x02de
    const GDK_KEY_cabovedot = 0x02e5
    const GDK_KEY_ccircumflex = 0x02e6
    const GDK_KEY_gabovedot = 0x02f5
    const GDK_KEY_gcircumflex = 0x02f8
    const GDK_KEY_ubreve = 0x02fd
    const GDK_KEY_scircumflex = 0x02fe
    const GDK_KEY_kra = 0x03a2
    const GDK_KEY_kappa = 0x03a2
    const GDK_KEY_Rcedilla = 0x03a3
    const GDK_KEY_Itilde = 0x03a5
    const GDK_KEY_Lcedilla = 0x03a6
    const GDK_KEY_Emacron = 0x03aa
    const GDK_KEY_Gcedilla = 0x03ab
    const GDK_KEY_Tslash = 0x03ac
    const GDK_KEY_rcedilla = 0x03b3
    const GDK_KEY_itilde = 0x03b5
    const GDK_KEY_lcedilla = 0x03b6
    const GDK_KEY_emacron = 0x03ba
    const GDK_KEY_gcedilla = 0x03bb
    const GDK_KEY_tslash = 0x03bc
    const GDK_KEY_ENG = 0x03bd
    const GDK_KEY_eng = Float32(0x3b)
    const GDK_KEY_Amacron = 0x03c0
    const GDK_KEY_Iogonek = 0x03c7
    const GDK_KEY_Eabovedot = 0x03cc
    const GDK_KEY_Imacron = Float32(0x3c)
    const GDK_KEY_Ncedilla = 0x03d1
    const GDK_KEY_Omacron = 0x03d2
    const GDK_KEY_Kcedilla = 0x03d3
    const GDK_KEY_Uogonek = 0x03d9
    const GDK_KEY_Utilde = 0x03dd
    const GDK_KEY_Umacron = 0x03de
    const GDK_KEY_amacron = 0x03e0
    const GDK_KEY_iogonek = 0x03e7
    const GDK_KEY_eabovedot = 0x03ec
    const GDK_KEY_imacron = Float32(0x3e)
    const GDK_KEY_ncedilla = 0x03f1
    const GDK_KEY_omacron = 0x03f2
    const GDK_KEY_kcedilla = 0x03f3
    const GDK_KEY_uogonek = 0x03f9
    const GDK_KEY_utilde = 0x03fd
    const GDK_KEY_umacron = 0x03fe
    const GDK_KEY_Wcircumflex = 0x01000174
    const GDK_KEY_wcircumflex = 0x01000175
    const GDK_KEY_Ycircumflex = 0x01000176
    const GDK_KEY_ycircumflex = 0x01000177
    const GDK_KEY_Babovedot = 0x01001e02
    const GDK_KEY_babovedot = 0x01001e03
    const GDK_KEY_Dabovedot = 0x01001e0a
    const GDK_KEY_dabovedot = 0x01001e0b
    const GDK_KEY_Fabovedot = 0x01001e1e
    const GDK_KEY_fabovedot = Float32(0x001001e1)
    const GDK_KEY_Mabovedot = 0x01001e40
    const GDK_KEY_mabovedot = 0x01001e41
    const GDK_KEY_Pabovedot = 0x01001e56
    const GDK_KEY_pabovedot = 0x01001e57
    const GDK_KEY_Sabovedot = 0x01001e60
    const GDK_KEY_sabovedot = 0x01001e61
    const GDK_KEY_Tabovedot = 0x01001e6a
    const GDK_KEY_tabovedot = 0x01001e6b
    const GDK_KEY_Wgrave = 0x01001e80
    const GDK_KEY_wgrave = 0x01001e81
    const GDK_KEY_Wacute = 0x01001e82
    const GDK_KEY_wacute = 0x01001e83
    const GDK_KEY_Wdiaeresis = 0x01001e84
    const GDK_KEY_wdiaeresis = 0x01001e85
    const GDK_KEY_Ygrave = 0x01001ef2
    const GDK_KEY_ygrave = 0x01001ef3
    const GDK_KEY_OE = 0x13bc
    const GDK_KEY_oe = 0x13bd
    const GDK_KEY_Ydiaeresis = 0x13be
    const GDK_KEY_overline = 0x047e
    const GDK_KEY_kana_fullstop = 0x04a1
    const GDK_KEY_kana_openingbracket = 0x04a2
    const GDK_KEY_kana_closingbracket = 0x04a3
    const GDK_KEY_kana_comma = 0x04a4
    const GDK_KEY_kana_conjunctive = 0x04a5
    const GDK_KEY_kana_middledot = 0x04a5
    const GDK_KEY_kana_WO = 0x04a6
    const GDK_KEY_kana_a = 0x04a7
    const GDK_KEY_kana_i = 0x04a8
    const GDK_KEY_kana_u = 0x04a9
    const GDK_KEY_kana_e = 0x04aa
    const GDK_KEY_kana_o = 0x04ab
    const GDK_KEY_kana_ya = 0x04ac
    const GDK_KEY_kana_yu = 0x04ad
    const GDK_KEY_kana_yo = 0x04ae
    const GDK_KEY_kana_tsu = Float32(0x4a)
    const GDK_KEY_kana_tu = Float32(0x4a)
    const GDK_KEY_prolongedsound = 0x04b0
    const GDK_KEY_kana_A = 0x04b1
    const GDK_KEY_kana_I = 0x04b2
    const GDK_KEY_kana_U = 0x04b3
    const GDK_KEY_kana_E = 0x04b4
    const GDK_KEY_kana_O = 0x04b5
    const GDK_KEY_kana_KA = 0x04b6
    const GDK_KEY_kana_KI = 0x04b7
    const GDK_KEY_kana_KU = 0x04b8
    const GDK_KEY_kana_KE = 0x04b9
    const GDK_KEY_kana_KO = 0x04ba
    const GDK_KEY_kana_SA = 0x04bb
    const GDK_KEY_kana_SHI = 0x04bc
    const GDK_KEY_kana_SU = 0x04bd
    const GDK_KEY_kana_SE = 0x04be
    const GDK_KEY_kana_SO = Float32(0x4b)
    const GDK_KEY_kana_TA = 0x04c0
    const GDK_KEY_kana_CHI = 0x04c1
    const GDK_KEY_kana_TI = 0x04c1
    const GDK_KEY_kana_TSU = 0x04c2
    const GDK_KEY_kana_TU = 0x04c2
    const GDK_KEY_kana_TE = 0x04c3
    const GDK_KEY_kana_TO = 0x04c4
    const GDK_KEY_kana_NA = 0x04c5
    const GDK_KEY_kana_NI = 0x04c6
    const GDK_KEY_kana_NU = 0x04c7
    const GDK_KEY_kana_NE = 0x04c8
    const GDK_KEY_kana_NO = 0x04c9
    const GDK_KEY_kana_HA = 0x04ca
    const GDK_KEY_kana_HI = 0x04cb
    const GDK_KEY_kana_FU = 0x04cc
    const GDK_KEY_kana_HU = 0x04cc
    const GDK_KEY_kana_HE = 0x04cd
    const GDK_KEY_kana_HO = 0x04ce
    const GDK_KEY_kana_MA = Float32(0x4c)
    const GDK_KEY_kana_MI = 0x04d0
    const GDK_KEY_kana_MU = 0x04d1
    const GDK_KEY_kana_ME = 0x04d2
    const GDK_KEY_kana_MO = 0x04d3
    const GDK_KEY_kana_YA = 0x04d4
    const GDK_KEY_kana_YU = 0x04d5
    const GDK_KEY_kana_YO = 0x04d6
    const GDK_KEY_kana_RA = 0x04d7
    const GDK_KEY_kana_RI = 0x04d8
    const GDK_KEY_kana_RU = 0x04d9
    const GDK_KEY_kana_RE = 0x04da
    const GDK_KEY_kana_RO = 0x04db
    const GDK_KEY_kana_WA = 0x04dc
    const GDK_KEY_kana_N = 0x04dd
    const GDK_KEY_voicedsound = 0x04de
    const GDK_KEY_semivoicedsound = Float32(0x4d)
    const GDK_KEY_kana_switch = 0xff7e
    const GDK_KEY_Arabic_percent = 0x0100066a
    const GDK_KEY_Arabic_superscript_alef = 0x01000670
    const GDK_KEY_Arabic_tteh = 0x01000679
    const GDK_KEY_Arabic_peh = 0x0100067e
    const GDK_KEY_Arabic_tcheh = 0x01000686
    const GDK_KEY_Arabic_ddal = 0x01000688
    const GDK_KEY_Arabic_rreh = 0x01000691
    const GDK_KEY_Arabic_comma = 0x05ac
    const GDK_KEY_Arabic_fullstop = 0x010006d4
    const GDK_KEY_Arabic_semicolon = 0x05bb
    const GDK_KEY_Arabic_question_mark = Float32(0x5b)
    const GDK_KEY_Arabic_hamza = 0x05c1
    const GDK_KEY_Arabic_maddaonalef = 0x05c2
    const GDK_KEY_Arabic_hamzaonalef = 0x05c3
    const GDK_KEY_Arabic_hamzaonwaw = 0x05c4
    const GDK_KEY_Arabic_hamzaunderalef = 0x05c5
    const GDK_KEY_Arabic_hamzaonyeh = 0x05c6
    const GDK_KEY_Arabic_alef = 0x05c7
    const GDK_KEY_Arabic_beh = 0x05c8
    const GDK_KEY_Arabic_tehmarbuta = 0x05c9
    const GDK_KEY_Arabic_teh = 0x05ca
    const GDK_KEY_Arabic_theh = 0x05cb
    const GDK_KEY_Arabic_jeem = 0x05cc
    const GDK_KEY_Arabic_hah = 0x05cd
    const GDK_KEY_Arabic_khah = 0x05ce
    const GDK_KEY_Arabic_dal = Float32(0x5c)
    const GDK_KEY_Arabic_thal = 0x05d0
    const GDK_KEY_Arabic_ra = 0x05d1
    const GDK_KEY_Arabic_zain = 0x05d2
    const GDK_KEY_Arabic_seen = 0x05d3
    const GDK_KEY_Arabic_sheen = 0x05d4
    const GDK_KEY_Arabic_sad = 0x05d5
    const GDK_KEY_Arabic_dad = 0x05d6
    const GDK_KEY_Arabic_tah = 0x05d7
    const GDK_KEY_Arabic_zah = 0x05d8
    const GDK_KEY_Arabic_ain = 0x05d9
    const GDK_KEY_Arabic_ghain = 0x05da
    const GDK_KEY_Arabic_tatweel = 0x05e0
    const GDK_KEY_Arabic_feh = 0x05e1
    const GDK_KEY_Arabic_qaf = 0x05e2
    const GDK_KEY_Arabic_kaf = 0x05e3
    const GDK_KEY_Arabic_lam = 0x05e4
    const GDK_KEY_Arabic_meem = 0x05e5
    const GDK_KEY_Arabic_noon = 0x05e6
    const GDK_KEY_Arabic_ha = 0x05e7
    const GDK_KEY_Arabic_heh = 0x05e7
    const GDK_KEY_Arabic_waw = 0x05e8
    const GDK_KEY_Arabic_alefmaksura = 0x05e9
    const GDK_KEY_Arabic_yeh = 0x05ea
    const GDK_KEY_Arabic_fathatan = 0x05eb
    const GDK_KEY_Arabic_dammatan = 0x05ec
    const GDK_KEY_Arabic_kasratan = 0x05ed
    const GDK_KEY_Arabic_fatha = 0x05ee
    const GDK_KEY_Arabic_damma = Float32(0x5e)
    const GDK_KEY_Arabic_kasra = 0x05f0
    const GDK_KEY_Arabic_shadda = 0x05f1
    const GDK_KEY_Arabic_sukun = 0x05f2
    const GDK_KEY_Arabic_madda_above = 0x01000653
    const GDK_KEY_Arabic_hamza_above = 0x01000654
    const GDK_KEY_Arabic_hamza_below = 0x01000655
    const GDK_KEY_Arabic_jeh = 0x01000698
    const GDK_KEY_Arabic_veh = 0x010006a4
    const GDK_KEY_Arabic_keheh = 0x010006a9
    const GDK_KEY_Arabic_gaf = Float32(0x0010006a)
    const GDK_KEY_Arabic_noon_ghunna = 0x010006ba
    const GDK_KEY_Arabic_heh_doachashmee = 0x010006be
    const GDK_KEY_Farsi_yeh = 0x010006cc
    const GDK_KEY_Arabic_farsi_yeh = 0x010006cc
    const GDK_KEY_Arabic_yeh_baree = 0x010006d2
    const GDK_KEY_Arabic_heh_goal = 0x010006c1
    const GDK_KEY_Arabic_switch = 0xff7e
    const GDK_KEY_Cyrillic_GHE_bar = 0x01000492
    const GDK_KEY_Cyrillic_ghe_bar = 0x01000493
    const GDK_KEY_Cyrillic_ZHE_descender = 0x01000496
    const GDK_KEY_Cyrillic_zhe_descender = 0x01000497
    const GDK_KEY_Cyrillic_KA_descender = 0x0100049a
    const GDK_KEY_Cyrillic_ka_descender = 0x0100049b
    const GDK_KEY_Cyrillic_KA_vertstroke = 0x0100049c
    const GDK_KEY_Cyrillic_ka_vertstroke = 0x0100049d
    const GDK_KEY_Cyrillic_EN_descender = 0x010004a2
    const GDK_KEY_Cyrillic_en_descender = 0x010004a3
    const GDK_KEY_Cyrillic_U_straight = 0x010004ae
    const GDK_KEY_Cyrillic_u_straight = Float32(0x0010004a)
    const GDK_KEY_Cyrillic_U_straight_bar = 0x010004b0
    const GDK_KEY_Cyrillic_u_straight_bar = 0x010004b1
    const GDK_KEY_Cyrillic_HA_descender = 0x010004b2
    const GDK_KEY_Cyrillic_ha_descender = 0x010004b3
    const GDK_KEY_Cyrillic_CHE_descender = 0x010004b6
    const GDK_KEY_Cyrillic_che_descender = 0x010004b7
    const GDK_KEY_Cyrillic_CHE_vertstroke = 0x010004b8
    const GDK_KEY_Cyrillic_che_vertstroke = 0x010004b9
    const GDK_KEY_Cyrillic_SHHA = 0x010004ba
    const GDK_KEY_Cyrillic_shha = 0x010004bb
    const GDK_KEY_Cyrillic_SCHWA = 0x010004d8
    const GDK_KEY_Cyrillic_schwa = 0x010004d9
    const GDK_KEY_Cyrillic_I_macron = 0x010004e2
    const GDK_KEY_Cyrillic_i_macron = 0x010004e3
    const GDK_KEY_Cyrillic_O_bar = 0x010004e8
    const GDK_KEY_Cyrillic_o_bar = 0x010004e9
    const GDK_KEY_Cyrillic_U_macron = 0x010004ee
    const GDK_KEY_Cyrillic_u_macron = Float32(0x0010004e)
    const GDK_KEY_Serbian_dje = 0x06a1
    const GDK_KEY_Macedonia_gje = 0x06a2
    const GDK_KEY_Cyrillic_io = 0x06a3
    const GDK_KEY_Ukrainian_ie = 0x06a4
    const GDK_KEY_Ukranian_je = 0x06a4
    const GDK_KEY_Macedonia_dse = 0x06a5
    const GDK_KEY_Ukrainian_i = 0x06a6
    const GDK_KEY_Ukranian_i = 0x06a6
    const GDK_KEY_Ukrainian_yi = 0x06a7
    const GDK_KEY_Ukranian_yi = 0x06a7
    const GDK_KEY_Cyrillic_je = 0x06a8
    const GDK_KEY_Serbian_je = 0x06a8
    const GDK_KEY_Cyrillic_lje = 0x06a9
    const GDK_KEY_Serbian_lje = 0x06a9
    const GDK_KEY_Cyrillic_nje = 0x06aa
    const GDK_KEY_Serbian_nje = 0x06aa
    const GDK_KEY_Serbian_tshe = 0x06ab
    const GDK_KEY_Macedonia_kje = 0x06ac
    const GDK_KEY_Ukrainian_ghe_with_upturn = 0x06ad
    const GDK_KEY_Byelorussian_shortu = 0x06ae
    const GDK_KEY_Cyrillic_dzhe = Float32(0x6a)
    const GDK_KEY_Serbian_dze = Float32(0x6a)
    const GDK_KEY_numerosign = 0x06b0
    const GDK_KEY_Serbian_DJE = 0x06b1
    const GDK_KEY_Macedonia_GJE = 0x06b2
    const GDK_KEY_Cyrillic_IO = 0x06b3
    const GDK_KEY_Ukrainian_IE = 0x06b4
    const GDK_KEY_Ukranian_JE = 0x06b4
    const GDK_KEY_Macedonia_DSE = 0x06b5
    const GDK_KEY_Ukrainian_I = 0x06b6
    const GDK_KEY_Ukranian_I = 0x06b6
    const GDK_KEY_Ukrainian_YI = 0x06b7
    const GDK_KEY_Ukranian_YI = 0x06b7
    const GDK_KEY_Cyrillic_JE = 0x06b8
    const GDK_KEY_Serbian_JE = 0x06b8
    const GDK_KEY_Cyrillic_LJE = 0x06b9
    const GDK_KEY_Serbian_LJE = 0x06b9
    const GDK_KEY_Cyrillic_NJE = 0x06ba
    const GDK_KEY_Serbian_NJE = 0x06ba
    const GDK_KEY_Serbian_TSHE = 0x06bb
    const GDK_KEY_Macedonia_KJE = 0x06bc
    const GDK_KEY_Ukrainian_GHE_WITH_UPTURN = 0x06bd
    const GDK_KEY_Byelorussian_SHORTU = 0x06be
    const GDK_KEY_Cyrillic_DZHE = Float32(0x6b)
    const GDK_KEY_Serbian_DZE = Float32(0x6b)
    const GDK_KEY_Cyrillic_yu = 0x06c0
    const GDK_KEY_Cyrillic_a = 0x06c1
    const GDK_KEY_Cyrillic_be = 0x06c2
    const GDK_KEY_Cyrillic_tse = 0x06c3
    const GDK_KEY_Cyrillic_de = 0x06c4
    const GDK_KEY_Cyrillic_ie = 0x06c5
    const GDK_KEY_Cyrillic_ef = 0x06c6
    const GDK_KEY_Cyrillic_ghe = 0x06c7
    const GDK_KEY_Cyrillic_ha = 0x06c8
    const GDK_KEY_Cyrillic_i = 0x06c9
    const GDK_KEY_Cyrillic_shorti = 0x06ca
    const GDK_KEY_Cyrillic_ka = 0x06cb
    const GDK_KEY_Cyrillic_el = 0x06cc
    const GDK_KEY_Cyrillic_em = 0x06cd
    const GDK_KEY_Cyrillic_en = 0x06ce
    const GDK_KEY_Cyrillic_o = Float32(0x6c)
    const GDK_KEY_Cyrillic_pe = 0x06d0
    const GDK_KEY_Cyrillic_ya = 0x06d1
    const GDK_KEY_Cyrillic_er = 0x06d2
    const GDK_KEY_Cyrillic_es = 0x06d3
    const GDK_KEY_Cyrillic_te = 0x06d4
    const GDK_KEY_Cyrillic_u = 0x06d5
    const GDK_KEY_Cyrillic_zhe = 0x06d6
    const GDK_KEY_Cyrillic_ve = 0x06d7
    const GDK_KEY_Cyrillic_softsign = 0x06d8
    const GDK_KEY_Cyrillic_yeru = 0x06d9
    const GDK_KEY_Cyrillic_ze = 0x06da
    const GDK_KEY_Cyrillic_sha = 0x06db
    const GDK_KEY_Cyrillic_e = 0x06dc
    const GDK_KEY_Cyrillic_shcha = 0x06dd
    const GDK_KEY_Cyrillic_che = 0x06de
    const GDK_KEY_Cyrillic_hardsign = Float32(0x6d)
    const GDK_KEY_Cyrillic_YU = 0x06e0
    const GDK_KEY_Cyrillic_A = 0x06e1
    const GDK_KEY_Cyrillic_BE = 0x06e2
    const GDK_KEY_Cyrillic_TSE = 0x06e3
    const GDK_KEY_Cyrillic_DE = 0x06e4
    const GDK_KEY_Cyrillic_IE = 0x06e5
    const GDK_KEY_Cyrillic_EF = 0x06e6
    const GDK_KEY_Cyrillic_GHE = 0x06e7
    const GDK_KEY_Cyrillic_HA = 0x06e8
    const GDK_KEY_Cyrillic_I = 0x06e9
    const GDK_KEY_Cyrillic_SHORTI = 0x06ea
    const GDK_KEY_Cyrillic_KA = 0x06eb
    const GDK_KEY_Cyrillic_EL = 0x06ec
    const GDK_KEY_Cyrillic_EM = 0x06ed
    const GDK_KEY_Cyrillic_EN = 0x06ee
    const GDK_KEY_Cyrillic_O = Float32(0x6e)
    const GDK_KEY_Cyrillic_PE = 0x06f0
    const GDK_KEY_Cyrillic_YA = 0x06f1
    const GDK_KEY_Cyrillic_ER = 0x06f2
    const GDK_KEY_Cyrillic_ES = 0x06f3
    const GDK_KEY_Cyrillic_TE = 0x06f4
    const GDK_KEY_Cyrillic_U = 0x06f5
    const GDK_KEY_Cyrillic_ZHE = 0x06f6
    const GDK_KEY_Cyrillic_VE = 0x06f7
    const GDK_KEY_Cyrillic_SOFTSIGN = 0x06f8
    const GDK_KEY_Cyrillic_YERU = 0x06f9
    const GDK_KEY_Cyrillic_ZE = 0x06fa
    const GDK_KEY_Cyrillic_SHA = 0x06fb
    const GDK_KEY_Cyrillic_E = 0x06fc
    const GDK_KEY_Cyrillic_SHCHA = 0x06fd
    const GDK_KEY_Cyrillic_CHE = 0x06fe
    const GDK_KEY_Cyrillic_HARDSIGN = Float32(0x6f)
    const GDK_KEY_Greek_ALPHAaccent = 0x07a1
    const GDK_KEY_Greek_EPSILONaccent = 0x07a2
    const GDK_KEY_Greek_ETAaccent = 0x07a3
    const GDK_KEY_Greek_IOTAaccent = 0x07a4
    const GDK_KEY_Greek_IOTAdieresis = 0x07a5
    const GDK_KEY_Greek_IOTAdiaeresis = 0x07a5
    const GDK_KEY_Greek_OMICRONaccent = 0x07a7
    const GDK_KEY_Greek_UPSILONaccent = 0x07a8
    const GDK_KEY_Greek_UPSILONdieresis = 0x07a9
    const GDK_KEY_Greek_OMEGAaccent = 0x07ab
    const GDK_KEY_Greek_accentdieresis = 0x07ae
    const GDK_KEY_Greek_horizbar = Float32(0x7a)
    const GDK_KEY_Greek_alphaaccent = 0x07b1
    const GDK_KEY_Greek_epsilonaccent = 0x07b2
    const GDK_KEY_Greek_etaaccent = 0x07b3
    const GDK_KEY_Greek_iotaaccent = 0x07b4
    const GDK_KEY_Greek_iotadieresis = 0x07b5
    const GDK_KEY_Greek_iotaaccentdieresis = 0x07b6
    const GDK_KEY_Greek_omicronaccent = 0x07b7
    const GDK_KEY_Greek_upsilonaccent = 0x07b8
    const GDK_KEY_Greek_upsilondieresis = 0x07b9
    const GDK_KEY_Greek_upsilonaccentdieresis = 0x07ba
    const GDK_KEY_Greek_omegaaccent = 0x07bb
    const GDK_KEY_Greek_ALPHA = 0x07c1
    const GDK_KEY_Greek_BETA = 0x07c2
    const GDK_KEY_Greek_GAMMA = 0x07c3
    const GDK_KEY_Greek_DELTA = 0x07c4
    const GDK_KEY_Greek_EPSILON = 0x07c5
    const GDK_KEY_Greek_ZETA = 0x07c6
    const GDK_KEY_Greek_ETA = 0x07c7
    const GDK_KEY_Greek_THETA = 0x07c8
    const GDK_KEY_Greek_IOTA = 0x07c9
    const GDK_KEY_Greek_KAPPA = 0x07ca
    const GDK_KEY_Greek_LAMDA = 0x07cb
    const GDK_KEY_Greek_LAMBDA = 0x07cb
    const GDK_KEY_Greek_MU = 0x07cc
    const GDK_KEY_Greek_NU = 0x07cd
    const GDK_KEY_Greek_XI = 0x07ce
    const GDK_KEY_Greek_OMICRON = Float32(0x7c)
    const GDK_KEY_Greek_PI = 0x07d0
    const GDK_KEY_Greek_RHO = 0x07d1
    const GDK_KEY_Greek_SIGMA = 0x07d2
    const GDK_KEY_Greek_TAU = 0x07d4
    const GDK_KEY_Greek_UPSILON = 0x07d5
    const GDK_KEY_Greek_PHI = 0x07d6
    const GDK_KEY_Greek_CHI = 0x07d7
    const GDK_KEY_Greek_PSI = 0x07d8
    const GDK_KEY_Greek_OMEGA = 0x07d9
    const GDK_KEY_Greek_alpha = 0x07e1
    const GDK_KEY_Greek_beta = 0x07e2
    const GDK_KEY_Greek_gamma = 0x07e3
    const GDK_KEY_Greek_delta = 0x07e4
    const GDK_KEY_Greek_epsilon = 0x07e5
    const GDK_KEY_Greek_zeta = 0x07e6
    const GDK_KEY_Greek_eta = 0x07e7
    const GDK_KEY_Greek_theta = 0x07e8
    const GDK_KEY_Greek_iota = 0x07e9
    const GDK_KEY_Greek_kappa = 0x07ea
    const GDK_KEY_Greek_lamda = 0x07eb
    const GDK_KEY_Greek_lambda = 0x07eb
    const GDK_KEY_Greek_mu = 0x07ec
    const GDK_KEY_Greek_nu = 0x07ed
    const GDK_KEY_Greek_xi = 0x07ee
    const GDK_KEY_Greek_omicron = Float32(0x7e)
    const GDK_KEY_Greek_pi = 0x07f0
    const GDK_KEY_Greek_rho = 0x07f1
    const GDK_KEY_Greek_sigma = 0x07f2
    const GDK_KEY_Greek_finalsmallsigma = 0x07f3
    const GDK_KEY_Greek_tau = 0x07f4
    const GDK_KEY_Greek_upsilon = 0x07f5
    const GDK_KEY_Greek_phi = 0x07f6
    const GDK_KEY_Greek_chi = 0x07f7
    const GDK_KEY_Greek_psi = 0x07f8
    const GDK_KEY_Greek_omega = 0x07f9
    const GDK_KEY_Greek_switch = 0xff7e
    const GDK_KEY_leftradical = 0x08a1
    const GDK_KEY_topleftradical = 0x08a2
    const GDK_KEY_horizconnector = 0x08a3
    const GDK_KEY_topintegral = 0x08a4
    const GDK_KEY_botintegral = 0x08a5
    const GDK_KEY_vertconnector = 0x08a6
    const GDK_KEY_topleftsqbracket = 0x08a7
    const GDK_KEY_botleftsqbracket = 0x08a8
    const GDK_KEY_toprightsqbracket = 0x08a9
    const GDK_KEY_botrightsqbracket = 0x08aa
    const GDK_KEY_topleftparens = 0x08ab
    const GDK_KEY_botleftparens = 0x08ac
    const GDK_KEY_toprightparens = 0x08ad
    const GDK_KEY_botrightparens = 0x08ae
    const GDK_KEY_leftmiddlecurlybrace = Float32(0x8a)
    const GDK_KEY_rightmiddlecurlybrace = 0x08b0
    const GDK_KEY_topleftsummation = 0x08b1
    const GDK_KEY_botleftsummation = 0x08b2
    const GDK_KEY_topvertsummationconnector = 0x08b3
    const GDK_KEY_botvertsummationconnector = 0x08b4
    const GDK_KEY_toprightsummation = 0x08b5
    const GDK_KEY_botrightsummation = 0x08b6
    const GDK_KEY_rightmiddlesummation = 0x08b7
    const GDK_KEY_lessthanequal = 0x08bc
    const GDK_KEY_notequal = 0x08bd
    const GDK_KEY_greaterthanequal = 0x08be
    const GDK_KEY_integral = Float32(0x8b)
    const GDK_KEY_therefore = 0x08c0
    const GDK_KEY_variation = 0x08c1
    const GDK_KEY_infinity = 0x08c2
    const GDK_KEY_nabla = 0x08c5
    const GDK_KEY_approximate = 0x08c8
    const GDK_KEY_similarequal = 0x08c9
    const GDK_KEY_ifonlyif = 0x08cd
    const GDK_KEY_implies = 0x08ce
    const GDK_KEY_identical = Float32(0x8c)
    const GDK_KEY_radical = 0x08d6
    const GDK_KEY_includedin = 0x08da
    const GDK_KEY_includes = 0x08db
    const GDK_KEY_intersection = 0x08dc
    const GDK_KEY_union = 0x08dd
    const GDK_KEY_logicaland = 0x08de
    const GDK_KEY_logicalor = Float32(0x8d)
    const GDK_KEY_partialderivative = Float32(0x8e)
    const GDK_KEY_function = 0x08f6
    const GDK_KEY_leftarrow = 0x08fb
    const GDK_KEY_uparrow = 0x08fc
    const GDK_KEY_rightarrow = 0x08fd
    const GDK_KEY_downarrow = 0x08fe
    const GDK_KEY_blank = Float32(0x9d)
    const GDK_KEY_soliddiamond = 0x09e0
    const GDK_KEY_checkerboard = 0x09e1
    const GDK_KEY_ht = 0x09e2
    const GDK_KEY_ff = 0x09e3
    const GDK_KEY_cr = 0x09e4
    const GDK_KEY_lf = 0x09e5
    const GDK_KEY_nl = 0x09e8
    const GDK_KEY_vt = 0x09e9
    const GDK_KEY_lowrightcorner = 0x09ea
    const GDK_KEY_uprightcorner = 0x09eb
    const GDK_KEY_upleftcorner = 0x09ec
    const GDK_KEY_lowleftcorner = 0x09ed
    const GDK_KEY_crossinglines = 0x09ee
    const GDK_KEY_leftt = 0x09f4
    const GDK_KEY_rightt = 0x09f5
    const GDK_KEY_bott = 0x09f6
    const GDK_KEY_topt = 0x09f7
    const GDK_KEY_vertbar = 0x09f8
    const GDK_KEY_emspace = 0x0aa1
    const GDK_KEY_enspace = 0x0aa2
    const GDK_KEY_em3space = 0x0aa3
    const GDK_KEY_em4space = 0x0aa4
    const GDK_KEY_digitspace = 0x0aa5
    const GDK_KEY_punctspace = 0x0aa6
    const GDK_KEY_thinspace = 0x0aa7
    const GDK_KEY_hairspace = 0x0aa8
    const GDK_KEY_emdash = 0x0aa9
    const GDK_KEY_endash = 0x0aaa
    const GDK_KEY_signifblank = 0x0aac
    const GDK_KEY_ellipsis = 0x0aae
    const GDK_KEY_doubbaselinedot = Float32(0xaa)
    const GDK_KEY_onethird = 0x0ab0
    const GDK_KEY_twothirds = 0x0ab1
    const GDK_KEY_onefifth = 0x0ab2
    const GDK_KEY_twofifths = 0x0ab3
    const GDK_KEY_threefifths = 0x0ab4
    const GDK_KEY_fourfifths = 0x0ab5
    const GDK_KEY_onesixth = 0x0ab6
    const GDK_KEY_fivesixths = 0x0ab7
    const GDK_KEY_careof = 0x0ab8
    const GDK_KEY_figdash = 0x0abb
    const GDK_KEY_leftanglebracket = 0x0abc
    const GDK_KEY_decimalpoint = 0x0abd
    const GDK_KEY_rightanglebracket = 0x0abe
    const GDK_KEY_marker = Float32(0xab)
    const GDK_KEY_oneeighth = 0x0ac3
    const GDK_KEY_threeeighths = 0x0ac4
    const GDK_KEY_fiveeighths = 0x0ac5
    const GDK_KEY_seveneighths = 0x0ac6
    const GDK_KEY_trademark = 0x0ac9
    const GDK_KEY_signaturemark = 0x0aca
    const GDK_KEY_trademarkincircle = 0x0acb
    const GDK_KEY_leftopentriangle = 0x0acc
    const GDK_KEY_rightopentriangle = 0x0acd
    const GDK_KEY_emopencircle = 0x0ace
    const GDK_KEY_emopenrectangle = Float32(0xac)
    const GDK_KEY_leftsinglequotemark = 0x0ad0
    const GDK_KEY_rightsinglequotemark = 0x0ad1
    const GDK_KEY_leftdoublequotemark = 0x0ad2
    const GDK_KEY_rightdoublequotemark = 0x0ad3
    const GDK_KEY_prescription = 0x0ad4
    const GDK_KEY_permille = 0x0ad5
    const GDK_KEY_minutes = 0x0ad6
    const GDK_KEY_seconds = 0x0ad7
    const GDK_KEY_latincross = 0x0ad9
    const GDK_KEY_hexagram = 0x0ada
    const GDK_KEY_filledrectbullet = 0x0adb
    const GDK_KEY_filledlefttribullet = 0x0adc
    const GDK_KEY_filledrighttribullet = 0x0add
    const GDK_KEY_emfilledcircle = 0x0ade
    const GDK_KEY_emfilledrect = Float32(0xad)
    const GDK_KEY_enopencircbullet = 0x0ae0
    const GDK_KEY_enopensquarebullet = 0x0ae1
    const GDK_KEY_openrectbullet = 0x0ae2
    const GDK_KEY_opentribulletup = 0x0ae3
    const GDK_KEY_opentribulletdown = 0x0ae4
    const GDK_KEY_openstar = 0x0ae5
    const GDK_KEY_enfilledcircbullet = 0x0ae6
    const GDK_KEY_enfilledsqbullet = 0x0ae7
    const GDK_KEY_filledtribulletup = 0x0ae8
    const GDK_KEY_filledtribulletdown = 0x0ae9
    const GDK_KEY_leftpointer = 0x0aea
    const GDK_KEY_rightpointer = 0x0aeb
    const GDK_KEY_club = 0x0aec
    const GDK_KEY_diamond = 0x0aed
    const GDK_KEY_heart = 0x0aee
    const GDK_KEY_maltesecross = 0x0af0
    const GDK_KEY_dagger = 0x0af1
    const GDK_KEY_doubledagger = 0x0af2
    const GDK_KEY_checkmark = 0x0af3
    const GDK_KEY_ballotcross = 0x0af4
    const GDK_KEY_musicalsharp = 0x0af5
    const GDK_KEY_musicalflat = 0x0af6
    const GDK_KEY_malesymbol = 0x0af7
    const GDK_KEY_femalesymbol = 0x0af8
    const GDK_KEY_telephone = 0x0af9
    const GDK_KEY_telephonerecorder = 0x0afa
    const GDK_KEY_phonographcopyright = 0x0afb
    const GDK_KEY_caret = 0x0afc
    const GDK_KEY_singlelowquotemark = 0x0afd
    const GDK_KEY_doublelowquotemark = 0x0afe
    const GDK_KEY_cursor = Float32(0xaf)
    const GDK_KEY_leftcaret = 0x0ba3
    const GDK_KEY_rightcaret = 0x0ba6
    const GDK_KEY_downcaret = 0x0ba8
    const GDK_KEY_upcaret = 0x0ba9
    const GDK_KEY_overbar = 0x0bc0
    const GDK_KEY_downtack = 0x0bc2
    const GDK_KEY_upshoe = 0x0bc3
    const GDK_KEY_downstile = 0x0bc4
    const GDK_KEY_underbar = 0x0bc6
    const GDK_KEY_jot = 0x0bca
    const GDK_KEY_quad = 0x0bcc
    const GDK_KEY_uptack = 0x0bce
    const GDK_KEY_circle = Float32(0xbc)
    const GDK_KEY_upstile = 0x0bd3
    const GDK_KEY_downshoe = 0x0bd6
    const GDK_KEY_rightshoe = 0x0bd8
    const GDK_KEY_leftshoe = 0x0bda
    const GDK_KEY_lefttack = 0x0bdc
    const GDK_KEY_righttack = 0x0bfc
    const GDK_KEY_hebrew_doublelowline = Float32(0xcd)
    const GDK_KEY_hebrew_aleph = 0x0ce0
    const GDK_KEY_hebrew_bet = 0x0ce1
    const GDK_KEY_hebrew_beth = 0x0ce1
    const GDK_KEY_hebrew_gimel = 0x0ce2
    const GDK_KEY_hebrew_gimmel = 0x0ce2
    const GDK_KEY_hebrew_dalet = 0x0ce3
    const GDK_KEY_hebrew_daleth = 0x0ce3
    const GDK_KEY_hebrew_he = 0x0ce4
    const GDK_KEY_hebrew_waw = 0x0ce5
    const GDK_KEY_hebrew_zain = 0x0ce6
    const GDK_KEY_hebrew_zayin = 0x0ce6
    const GDK_KEY_hebrew_chet = 0x0ce7
    const GDK_KEY_hebrew_het = 0x0ce7
    const GDK_KEY_hebrew_tet = 0x0ce8
    const GDK_KEY_hebrew_teth = 0x0ce8
    const GDK_KEY_hebrew_yod = 0x0ce9
    const GDK_KEY_hebrew_finalkaph = 0x0cea
    const GDK_KEY_hebrew_kaph = 0x0ceb
    const GDK_KEY_hebrew_lamed = 0x0cec
    const GDK_KEY_hebrew_finalmem = 0x0ced
    const GDK_KEY_hebrew_mem = 0x0cee
    const GDK_KEY_hebrew_finalnun = Float32(0xce)
    const GDK_KEY_hebrew_nun = 0x0cf0
    const GDK_KEY_hebrew_samech = 0x0cf1
    const GDK_KEY_hebrew_samekh = 0x0cf1
    const GDK_KEY_hebrew_ayin = 0x0cf2
    const GDK_KEY_hebrew_finalpe = 0x0cf3
    const GDK_KEY_hebrew_pe = 0x0cf4
    const GDK_KEY_hebrew_finalzade = 0x0cf5
    const GDK_KEY_hebrew_finalzadi = 0x0cf5
    const GDK_KEY_hebrew_zade = 0x0cf6
    const GDK_KEY_hebrew_zadi = 0x0cf6
    const GDK_KEY_hebrew_qoph = 0x0cf7
    const GDK_KEY_hebrew_kuf = 0x0cf7
    const GDK_KEY_hebrew_resh = 0x0cf8
    const GDK_KEY_hebrew_shin = 0x0cf9
    const GDK_KEY_hebrew_taw = 0x0cfa
    const GDK_KEY_hebrew_taf = 0x0cfa
    const GDK_KEY_Hebrew_switch = 0xff7e
    const GDK_KEY_Thai_kokai = 0x0da1
    const GDK_KEY_Thai_khokhai = 0x0da2
    const GDK_KEY_Thai_khokhuat = 0x0da3
    const GDK_KEY_Thai_khokhwai = 0x0da4
    const GDK_KEY_Thai_khokhon = 0x0da5
    const GDK_KEY_Thai_khorakhang = 0x0da6
    const GDK_KEY_Thai_ngongu = 0x0da7
    const GDK_KEY_Thai_chochan = 0x0da8
    const GDK_KEY_Thai_choching = 0x0da9
    const GDK_KEY_Thai_chochang = 0x0daa
    const GDK_KEY_Thai_soso = 0x0dab
    const GDK_KEY_Thai_chochoe = 0x0dac
    const GDK_KEY_Thai_yoying = 0x0dad
    const GDK_KEY_Thai_dochada = 0x0dae
    const GDK_KEY_Thai_topatak = Float32(0xda)
    const GDK_KEY_Thai_thothan = 0x0db0
    const GDK_KEY_Thai_thonangmontho = 0x0db1
    const GDK_KEY_Thai_thophuthao = 0x0db2
    const GDK_KEY_Thai_nonen = 0x0db3
    const GDK_KEY_Thai_dodek = 0x0db4
    const GDK_KEY_Thai_totao = 0x0db5
    const GDK_KEY_Thai_thothung = 0x0db6
    const GDK_KEY_Thai_thothahan = 0x0db7
    const GDK_KEY_Thai_thothong = 0x0db8
    const GDK_KEY_Thai_nonu = 0x0db9
    const GDK_KEY_Thai_bobaimai = 0x0dba
    const GDK_KEY_Thai_popla = 0x0dbb
    const GDK_KEY_Thai_phophung = 0x0dbc
    const GDK_KEY_Thai_fofa = 0x0dbd
    const GDK_KEY_Thai_phophan = 0x0dbe
    const GDK_KEY_Thai_fofan = Float32(0xdb)
    const GDK_KEY_Thai_phosamphao = 0x0dc0
    const GDK_KEY_Thai_moma = 0x0dc1
    const GDK_KEY_Thai_yoyak = 0x0dc2
    const GDK_KEY_Thai_rorua = 0x0dc3
    const GDK_KEY_Thai_ru = 0x0dc4
    const GDK_KEY_Thai_loling = 0x0dc5
    const GDK_KEY_Thai_lu = 0x0dc6
    const GDK_KEY_Thai_wowaen = 0x0dc7
    const GDK_KEY_Thai_sosala = 0x0dc8
    const GDK_KEY_Thai_sorusi = 0x0dc9
    const GDK_KEY_Thai_sosua = 0x0dca
    const GDK_KEY_Thai_hohip = 0x0dcb
    const GDK_KEY_Thai_lochula = 0x0dcc
    const GDK_KEY_Thai_oang = 0x0dcd
    const GDK_KEY_Thai_honokhuk = 0x0dce
    const GDK_KEY_Thai_paiyannoi = Float32(0xdc)
    const GDK_KEY_Thai_saraa = 0x0dd0
    const GDK_KEY_Thai_maihanakat = 0x0dd1
    const GDK_KEY_Thai_saraaa = 0x0dd2
    const GDK_KEY_Thai_saraam = 0x0dd3
    const GDK_KEY_Thai_sarai = 0x0dd4
    const GDK_KEY_Thai_saraii = 0x0dd5
    const GDK_KEY_Thai_saraue = 0x0dd6
    const GDK_KEY_Thai_sarauee = 0x0dd7
    const GDK_KEY_Thai_sarau = 0x0dd8
    const GDK_KEY_Thai_sarauu = 0x0dd9
    const GDK_KEY_Thai_phinthu = 0x0dda
    const GDK_KEY_Thai_maihanakat_maitho = 0x0dde
    const GDK_KEY_Thai_baht = Float32(0xdd)
    const GDK_KEY_Thai_sarae = 0x0de0
    const GDK_KEY_Thai_saraae = 0x0de1
    const GDK_KEY_Thai_sarao = 0x0de2
    const GDK_KEY_Thai_saraaimaimuan = 0x0de3
    const GDK_KEY_Thai_saraaimaimalai = 0x0de4
    const GDK_KEY_Thai_lakkhangyao = 0x0de5
    const GDK_KEY_Thai_maiyamok = 0x0de6
    const GDK_KEY_Thai_maitaikhu = 0x0de7
    const GDK_KEY_Thai_maiek = 0x0de8
    const GDK_KEY_Thai_maitho = 0x0de9
    const GDK_KEY_Thai_maitri = 0x0dea
    const GDK_KEY_Thai_maichattawa = 0x0deb
    const GDK_KEY_Thai_thanthakhat = 0x0dec
    const GDK_KEY_Thai_nikhahit = 0x0ded
    const GDK_KEY_Thai_leksun = 0x0df0
    const GDK_KEY_Thai_leknung = 0x0df1
    const GDK_KEY_Thai_leksong = 0x0df2
    const GDK_KEY_Thai_leksam = 0x0df3
    const GDK_KEY_Thai_leksi = 0x0df4
    const GDK_KEY_Thai_lekha = 0x0df5
    const GDK_KEY_Thai_lekhok = 0x0df6
    const GDK_KEY_Thai_lekchet = 0x0df7
    const GDK_KEY_Thai_lekpaet = 0x0df8
    const GDK_KEY_Thai_lekkao = 0x0df9
    const GDK_KEY_Hangul = 0xff31
    const GDK_KEY_Hangul_Start = 0xff32
    const GDK_KEY_Hangul_End = 0xff33
    const GDK_KEY_Hangul_Hanja = 0xff34
    const GDK_KEY_Hangul_Jamo = 0xff35
    const GDK_KEY_Hangul_Romaja = 0xff36
    const GDK_KEY_Hangul_Codeinput = 0xff37
    const GDK_KEY_Hangul_Jeonja = 0xff38
    const GDK_KEY_Hangul_Banja = 0xff39
    const GDK_KEY_Hangul_PreHanja = 0xff3a
    const GDK_KEY_Hangul_PostHanja = 0xff3b
    const GDK_KEY_Hangul_SingleCandidate = 0xff3c
    const GDK_KEY_Hangul_MultipleCandidate = 0xff3d
    const GDK_KEY_Hangul_PreviousCandidate = 0xff3e
    const GDK_KEY_Hangul_Special = Float32(0x0ff3)
    const GDK_KEY_Hangul_switch = 0xff7e
    const GDK_KEY_Hangul_Kiyeog = 0x0ea1
    const GDK_KEY_Hangul_SsangKiyeog = 0x0ea2
    const GDK_KEY_Hangul_KiyeogSios = 0x0ea3
    const GDK_KEY_Hangul_Nieun = 0x0ea4
    const GDK_KEY_Hangul_NieunJieuj = 0x0ea5
    const GDK_KEY_Hangul_NieunHieuh = 0x0ea6
    const GDK_KEY_Hangul_Dikeud = 0x0ea7
    const GDK_KEY_Hangul_SsangDikeud = 0x0ea8
    const GDK_KEY_Hangul_Rieul = 0x0ea9
    const GDK_KEY_Hangul_RieulKiyeog = 0x0eaa
    const GDK_KEY_Hangul_RieulMieum = 0x0eab
    const GDK_KEY_Hangul_RieulPieub = 0x0eac
    const GDK_KEY_Hangul_RieulSios = 0x0ead
    const GDK_KEY_Hangul_RieulTieut = 0x0eae
    const GDK_KEY_Hangul_RieulPhieuf = Float32(0xea)
    const GDK_KEY_Hangul_RieulHieuh = 0x0eb0
    const GDK_KEY_Hangul_Mieum = 0x0eb1
    const GDK_KEY_Hangul_Pieub = 0x0eb2
    const GDK_KEY_Hangul_SsangPieub = 0x0eb3
    const GDK_KEY_Hangul_PieubSios = 0x0eb4
    const GDK_KEY_Hangul_Sios = 0x0eb5
    const GDK_KEY_Hangul_SsangSios = 0x0eb6
    const GDK_KEY_Hangul_Ieung = 0x0eb7
    const GDK_KEY_Hangul_Jieuj = 0x0eb8
    const GDK_KEY_Hangul_SsangJieuj = 0x0eb9
    const GDK_KEY_Hangul_Cieuc = 0x0eba
    const GDK_KEY_Hangul_Khieuq = 0x0ebb
    const GDK_KEY_Hangul_Tieut = 0x0ebc
    const GDK_KEY_Hangul_Phieuf = 0x0ebd
    const GDK_KEY_Hangul_Hieuh = 0x0ebe
    const GDK_KEY_Hangul_A = Float32(0xeb)
    const GDK_KEY_Hangul_AE = 0x0ec0
    const GDK_KEY_Hangul_YA = 0x0ec1
    const GDK_KEY_Hangul_YAE = 0x0ec2
    const GDK_KEY_Hangul_EO = 0x0ec3
    const GDK_KEY_Hangul_E = 0x0ec4
    const GDK_KEY_Hangul_YEO = 0x0ec5
    const GDK_KEY_Hangul_YE = 0x0ec6
    const GDK_KEY_Hangul_O = 0x0ec7
    const GDK_KEY_Hangul_WA = 0x0ec8
    const GDK_KEY_Hangul_WAE = 0x0ec9
    const GDK_KEY_Hangul_OE = 0x0eca
    const GDK_KEY_Hangul_YO = 0x0ecb
    const GDK_KEY_Hangul_U = 0x0ecc
    const GDK_KEY_Hangul_WEO = 0x0ecd
    const GDK_KEY_Hangul_WE = 0x0ece
    const GDK_KEY_Hangul_WI = Float32(0xec)
    const GDK_KEY_Hangul_YU = 0x0ed0
    const GDK_KEY_Hangul_EU = 0x0ed1
    const GDK_KEY_Hangul_YI = 0x0ed2
    const GDK_KEY_Hangul_I = 0x0ed3
    const GDK_KEY_Hangul_J_Kiyeog = 0x0ed4
    const GDK_KEY_Hangul_J_SsangKiyeog = 0x0ed5
    const GDK_KEY_Hangul_J_KiyeogSios = 0x0ed6
    const GDK_KEY_Hangul_J_Nieun = 0x0ed7
    const GDK_KEY_Hangul_J_NieunJieuj = 0x0ed8
    const GDK_KEY_Hangul_J_NieunHieuh = 0x0ed9
    const GDK_KEY_Hangul_J_Dikeud = 0x0eda
    const GDK_KEY_Hangul_J_Rieul = 0x0edb
    const GDK_KEY_Hangul_J_RieulKiyeog = 0x0edc
    const GDK_KEY_Hangul_J_RieulMieum = 0x0edd
    const GDK_KEY_Hangul_J_RieulPieub = 0x0ede
    const GDK_KEY_Hangul_J_RieulSios = Float32(0xed)
    const GDK_KEY_Hangul_J_RieulTieut = 0x0ee0
    const GDK_KEY_Hangul_J_RieulPhieuf = 0x0ee1
    const GDK_KEY_Hangul_J_RieulHieuh = 0x0ee2
    const GDK_KEY_Hangul_J_Mieum = 0x0ee3
    const GDK_KEY_Hangul_J_Pieub = 0x0ee4
    const GDK_KEY_Hangul_J_PieubSios = 0x0ee5
    const GDK_KEY_Hangul_J_Sios = 0x0ee6
    const GDK_KEY_Hangul_J_SsangSios = 0x0ee7
    const GDK_KEY_Hangul_J_Ieung = 0x0ee8
    const GDK_KEY_Hangul_J_Jieuj = 0x0ee9
    const GDK_KEY_Hangul_J_Cieuc = 0x0eea
    const GDK_KEY_Hangul_J_Khieuq = 0x0eeb
    const GDK_KEY_Hangul_J_Tieut = 0x0eec
    const GDK_KEY_Hangul_J_Phieuf = 0x0eed
    const GDK_KEY_Hangul_J_Hieuh = 0x0eee
    const GDK_KEY_Hangul_RieulYeorinHieuh = Float32(0xee)
    const GDK_KEY_Hangul_SunkyeongeumMieum = 0x0ef0
    const GDK_KEY_Hangul_SunkyeongeumPieub = 0x0ef1
    const GDK_KEY_Hangul_PanSios = 0x0ef2
    const GDK_KEY_Hangul_KkogjiDalrinIeung = 0x0ef3
    const GDK_KEY_Hangul_SunkyeongeumPhieuf = 0x0ef4
    const GDK_KEY_Hangul_YeorinHieuh = 0x0ef5
    const GDK_KEY_Hangul_AraeA = 0x0ef6
    const GDK_KEY_Hangul_AraeAE = 0x0ef7
    const GDK_KEY_Hangul_J_PanSios = 0x0ef8
    const GDK_KEY_Hangul_J_KkogjiDalrinIeung = 0x0ef9
    const GDK_KEY_Hangul_J_YeorinHieuh = 0x0efa
    const GDK_KEY_Korean_Won = Float32(0xef)
    const GDK_KEY_Armenian_ligature_ew = 0x01000587
    const GDK_KEY_Armenian_full_stop = 0x01000589
    const GDK_KEY_Armenian_verjaket = 0x01000589
    const GDK_KEY_Armenian_separation_mark = 0x0100055d
    const GDK_KEY_Armenian_but = 0x0100055d
    const GDK_KEY_Armenian_hyphen = 0x0100058a
    const GDK_KEY_Armenian_yentamna = 0x0100058a
    const GDK_KEY_Armenian_exclam = 0x0100055c
    const GDK_KEY_Armenian_amanak = 0x0100055c
    const GDK_KEY_Armenian_accent = 0x0100055b
    const GDK_KEY_Armenian_shesht = 0x0100055b
    const GDK_KEY_Armenian_question = 0x0100055e
    const GDK_KEY_Armenian_paruyk = 0x0100055e
    const GDK_KEY_Armenian_AYB = 0x01000531
    const GDK_KEY_Armenian_ayb = 0x01000561
    const GDK_KEY_Armenian_BEN = 0x01000532
    const GDK_KEY_Armenian_ben = 0x01000562
    const GDK_KEY_Armenian_GIM = 0x01000533
    const GDK_KEY_Armenian_gim = 0x01000563
    const GDK_KEY_Armenian_DA = 0x01000534
    const GDK_KEY_Armenian_da = 0x01000564
    const GDK_KEY_Armenian_YECH = 0x01000535
    const GDK_KEY_Armenian_yech = 0x01000565
    const GDK_KEY_Armenian_ZA = 0x01000536
    const GDK_KEY_Armenian_za = 0x01000566
    const GDK_KEY_Armenian_E = 0x01000537
    const GDK_KEY_Armenian_e = 0x01000567
    const GDK_KEY_Armenian_AT = 0x01000538
    const GDK_KEY_Armenian_at = 0x01000568
    const GDK_KEY_Armenian_TO = 0x01000539
    const GDK_KEY_Armenian_to = 0x01000569
    const GDK_KEY_Armenian_ZHE = 0x0100053a
    const GDK_KEY_Armenian_zhe = 0x0100056a
    const GDK_KEY_Armenian_INI = 0x0100053b
    const GDK_KEY_Armenian_ini = 0x0100056b
    const GDK_KEY_Armenian_LYUN = 0x0100053c
    const GDK_KEY_Armenian_lyun = 0x0100056c
    const GDK_KEY_Armenian_KHE = 0x0100053d
    const GDK_KEY_Armenian_khe = 0x0100056d
    const GDK_KEY_Armenian_TSA = 0x0100053e
    const GDK_KEY_Armenian_tsa = 0x0100056e
    const GDK_KEY_Armenian_KEN = Float32(0x00100053)
    const GDK_KEY_Armenian_ken = Float32(0x00100056)
    const GDK_KEY_Armenian_HO = 0x01000540
    const GDK_KEY_Armenian_ho = 0x01000570
    const GDK_KEY_Armenian_DZA = 0x01000541
    const GDK_KEY_Armenian_dza = 0x01000571
    const GDK_KEY_Armenian_GHAT = 0x01000542
    const GDK_KEY_Armenian_ghat = 0x01000572
    const GDK_KEY_Armenian_TCHE = 0x01000543
    const GDK_KEY_Armenian_tche = 0x01000573
    const GDK_KEY_Armenian_MEN = 0x01000544
    const GDK_KEY_Armenian_men = 0x01000574
    const GDK_KEY_Armenian_HI = 0x01000545
    const GDK_KEY_Armenian_hi = 0x01000575
    const GDK_KEY_Armenian_NU = 0x01000546
    const GDK_KEY_Armenian_nu = 0x01000576
    const GDK_KEY_Armenian_SHA = 0x01000547
    const GDK_KEY_Armenian_sha = 0x01000577
    const GDK_KEY_Armenian_VO = 0x01000548
    const GDK_KEY_Armenian_vo = 0x01000578
    const GDK_KEY_Armenian_CHA = 0x01000549
    const GDK_KEY_Armenian_cha = 0x01000579
    const GDK_KEY_Armenian_PE = 0x0100054a
    const GDK_KEY_Armenian_pe = 0x0100057a
    const GDK_KEY_Armenian_JE = 0x0100054b
    const GDK_KEY_Armenian_je = 0x0100057b
    const GDK_KEY_Armenian_RA = 0x0100054c
    const GDK_KEY_Armenian_ra = 0x0100057c
    const GDK_KEY_Armenian_SE = 0x0100054d
    const GDK_KEY_Armenian_se = 0x0100057d
    const GDK_KEY_Armenian_VEV = 0x0100054e
    const GDK_KEY_Armenian_vev = 0x0100057e
    const GDK_KEY_Armenian_TYUN = Float32(0x00100054)
    const GDK_KEY_Armenian_tyun = Float32(0x00100057)
    const GDK_KEY_Armenian_RE = 0x01000550
    const GDK_KEY_Armenian_re = 0x01000580
    const GDK_KEY_Armenian_TSO = 0x01000551
    const GDK_KEY_Armenian_tso = 0x01000581
    const GDK_KEY_Armenian_VYUN = 0x01000552
    const GDK_KEY_Armenian_vyun = 0x01000582
    const GDK_KEY_Armenian_PYUR = 0x01000553
    const GDK_KEY_Armenian_pyur = 0x01000583
    const GDK_KEY_Armenian_KE = 0x01000554
    const GDK_KEY_Armenian_ke = 0x01000584
    const GDK_KEY_Armenian_O = 0x01000555
    const GDK_KEY_Armenian_o = 0x01000585
    const GDK_KEY_Armenian_FE = 0x01000556
    const GDK_KEY_Armenian_fe = 0x01000586
    const GDK_KEY_Armenian_apostrophe = 0x0100055a
    const GDK_KEY_Georgian_an = 0x010010d0
    const GDK_KEY_Georgian_ban = 0x010010d1
    const GDK_KEY_Georgian_gan = 0x010010d2
    const GDK_KEY_Georgian_don = 0x010010d3
    const GDK_KEY_Georgian_en = 0x010010d4
    const GDK_KEY_Georgian_vin = 0x010010d5
    const GDK_KEY_Georgian_zen = 0x010010d6
    const GDK_KEY_Georgian_tan = 0x010010d7
    const GDK_KEY_Georgian_in = 0x010010d8
    const GDK_KEY_Georgian_kan = 0x010010d9
    const GDK_KEY_Georgian_las = 0x010010da
    const GDK_KEY_Georgian_man = 0x010010db
    const GDK_KEY_Georgian_nar = 0x010010dc
    const GDK_KEY_Georgian_on = 0x010010dd
    const GDK_KEY_Georgian_par = 0x010010de
    const GDK_KEY_Georgian_zhar = Float32(0x0010010d)
    const GDK_KEY_Georgian_rae = 0x010010e0
    const GDK_KEY_Georgian_san = 0x010010e1
    const GDK_KEY_Georgian_tar = 0x010010e2
    const GDK_KEY_Georgian_un = 0x010010e3
    const GDK_KEY_Georgian_phar = 0x010010e4
    const GDK_KEY_Georgian_khar = 0x010010e5
    const GDK_KEY_Georgian_ghan = 0x010010e6
    const GDK_KEY_Georgian_qar = 0x010010e7
    const GDK_KEY_Georgian_shin = 0x010010e8
    const GDK_KEY_Georgian_chin = 0x010010e9
    const GDK_KEY_Georgian_can = 0x010010ea
    const GDK_KEY_Georgian_jil = 0x010010eb
    const GDK_KEY_Georgian_cil = 0x010010ec
    const GDK_KEY_Georgian_char = 0x010010ed
    const GDK_KEY_Georgian_xan = 0x010010ee
    const GDK_KEY_Georgian_jhan = Float32(0x0010010e)
    const GDK_KEY_Georgian_hae = 0x010010f0
    const GDK_KEY_Georgian_he = 0x010010f1
    const GDK_KEY_Georgian_hie = 0x010010f2
    const GDK_KEY_Georgian_we = 0x010010f3
    const GDK_KEY_Georgian_har = 0x010010f4
    const GDK_KEY_Georgian_hoe = 0x010010f5
    const GDK_KEY_Georgian_fi = 0x010010f6
    const GDK_KEY_Xabovedot = 0x01001e8a
    const GDK_KEY_Ibreve = 0x0100012c
    const GDK_KEY_Zstroke = 0x010001b5
    const GDK_KEY_Gcaron = 0x010001e6
    const GDK_KEY_Ocaron = 0x010001d1
    const GDK_KEY_Obarred = Float32(0x00100019)
    const GDK_KEY_xabovedot = 0x01001e8b
    const GDK_KEY_ibreve = 0x0100012d
    const GDK_KEY_zstroke = 0x010001b6
    const GDK_KEY_gcaron = 0x010001e7
    const GDK_KEY_ocaron = 0x010001d2
    const GDK_KEY_obarred = 0x01000275
    const GDK_KEY_SCHWA = Float32(0x00100018)
    const GDK_KEY_schwa = 0x01000259
    const GDK_KEY_EZH = 0x010001b7
    const GDK_KEY_ezh = 0x01000292
    const GDK_KEY_Lbelowdot = 0x01001e36
    const GDK_KEY_lbelowdot = 0x01001e37
    const GDK_KEY_Abelowdot = 0x01001ea0
    const GDK_KEY_abelowdot = 0x01001ea1
    const GDK_KEY_Ahook = 0x01001ea2
    const GDK_KEY_ahook = 0x01001ea3
    const GDK_KEY_Acircumflexacute = 0x01001ea4
    const GDK_KEY_acircumflexacute = 0x01001ea5
    const GDK_KEY_Acircumflexgrave = 0x01001ea6
    const GDK_KEY_acircumflexgrave = 0x01001ea7
    const GDK_KEY_Acircumflexhook = 0x01001ea8
    const GDK_KEY_acircumflexhook = 0x01001ea9
    const GDK_KEY_Acircumflextilde = 0x01001eaa
    const GDK_KEY_acircumflextilde = 0x01001eab
    const GDK_KEY_Acircumflexbelowdot = 0x01001eac
    const GDK_KEY_acircumflexbelowdot = 0x01001ead
    const GDK_KEY_Abreveacute = 0x01001eae
    const GDK_KEY_abreveacute = Float32(0x001001ea)
    const GDK_KEY_Abrevegrave = 0x01001eb0
    const GDK_KEY_abrevegrave = 0x01001eb1
    const GDK_KEY_Abrevehook = 0x01001eb2
    const GDK_KEY_abrevehook = 0x01001eb3
    const GDK_KEY_Abrevetilde = 0x01001eb4
    const GDK_KEY_abrevetilde = 0x01001eb5
    const GDK_KEY_Abrevebelowdot = 0x01001eb6
    const GDK_KEY_abrevebelowdot = 0x01001eb7
    const GDK_KEY_Ebelowdot = 0x01001eb8
    const GDK_KEY_ebelowdot = 0x01001eb9
    const GDK_KEY_Ehook = 0x01001eba
    const GDK_KEY_ehook = 0x01001ebb
    const GDK_KEY_Etilde = 0x01001ebc
    const GDK_KEY_etilde = 0x01001ebd
    const GDK_KEY_Ecircumflexacute = 0x01001ebe
    const GDK_KEY_ecircumflexacute = Float32(0x001001eb)
    const GDK_KEY_Ecircumflexgrave = 0x01001ec0
    const GDK_KEY_ecircumflexgrave = 0x01001ec1
    const GDK_KEY_Ecircumflexhook = 0x01001ec2
    const GDK_KEY_ecircumflexhook = 0x01001ec3
    const GDK_KEY_Ecircumflextilde = 0x01001ec4
    const GDK_KEY_ecircumflextilde = 0x01001ec5
    const GDK_KEY_Ecircumflexbelowdot = 0x01001ec6
    const GDK_KEY_ecircumflexbelowdot = 0x01001ec7
    const GDK_KEY_Ihook = 0x01001ec8
    const GDK_KEY_ihook = 0x01001ec9
    const GDK_KEY_Ibelowdot = 0x01001eca
    const GDK_KEY_ibelowdot = 0x01001ecb
    const GDK_KEY_Obelowdot = 0x01001ecc
    const GDK_KEY_obelowdot = 0x01001ecd
    const GDK_KEY_Ohook = 0x01001ece
    const GDK_KEY_ohook = Float32(0x001001ec)
    const GDK_KEY_Ocircumflexacute = 0x01001ed0
    const GDK_KEY_ocircumflexacute = 0x01001ed1
    const GDK_KEY_Ocircumflexgrave = 0x01001ed2
    const GDK_KEY_ocircumflexgrave = 0x01001ed3
    const GDK_KEY_Ocircumflexhook = 0x01001ed4
    const GDK_KEY_ocircumflexhook = 0x01001ed5
    const GDK_KEY_Ocircumflextilde = 0x01001ed6
    const GDK_KEY_ocircumflextilde = 0x01001ed7
    const GDK_KEY_Ocircumflexbelowdot = 0x01001ed8
    const GDK_KEY_ocircumflexbelowdot = 0x01001ed9
    const GDK_KEY_Ohornacute = 0x01001eda
    const GDK_KEY_ohornacute = 0x01001edb
    const GDK_KEY_Ohorngrave = 0x01001edc
    const GDK_KEY_ohorngrave = 0x01001edd
    const GDK_KEY_Ohornhook = 0x01001ede
    const GDK_KEY_ohornhook = Float32(0x001001ed)
    const GDK_KEY_Ohorntilde = 0x01001ee0
    const GDK_KEY_ohorntilde = 0x01001ee1
    const GDK_KEY_Ohornbelowdot = 0x01001ee2
    const GDK_KEY_ohornbelowdot = 0x01001ee3
    const GDK_KEY_Ubelowdot = 0x01001ee4
    const GDK_KEY_ubelowdot = 0x01001ee5
    const GDK_KEY_Uhook = 0x01001ee6
    const GDK_KEY_uhook = 0x01001ee7
    const GDK_KEY_Uhornacute = 0x01001ee8
    const GDK_KEY_uhornacute = 0x01001ee9
    const GDK_KEY_Uhorngrave = 0x01001eea
    const GDK_KEY_uhorngrave = 0x01001eeb
    const GDK_KEY_Uhornhook = 0x01001eec
    const GDK_KEY_uhornhook = 0x01001eed
    const GDK_KEY_Uhorntilde = 0x01001eee
    const GDK_KEY_uhorntilde = Float32(0x001001ee)
    const GDK_KEY_Uhornbelowdot = 0x01001ef0
    const GDK_KEY_uhornbelowdot = 0x01001ef1
    const GDK_KEY_Ybelowdot = 0x01001ef4
    const GDK_KEY_ybelowdot = 0x01001ef5
    const GDK_KEY_Yhook = 0x01001ef6
    const GDK_KEY_yhook = 0x01001ef7
    const GDK_KEY_Ytilde = 0x01001ef8
    const GDK_KEY_ytilde = 0x01001ef9
    const GDK_KEY_Ohorn = 0x010001a0
    const GDK_KEY_ohorn = 0x010001a1
    const GDK_KEY_Uhorn = Float32(0x0010001a)
    const GDK_KEY_uhorn = 0x010001b0
    const GDK_KEY_EcuSign = 0x010020a0
    const GDK_KEY_ColonSign = 0x010020a1
    const GDK_KEY_CruzeiroSign = 0x010020a2
    const GDK_KEY_FFrancSign = 0x010020a3
    const GDK_KEY_LiraSign = 0x010020a4
    const GDK_KEY_MillSign = 0x010020a5
    const GDK_KEY_NairaSign = 0x010020a6
    const GDK_KEY_PesetaSign = 0x010020a7
    const GDK_KEY_RupeeSign = 0x010020a8
    const GDK_KEY_WonSign = 0x010020a9
    const GDK_KEY_NewSheqelSign = 0x010020aa
    const GDK_KEY_DongSign = 0x010020ab
    const GDK_KEY_EuroSign = 0x20ac
    const GDK_KEY_zerosuperior = 0x01002070
    const GDK_KEY_foursuperior = 0x01002074
    const GDK_KEY_fivesuperior = 0x01002075
    const GDK_KEY_sixsuperior = 0x01002076
    const GDK_KEY_sevensuperior = 0x01002077
    const GDK_KEY_eightsuperior = 0x01002078
    const GDK_KEY_ninesuperior = 0x01002079
    const GDK_KEY_zerosubscript = 0x01002080
    const GDK_KEY_onesubscript = 0x01002081
    const GDK_KEY_twosubscript = 0x01002082
    const GDK_KEY_threesubscript = 0x01002083
    const GDK_KEY_foursubscript = 0x01002084
    const GDK_KEY_fivesubscript = 0x01002085
    const GDK_KEY_sixsubscript = 0x01002086
    const GDK_KEY_sevensubscript = 0x01002087
    const GDK_KEY_eightsubscript = 0x01002088
    const GDK_KEY_ninesubscript = 0x01002089
    const GDK_KEY_partdifferential = 0x01002202
    const GDK_KEY_emptyset = 0x01002205
    const GDK_KEY_elementof = 0x01002208
    const GDK_KEY_notelementof = 0x01002209
    const GDK_KEY_containsas = 0x0100220b
    const GDK_KEY_squareroot = 0x0100221a
    const GDK_KEY_cuberoot = 0x0100221b
    const GDK_KEY_fourthroot = 0x0100221c
    const GDK_KEY_dintegral = 0x0100222c
    const GDK_KEY_tintegral = 0x0100222d
    const GDK_KEY_because = 0x01002235
    const GDK_KEY_approxeq = 0x01002248
    const GDK_KEY_notapproxeq = 0x01002247
    const GDK_KEY_notidentical = 0x01002262
    const GDK_KEY_stricteq = 0x01002263
    const GDK_KEY_braille_blank = 0x01002800
    const GDK_KEY_Sinh_ng = 0x01000d82
    const GDK_KEY_Sinh_a = 0x01000d85
    const GDK_KEY_Sinh_aa = 0x01000d86
    const GDK_KEY_Sinh_ae = 0x01000d87
    const GDK_KEY_Sinh_aee = 0x01000d88
    const GDK_KEY_Sinh_i = 0x01000d89
    const GDK_KEY_Sinh_ii = 0x01000d8a
    const GDK_KEY_Sinh_u = 0x01000d8b
    const GDK_KEY_Sinh_uu = 0x01000d8c
    const GDK_KEY_Sinh_ri = 0x01000d8d
    const GDK_KEY_Sinh_rii = 0x01000d8e
    const GDK_KEY_Sinh_lu = Float32(0x001000d8)
    const GDK_KEY_Sinh_luu = 0x01000d90
    const GDK_KEY_Sinh_e = 0x01000d91
    const GDK_KEY_Sinh_ee = 0x01000d92
    const GDK_KEY_Sinh_ai = 0x01000d93
    const GDK_KEY_Sinh_o = 0x01000d94
    const GDK_KEY_Sinh_oo = 0x01000d95
    const GDK_KEY_Sinh_au = 0x01000d96
    const GDK_KEY_Sinh_ka = 0x01000d9a
    const GDK_KEY_Sinh_kha = 0x01000d9b
    const GDK_KEY_Sinh_ga = 0x01000d9c
    const GDK_KEY_Sinh_gha = 0x01000d9d
    const GDK_KEY_Sinh_nga = Float32(0x001000d9)
    const GDK_KEY_Sinh_ca = 0x01000da0
    const GDK_KEY_Sinh_cha = 0x01000da1
    const GDK_KEY_Sinh_ja = 0x01000da2
    const GDK_KEY_Sinh_jha = 0x01000da3
    const GDK_KEY_Sinh_nya = 0x01000da4
    const GDK_KEY_Sinh_jnya = 0x01000da5
    const GDK_KEY_Sinh_nja = 0x01000da6
    const GDK_KEY_Sinh_tta = 0x01000da7
    const GDK_KEY_Sinh_ttha = 0x01000da8
    const GDK_KEY_Sinh_dda = 0x01000da9
    const GDK_KEY_Sinh_ddha = 0x01000daa
    const GDK_KEY_Sinh_nna = 0x01000dab
    const GDK_KEY_Sinh_ndda = 0x01000dac
    const GDK_KEY_Sinh_tha = 0x01000dad
    const GDK_KEY_Sinh_thha = 0x01000dae
    const GDK_KEY_Sinh_dha = Float32(0x001000da)
    const GDK_KEY_Sinh_dhha = 0x01000db0
    const GDK_KEY_Sinh_na = 0x01000db1
    const GDK_KEY_Sinh_ndha = 0x01000db3
    const GDK_KEY_Sinh_pa = 0x01000db4
    const GDK_KEY_Sinh_pha = 0x01000db5
    const GDK_KEY_Sinh_ba = 0x01000db6
    const GDK_KEY_Sinh_bha = 0x01000db7
    const GDK_KEY_Sinh_ma = 0x01000db8
    const GDK_KEY_Sinh_mba = 0x01000db9
    const GDK_KEY_Sinh_ya = 0x01000dba
    const GDK_KEY_Sinh_ra = 0x01000dbb
    const GDK_KEY_Sinh_la = 0x01000dbd
    const GDK_KEY_Sinh_va = 0x01000dc0
    const GDK_KEY_Sinh_sha = 0x01000dc1
    const GDK_KEY_Sinh_ssha = 0x01000dc2
    const GDK_KEY_Sinh_sa = 0x01000dc3
    const GDK_KEY_Sinh_ha = 0x01000dc4
    const GDK_KEY_Sinh_lla = 0x01000dc5
    const GDK_KEY_Sinh_fa = 0x01000dc6
    const GDK_KEY_Sinh_al = 0x01000dca
    const GDK_KEY_Sinh_kunddaliya = 0x01000df4
    const GDK_KEY_ModeLock = 0x1008ff01
    const GDK_KEY_MonBrightnessUp = 0x1008ff02
    const GDK_KEY_MonBrightnessDown = 0x1008ff03
    const GDK_KEY_KbdLightOnOff = 0x1008ff04
    const GDK_KEY_KbdBrightnessUp = 0x1008ff05
    const GDK_KEY_KbdBrightnessDown = 0x1008ff06
    const GDK_KEY_Standby = 0x1008ff10
    const GDK_KEY_AudioLowerVolume = 0x1008ff11
    const GDK_KEY_AudioMute = 0x1008ff12
    const GDK_KEY_AudioRaiseVolume = 0x1008ff13
    const GDK_KEY_AudioPlay = 0x1008ff14
    const GDK_KEY_AudioStop = 0x1008ff15
    const GDK_KEY_AudioPrev = 0x1008ff16
    const GDK_KEY_AudioNext = 0x1008ff17
    const GDK_KEY_HomePage = 0x1008ff18
    const GDK_KEY_Mail = 0x1008ff19
    const GDK_KEY_Start = 0x1008ff1a
    const GDK_KEY_Search = 0x1008ff1b
    const GDK_KEY_AudioRecord = 0x1008ff1c
    const GDK_KEY_Calculator = 0x1008ff1d
    const GDK_KEY_Memo = 0x1008ff1e
    const GDK_KEY_ToDoList = Float32(0x01008ff1)
    const GDK_KEY_Calendar = 0x1008ff20
    const GDK_KEY_PowerDown = 0x1008ff21
    const GDK_KEY_ContrastAdjust = 0x1008ff22
    const GDK_KEY_RockerUp = 0x1008ff23
    const GDK_KEY_RockerDown = 0x1008ff24
    const GDK_KEY_RockerEnter = 0x1008ff25
    const GDK_KEY_Back = 0x1008ff26
    const GDK_KEY_Forward = 0x1008ff27
    const GDK_KEY_Stop = 0x1008ff28
    const GDK_KEY_Refresh = 0x1008ff29
    const GDK_KEY_PowerOff = 0x1008ff2a
    const GDK_KEY_WakeUp = 0x1008ff2b
    const GDK_KEY_Eject = 0x1008ff2c
    const GDK_KEY_ScreenSaver = 0x1008ff2d
    const GDK_KEY_WWW = 0x1008ff2e
    const GDK_KEY_Sleep = Float32(0x01008ff2)
    const GDK_KEY_Favorites = 0x1008ff30
    const GDK_KEY_AudioPause = 0x1008ff31
    const GDK_KEY_AudioMedia = 0x1008ff32
    const GDK_KEY_MyComputer = 0x1008ff33
    const GDK_KEY_VendorHome = 0x1008ff34
    const GDK_KEY_LightBulb = 0x1008ff35
    const GDK_KEY_Shop = 0x1008ff36
    const GDK_KEY_History = 0x1008ff37
    const GDK_KEY_OpenURL = 0x1008ff38
    const GDK_KEY_AddFavorite = 0x1008ff39
    const GDK_KEY_HotLinks = 0x1008ff3a
    const GDK_KEY_BrightnessAdjust = 0x1008ff3b
    const GDK_KEY_Finance = 0x1008ff3c
    const GDK_KEY_Community = 0x1008ff3d
    const GDK_KEY_AudioRewind = 0x1008ff3e
    const GDK_KEY_BackForward = Float32(0x01008ff3)
    const GDK_KEY_LaunchA = 0x1008ff4a
    const GDK_KEY_LaunchB = 0x1008ff4b
    const GDK_KEY_LaunchC = 0x1008ff4c
    const GDK_KEY_LaunchD = 0x1008ff4d
    const GDK_KEY_LaunchE = 0x1008ff4e
    const GDK_KEY_LaunchF = Float32(0x01008ff4)
    const GDK_KEY_ApplicationLeft = 0x1008ff50
    const GDK_KEY_ApplicationRight = 0x1008ff51
    const GDK_KEY_Book = 0x1008ff52
    const GDK_KEY_CD = 0x1008ff53
    const GDK_KEY_WindowClear = 0x1008ff55
    const GDK_KEY_Close = 0x1008ff56
    const GDK_KEY_Copy = 0x1008ff57
    const GDK_KEY_Cut = 0x1008ff58
    const GDK_KEY_Display = 0x1008ff59
    const GDK_KEY_DOS = 0x1008ff5a
    const GDK_KEY_Documents = 0x1008ff5b
    const GDK_KEY_Excel = 0x1008ff5c
    const GDK_KEY_Explorer = 0x1008ff5d
    const GDK_KEY_Game = 0x1008ff5e
    const GDK_KEY_Go = Float32(0x01008ff5)
    const GDK_KEY_iTouch = 0x1008ff60
    const GDK_KEY_LogOff = 0x1008ff61
    const GDK_KEY_Market = 0x1008ff62
    const GDK_KEY_Meeting = 0x1008ff63
    const GDK_KEY_MenuKB = 0x1008ff65
    const GDK_KEY_MenuPB = 0x1008ff66
    const GDK_KEY_MySites = 0x1008ff67
    const GDK_KEY_New = 0x1008ff68
    const GDK_KEY_News = 0x1008ff69
    const GDK_KEY_OfficeHome = 0x1008ff6a
    const GDK_KEY_Open = 0x1008ff6b
    const GDK_KEY_Option = 0x1008ff6c
    const GDK_KEY_Paste = 0x1008ff6d
    const GDK_KEY_Phone = 0x1008ff6e
    const GDK_KEY_Reply = 0x1008ff72
    const GDK_KEY_Reload = 0x1008ff73
    const GDK_KEY_RotateWindows = 0x1008ff74
    const GDK_KEY_RotationPB = 0x1008ff75
    const GDK_KEY_RotationKB = 0x1008ff76
    const GDK_KEY_Save = 0x1008ff77
    const GDK_KEY_ScrollUp = 0x1008ff78
    const GDK_KEY_ScrollDown = 0x1008ff79
    const GDK_KEY_ScrollClick = 0x1008ff7a
    const GDK_KEY_Send = 0x1008ff7b
    const GDK_KEY_Spell = 0x1008ff7c
    const GDK_KEY_SplitScreen = 0x1008ff7d
    const GDK_KEY_Support = 0x1008ff7e
    const GDK_KEY_TaskPane = Float32(0x01008ff7)
    const GDK_KEY_Terminal = 0x1008ff80
    const GDK_KEY_Tools = 0x1008ff81
    const GDK_KEY_Travel = 0x1008ff82
    const GDK_KEY_UserPB = 0x1008ff84
    const GDK_KEY_User1KB = 0x1008ff85
    const GDK_KEY_User2KB = 0x1008ff86
    const GDK_KEY_Video = 0x1008ff87
    const GDK_KEY_WheelButton = 0x1008ff88
    const GDK_KEY_Word = 0x1008ff89
    const GDK_KEY_Xfer = 0x1008ff8a
    const GDK_KEY_ZoomIn = 0x1008ff8b
    const GDK_KEY_ZoomOut = 0x1008ff8c
    const GDK_KEY_Away = 0x1008ff8d
    const GDK_KEY_Messenger = 0x1008ff8e
    const GDK_KEY_WebCam = Float32(0x01008ff8)
    const GDK_KEY_MailForward = 0x1008ff90
    const GDK_KEY_Pictures = 0x1008ff91
    const GDK_KEY_Music = 0x1008ff92
    const GDK_KEY_Battery = 0x1008ff93
    const GDK_KEY_Bluetooth = 0x1008ff94
    const GDK_KEY_WLAN = 0x1008ff95
    const GDK_KEY_UWB = 0x1008ff96
    const GDK_KEY_AudioForward = 0x1008ff97
    const GDK_KEY_AudioRepeat = 0x1008ff98
    const GDK_KEY_AudioRandomPlay = 0x1008ff99
    const GDK_KEY_Subtitle = 0x1008ff9a
    const GDK_KEY_AudioCycleTrack = 0x1008ff9b
    const GDK_KEY_CycleAngle = 0x1008ff9c
    const GDK_KEY_FrameBack = 0x1008ff9d
    const GDK_KEY_FrameForward = 0x1008ff9e
    const GDK_KEY_Time = Float32(0x01008ff9)
    const GDK_KEY_SelectButton = 0x1008ffa0
    const GDK_KEY_View = 0x1008ffa1
    const GDK_KEY_TopMenu = 0x1008ffa2
    const GDK_KEY_Red = 0x1008ffa3
    const GDK_KEY_Green = 0x1008ffa4
    const GDK_KEY_Yellow = 0x1008ffa5
    const GDK_KEY_Blue = 0x1008ffa6
    const GDK_KEY_Suspend = 0x1008ffa7
    const GDK_KEY_Hibernate = 0x1008ffa8
    const GDK_KEY_TouchpadToggle = 0x1008ffa9
    const GDK_KEY_TouchpadOn = 0x1008ffb0
    const GDK_KEY_TouchpadOff = 0x1008ffb1
    const GDK_KEY_AudioMicMute = 0x1008ffb2
    const GDK_KEY_Ungrab = 0x1008fe20
    const GDK_KEY_ClearGrab = 0x1008fe21
    const GDK_KEY_Next_VMode = 0x1008fe22
    const GDK_KEY_Prev_VMode = 0x1008fe23
    const GDK_KEY_LogWindowTree = 0x1008fe24
    const GDK_KEY_LogGrabInfo = 0x1008fe25
    const GTK_STYLE_PROVIDER_PRIORITY_FALLBACK = 1
    const GTK_STYLE_PROVIDER_PRIORITY_THEME = 200
    const GTK_STYLE_PROVIDER_PRIORITY_SETTINGS = 400
    const GTK_STYLE_PROVIDER_PRIORITY_APPLICATION = 600
    const GTK_STYLE_PROVIDER_PRIORITY_USER = 800
    const GTK_STYLE_PROPERTY_BACKGROUND_COLOR = "background-color"
    const GTK_STYLE_PROPERTY_COLOR = "color"
    const GTK_STYLE_PROPERTY_FONT = "font"
    const GTK_STYLE_PROPERTY_PADDING = "padding"
    const GTK_STYLE_PROPERTY_BORDER_WIDTH = "border-width"
    const GTK_STYLE_PROPERTY_MARGIN = "margin"
    const GTK_STYLE_PROPERTY_BORDER_RADIUS = "border-radius"
    const GTK_STYLE_PROPERTY_BORDER_STYLE = "border-style"
    const GTK_STYLE_PROPERTY_BORDER_COLOR = "border-color"
    const GTK_STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image"
    const GTK_STYLE_CLASS_CELL = "cell"
    const GTK_STYLE_CLASS_DIM_LABEL = "dim-label"
    const GTK_STYLE_CLASS_ENTRY = "entry"
    const GTK_STYLE_CLASS_LABEL = "label"
    const GTK_STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry"
    const GTK_STYLE_CLASS_BUTTON = "button"
    const GTK_STYLE_CLASS_LIST = "list"
    const GTK_STYLE_CLASS_LIST_ROW = "list-row"
    const GTK_STYLE_CLASS_CALENDAR = "calendar"
    const GTK_STYLE_CLASS_SLIDER = "slider"
    const GTK_STYLE_CLASS_BACKGROUND = "background"
    const GTK_STYLE_CLASS_RUBBERBAND = "rubberband"
    const GTK_STYLE_CLASS_CSD = "csd"
    const GTK_STYLE_CLASS_TOOLTIP = "tooltip"
    const GTK_STYLE_CLASS_MENU = "menu"
    const GTK_STYLE_CLASS_CONTEXT_MENU = "context-menu"
    const GTK_STYLE_CLASS_TOUCH_SELECTION = "touch-selection"
    const GTK_STYLE_CLASS_MENUBAR = "menubar"
    const GTK_STYLE_CLASS_MENUITEM = "menuitem"
    const GTK_STYLE_CLASS_TOOLBAR = "toolbar"
    const GTK_STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar"
    const GTK_STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar"
    const GTK_STYLE_CLASS_STATUSBAR = "statusbar"
    const GTK_STYLE_CLASS_RADIO = "radio"
    const GTK_STYLE_CLASS_CHECK = "check"
    const GTK_STYLE_CLASS_DEFAULT = "default"
    const GTK_STYLE_CLASS_TROUGH = "trough"
    const GTK_STYLE_CLASS_SCROLLBAR = "scrollbar"
    const GTK_STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction"
    const GTK_STYLE_CLASS_SCALE = "scale"
    const GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above"
    const GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below"
    const GTK_STYLE_CLASS_HEADER = "header"
    const GTK_STYLE_CLASS_ACCELERATOR = "accelerator"
    const GTK_STYLE_CLASS_RAISED = "raised"
    const GTK_STYLE_CLASS_LINKED = "linked"
    const GTK_STYLE_CLASS_GRIP = "grip"
    const GTK_STYLE_CLASS_DOCK = "dock"
    const GTK_STYLE_CLASS_PROGRESSBAR = "progressbar"
    const GTK_STYLE_CLASS_SPINNER = "spinner"
    const GTK_STYLE_CLASS_MARK = "mark"
    const GTK_STYLE_CLASS_EXPANDER = "expander"
    const GTK_STYLE_CLASS_SPINBUTTON = "spinbutton"
    const GTK_STYLE_CLASS_NOTEBOOK = "notebook"
    const GTK_STYLE_CLASS_VIEW = "view"
    const GTK_STYLE_CLASS_SIDEBAR = "sidebar"
    const GTK_STYLE_CLASS_IMAGE = "image"
    const GTK_STYLE_CLASS_HIGHLIGHT = "highlight"
    const GTK_STYLE_CLASS_FRAME = "frame"
    const GTK_STYLE_CLASS_DND = "dnd"
    const GTK_STYLE_CLASS_PANE_SEPARATOR = "pane-separator"
    const GTK_STYLE_CLASS_SEPARATOR = "separator"
    const GTK_STYLE_CLASS_INFO = "info"
    const GTK_STYLE_CLASS_WARNING = "warning"
    const GTK_STYLE_CLASS_QUESTION = "question"
    const GTK_STYLE_CLASS_ERROR = "error"
    const GTK_STYLE_CLASS_HORIZONTAL = "horizontal"
    const GTK_STYLE_CLASS_VERTICAL = "vertical"
    const GTK_STYLE_CLASS_TOP = "top"
    const GTK_STYLE_CLASS_BOTTOM = "bottom"
    const GTK_STYLE_CLASS_LEFT = "left"
    const GTK_STYLE_CLASS_RIGHT = "right"
    const GTK_STYLE_CLASS_PULSE = "pulse"
    const GTK_STYLE_CLASS_ARROW = "arrow"
    const GTK_STYLE_CLASS_OSD = "osd"
    const GTK_STYLE_CLASS_LEVEL_BAR = "level-bar"
    const GTK_STYLE_CLASS_CURSOR_HANDLE = "cursor-handle"
    const GTK_STYLE_CLASS_INSERTION_CURSOR = "insertion-cursor"
    const GTK_STYLE_CLASS_TITLEBAR = "titlebar"
    const GTK_STYLE_CLASS_TITLE = "title"
    const GTK_STYLE_CLASS_SUBTITLE = "subtitle"
    const GTK_STYLE_CLASS_NEEDS_ATTENTION = "needs-attention"
    const GTK_STYLE_CLASS_SUGGESTED_ACTION = "suggested-action"
    const GTK_STYLE_CLASS_DESTRUCTIVE_ACTION = "destructive-action"
    const GTK_STYLE_CLASS_POPOVER = "popover"
    const GTK_STYLE_CLASS_POPUP = "popup"
    const GTK_STYLE_CLASS_MESSAGE_DIALOG = "message-dialog"
    const GTK_STYLE_CLASS_FLAT = "flat"
    const GTK_STYLE_CLASS_READ_ONLY = "read-only"
    const GTK_STYLE_CLASS_OVERSHOOT = "overshoot"
    const GTK_STYLE_CLASS_UNDERSHOOT = "undershoot"
    const GTK_STYLE_CLASS_PAPER = "paper"
    const GTK_STYLE_CLASS_MONOSPACE = "monospace"
    const GTK_STYLE_CLASS_WIDE = "wide"
    const GTK_STYLE_REGION_ROW = "row"
    const GTK_STYLE_REGION_COLUMN = "column"
    const GTK_STYLE_REGION_COLUMN_HEADER = "column-header"
    const GTK_STYLE_REGION_TAB = "tab"
    const GTK_MAX_COMPOSE_LEN = 7
    const GTK_LEVEL_BAR_OFFSET_LOW = "low"
    const GTK_LEVEL_BAR_OFFSET_HIGH = "high"
    const GTK_LEVEL_BAR_OFFSET_FULL = "full"
    const GTK_PAPER_NAME_LETTER = "na_letter"
    const GTK_PAPER_NAME_EXECUTIVE = "na_executive"
    const GTK_PAPER_NAME_LEGAL = "na_legal"
    const GTK_PRINT_SETTINGS_PRINTER = "printer"
    const GTK_PRINT_SETTINGS_ORIENTATION = "orientation"
    const GTK_PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
    const GTK_PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
    const GTK_PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
    const GTK_PRINT_SETTINGS_N_COPIES = "n-copies"
    const GTK_PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
    const GTK_PRINT_SETTINGS_QUALITY = "quality"
    const GTK_PRINT_SETTINGS_RESOLUTION = "resolution"
    const GTK_PRINT_SETTINGS_USE_COLOR = "use-color"
    const GTK_PRINT_SETTINGS_DUPLEX = "duplex"
    const GTK_PRINT_SETTINGS_COLLATE = "collate"
    const GTK_PRINT_SETTINGS_REVERSE = "reverse"
    const GTK_PRINT_SETTINGS_MEDIA_TYPE = "media-type"
    const GTK_PRINT_SETTINGS_DITHER = "dither"
    const GTK_PRINT_SETTINGS_SCALE = "scale"
    const GTK_PRINT_SETTINGS_PRINT_PAGES = "print-pages"
    const GTK_PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
    const GTK_PRINT_SETTINGS_PAGE_SET = "page-set"
    const GTK_PRINT_SETTINGS_FINISHINGS = "finishings"
    const GTK_PRINT_SETTINGS_NUMBER_UP = "number-up"
    const GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
    const GTK_PRINT_SETTINGS_OUTPUT_BIN = "output-bin"
    const GTK_PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
    const GTK_PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
    const GTK_PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
    const GTK_PRINT_SETTINGS_OUTPUT_DIR = "output-dir"
    const GTK_PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
    const GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"
    const GTK_PRINT_SETTINGS_OUTPUT_URI = "output-uri"
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"
    const GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
    const GTK_PATH_PRIO_MASK = Float32(0x00)
    end)))
end
